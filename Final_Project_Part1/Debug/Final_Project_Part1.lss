
Final_Project_Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000031ea  0000327e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080017c  0080017c  0000339a  2**0
                  ALLOC
  3 .stab         00002c7c  00000000  00000000  0000339c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000182c  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000973d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a628  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 07 	call	0xf34	; 0xf34 <main>
      8a:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <READ_password>:
 * Function Name  : READ_password
 * Description    : This Function is responsible for reading the password form the keypad.
 * Arguments      : pointer to character to carry an address of the password array.
 * Return         : None
 **************************************************************************************************************/
void READ_password(char*password){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	62 97       	sbiw	r28, 0x12	; 18
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9a 8b       	std	Y+18, r25	; 0x12
     b5c:	89 8b       	std	Y+17, r24	; 0x11
	char password_characters;
    char key;
    for (password_characters = 0 ; password_characters < 5 ; password_characters++ )
     b5e:	18 8a       	std	Y+16, r1	; 0x10
     b60:	9c c0       	rjmp	.+312    	; 0xc9a <READ_password+0x154>
    	{
    		key = KeyPad_getPressedKey();
     b62:	0e 94 10 11 	call	0x2220	; 0x2220 <KeyPad_getPressedKey>
     b66:	8f 87       	std	Y+15, r24	; 0x0f

    	if(password_characters == 4)
     b68:	88 89       	ldd	r24, Y+16	; 0x10
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	41 f4       	brne	.+16     	; 0xb7e <READ_password+0x38>
    	{

    			 if(key == 13)
     b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b70:	8d 30       	cpi	r24, 0x0D	; 13
     b72:	09 f4       	brne	.+2      	; 0xb76 <READ_password+0x30>
     b74:	96 c0       	rjmp	.+300    	; 0xca2 <READ_password+0x15c>
    			{
    				break;
    			}
    			else
    			{
    				password_characters = password_characters-1;
     b76:	88 89       	ldd	r24, Y+16	; 0x10
     b78:	81 50       	subi	r24, 0x01	; 1
     b7a:	88 8b       	std	Y+16, r24	; 0x10
     b7c:	8b c0       	rjmp	.+278    	; 0xc94 <READ_password+0x14e>
    	}

    	else
    	{

    		   if (key >= 0 && key<=9)
     b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	08 f0       	brcs	.+2      	; 0xb86 <READ_password+0x40>
     b84:	84 c0       	rjmp	.+264    	; 0xc8e <READ_password+0x148>
    			{
    				password[password_characters] = key;
     b86:	88 89       	ldd	r24, Y+16	; 0x10
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	89 89       	ldd	r24, Y+17	; 0x11
     b8e:	9a 89       	ldd	r25, Y+18	; 0x12
     b90:	fc 01       	movw	r30, r24
     b92:	e2 0f       	add	r30, r18
     b94:	f3 1f       	adc	r31, r19
     b96:	8f 85       	ldd	r24, Y+15	; 0x0f
     b98:	80 83       	st	Z, r24
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	aa ef       	ldi	r26, 0xFA	; 250
     ba0:	b3 e4       	ldi	r27, 0x43	; 67
     ba2:	8b 87       	std	Y+11, r24	; 0x0b
     ba4:	9c 87       	std	Y+12, r25	; 0x0c
     ba6:	ad 87       	std	Y+13, r26	; 0x0d
     ba8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     baa:	6b 85       	ldd	r22, Y+11	; 0x0b
     bac:	7c 85       	ldd	r23, Y+12	; 0x0c
     bae:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	4a e7       	ldi	r20, 0x7A	; 122
     bb8:	53 e4       	ldi	r21, 0x43	; 67
     bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	8f 83       	std	Y+7, r24	; 0x07
     bc4:	98 87       	std	Y+8, r25	; 0x08
     bc6:	a9 87       	std	Y+9, r26	; 0x09
     bc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bca:	6f 81       	ldd	r22, Y+7	; 0x07
     bcc:	78 85       	ldd	r23, Y+8	; 0x08
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	40 e8       	ldi	r20, 0x80	; 128
     bd8:	5f e3       	ldi	r21, 0x3F	; 63
     bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bde:	88 23       	and	r24, r24
     be0:	2c f4       	brge	.+10     	; 0xbec <READ_password+0xa6>
		__ticks = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9e 83       	std	Y+6, r25	; 0x06
     be8:	8d 83       	std	Y+5, r24	; 0x05
     bea:	3f c0       	rjmp	.+126    	; 0xc6a <READ_password+0x124>
	else if (__tmp > 65535)
     bec:	6f 81       	ldd	r22, Y+7	; 0x07
     bee:	78 85       	ldd	r23, Y+8	; 0x08
     bf0:	89 85       	ldd	r24, Y+9	; 0x09
     bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	3f ef       	ldi	r19, 0xFF	; 255
     bf8:	4f e7       	ldi	r20, 0x7F	; 127
     bfa:	57 e4       	ldi	r21, 0x47	; 71
     bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c00:	18 16       	cp	r1, r24
     c02:	4c f5       	brge	.+82     	; 0xc56 <READ_password+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c04:	6b 85       	ldd	r22, Y+11	; 0x0b
     c06:	7c 85       	ldd	r23, Y+12	; 0x0c
     c08:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e2       	ldi	r20, 0x20	; 32
     c12:	51 e4       	ldi	r21, 0x41	; 65
     c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	9e 83       	std	Y+6, r25	; 0x06
     c2a:	8d 83       	std	Y+5, r24	; 0x05
     c2c:	0f c0       	rjmp	.+30     	; 0xc4c <READ_password+0x106>
     c2e:	89 e1       	ldi	r24, 0x19	; 25
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <READ_password+0xf4>
     c3e:	9c 83       	std	Y+4, r25	; 0x04
     c40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	9e 83       	std	Y+6, r25	; 0x06
     c4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4c:	8d 81       	ldd	r24, Y+5	; 0x05
     c4e:	9e 81       	ldd	r25, Y+6	; 0x06
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	69 f7       	brne	.-38     	; 0xc2e <READ_password+0xe8>
     c54:	14 c0       	rjmp	.+40     	; 0xc7e <READ_password+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c56:	6f 81       	ldd	r22, Y+7	; 0x07
     c58:	78 85       	ldd	r23, Y+8	; 0x08
     c5a:	89 85       	ldd	r24, Y+9	; 0x09
     c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	9e 83       	std	Y+6, r25	; 0x06
     c68:	8d 83       	std	Y+5, r24	; 0x05
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	9a 83       	std	Y+2, r25	; 0x02
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <READ_password+0x130>
     c7a:	9a 83       	std	Y+2, r25	; 0x02
     c7c:	89 83       	std	Y+1, r24	; 0x01
    			{
    				password_characters = password_characters-1;
    				continue;
    			}
    		_delay_ms(500);
    		LCD_goToRowColumn(1 , password_characters);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	68 89       	ldd	r22, Y+16	; 0x10
     c82:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_goToRowColumn>
    		LCD_displayCharacter('*');
     c86:	8a e2       	ldi	r24, 0x2A	; 42
     c88:	0e 94 25 14 	call	0x284a	; 0x284a <LCD_displayCharacter>
     c8c:	03 c0       	rjmp	.+6      	; 0xc94 <READ_password+0x14e>
    				password[password_characters] = key;
    			}

    			else
    			{
    				password_characters = password_characters-1;
     c8e:	88 89       	ldd	r24, Y+16	; 0x10
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	88 8b       	std	Y+16, r24	; 0x10
 * Return         : None
 **************************************************************************************************************/
void READ_password(char*password){
	char password_characters;
    char key;
    for (password_characters = 0 ; password_characters < 5 ; password_characters++ )
     c94:	88 89       	ldd	r24, Y+16	; 0x10
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	88 8b       	std	Y+16, r24	; 0x10
     c9a:	88 89       	ldd	r24, Y+16	; 0x10
     c9c:	85 30       	cpi	r24, 0x05	; 5
     c9e:	08 f4       	brcc	.+2      	; 0xca2 <READ_password+0x15c>
     ca0:	60 cf       	rjmp	.-320    	; 0xb62 <READ_password+0x1c>
    		LCD_displayCharacter('*');
    	}


    	}
}
     ca2:	62 96       	adiw	r28, 0x12	; 18
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <PASSWORD_toString>:
 * Function Name  : PASSWORD_toString
 * Description    : This Function is responsible for transforming the password to a string to be sent to the UART.
 * Arguments      : pointer to character to carry an address of the password array.
 * Return         : None
 **************************************************************************************************************/
void PASSWORD_toString(char*password){
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	00 d0       	rcall	.+0      	; 0xcba <PASSWORD_toString+0x6>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <PASSWORD_toString+0x8>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
     cc4:	1a 82       	std	Y+2, r1	; 0x02
     cc6:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<=4;i++){
     cc8:	1a 82       	std	Y+2, r1	; 0x02
     cca:	19 82       	std	Y+1, r1	; 0x01
     ccc:	13 c0       	rjmp	.+38     	; 0xcf4 <PASSWORD_toString+0x40>
	  if(i==4){
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	91 05       	cpc	r25, r1
     cd6:	49 f4       	brne	.+18     	; 0xcea <PASSWORD_toString+0x36>
        password[i]='#';
     cd8:	29 81       	ldd	r18, Y+1	; 0x01
     cda:	3a 81       	ldd	r19, Y+2	; 0x02
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	fc 01       	movw	r30, r24
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	83 e2       	ldi	r24, 0x23	; 35
     ce8:	80 83       	st	Z, r24
 * Arguments      : pointer to character to carry an address of the password array.
 * Return         : None
 **************************************************************************************************************/
void PASSWORD_toString(char*password){
	int i=0;
	for(i=0;i<=4;i++){
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	9a 81       	ldd	r25, Y+2	; 0x02
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	91 05       	cpc	r25, r1
     cfc:	44 f3       	brlt	.-48     	; 0xcce <PASSWORD_toString+0x1a>
	  if(i==4){
        password[i]='#';
	  }
}

}
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <getPassword>:
 * Description    : This Function is responsible for reading the password form the keypad.
 * Arguments      : pointer to character to carry an address of the password array.
 * Return         : None
 **************************************************************************************************************/
void getPassword(char*password)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	62 97       	sbiw	r28, 0x12	; 18
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	9a 8b       	std	Y+18, r25	; 0x12
     d22:	89 8b       	std	Y+17, r24	; 0x11
	sint8 i;
	uint8 key;
	for (i = 0 ; i < 5 ; i++ )
     d24:	18 8a       	std	Y+16, r1	; 0x10
     d26:	b9 c0       	rjmp	.+370    	; 0xe9a <getPassword+0x18e>
	{
		key = KeyPad_getPressedKey();
     d28:	0e 94 10 11 	call	0x2220	; 0x2220 <KeyPad_getPressedKey>
     d2c:	8f 87       	std	Y+15, r24	; 0x0f
		if(i == 4)
     d2e:	88 89       	ldd	r24, Y+16	; 0x10
     d30:	84 30       	cpi	r24, 0x04	; 4
     d32:	a9 f4       	brne	.+42     	; 0xd5e <getPassword+0x52>
		{

			if ( key == '*')
     d34:	8f 85       	ldd	r24, Y+15	; 0x0f
     d36:	8a 32       	cpi	r24, 0x2A	; 42
     d38:	51 f4       	brne	.+20     	; 0xd4e <getPassword+0x42>
			{
				LCD_displayStringRowColumn(1, 0, "                ");
     d3a:	20 e6       	ldi	r18, 0x60	; 96
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	a9 01       	movw	r20, r18
     d44:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
							i = -1;
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	88 8b       	std	Y+16, r24	; 0x10
     d4c:	a3 c0       	rjmp	.+326    	; 0xe94 <getPassword+0x188>
							continue ;
			}
			else if(key == 13)
     d4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d50:	8d 30       	cpi	r24, 0x0D	; 13
     d52:	09 f4       	brne	.+2      	; 0xd56 <getPassword+0x4a>
     d54:	a6 c0       	rjmp	.+332    	; 0xea2 <getPassword+0x196>
			{
				break;
			}
			else
			{
				i = i-1;
     d56:	88 89       	ldd	r24, Y+16	; 0x10
     d58:	81 50       	subi	r24, 0x01	; 1
     d5a:	88 8b       	std	Y+16, r24	; 0x10
     d5c:	9b c0       	rjmp	.+310    	; 0xe94 <getPassword+0x188>

		else
		{


					if (key == '*')
     d5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d60:	8a 32       	cpi	r24, 0x2A	; 42
     d62:	51 f4       	brne	.+20     	; 0xd78 <getPassword+0x6c>
					{
						LCD_displayStringRowColumn(1, 0, "                ");
     d64:	20 e6       	ldi	r18, 0x60	; 96
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	a9 01       	movw	r20, r18
     d6e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						i = -1;
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	88 8b       	std	Y+16, r24	; 0x10
     d76:	8e c0       	rjmp	.+284    	; 0xe94 <getPassword+0x188>
						continue ;
					}

					else if (key >= 0 && key<=9)
     d78:	8f 85       	ldd	r24, Y+15	; 0x0f
     d7a:	8a 30       	cpi	r24, 0x0A	; 10
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <getPassword+0x74>
     d7e:	87 c0       	rjmp	.+270    	; 0xe8e <getPassword+0x182>
					{
						password[i] = key;
     d80:	88 89       	ldd	r24, Y+16	; 0x10
     d82:	28 2f       	mov	r18, r24
     d84:	33 27       	eor	r19, r19
     d86:	27 fd       	sbrc	r18, 7
     d88:	30 95       	com	r19
     d8a:	89 89       	ldd	r24, Y+17	; 0x11
     d8c:	9a 89       	ldd	r25, Y+18	; 0x12
     d8e:	fc 01       	movw	r30, r24
     d90:	e2 0f       	add	r30, r18
     d92:	f3 1f       	adc	r31, r19
     d94:	8f 85       	ldd	r24, Y+15	; 0x0f
     d96:	80 83       	st	Z, r24
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	aa ef       	ldi	r26, 0xFA	; 250
     d9e:	b3 e4       	ldi	r27, 0x43	; 67
     da0:	8b 87       	std	Y+11, r24	; 0x0b
     da2:	9c 87       	std	Y+12, r25	; 0x0c
     da4:	ad 87       	std	Y+13, r26	; 0x0d
     da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da8:	6b 85       	ldd	r22, Y+11	; 0x0b
     daa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dac:	8d 85       	ldd	r24, Y+13	; 0x0d
     dae:	9e 85       	ldd	r25, Y+14	; 0x0e
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4a e7       	ldi	r20, 0x7A	; 122
     db6:	53 e4       	ldi	r21, 0x43	; 67
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	8f 83       	std	Y+7, r24	; 0x07
     dc2:	98 87       	std	Y+8, r25	; 0x08
     dc4:	a9 87       	std	Y+9, r26	; 0x09
     dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc8:	6f 81       	ldd	r22, Y+7	; 0x07
     dca:	78 85       	ldd	r23, Y+8	; 0x08
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e8       	ldi	r20, 0x80	; 128
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ddc:	88 23       	and	r24, r24
     dde:	2c f4       	brge	.+10     	; 0xdea <getPassword+0xde>
		__ticks = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9e 83       	std	Y+6, r25	; 0x06
     de6:	8d 83       	std	Y+5, r24	; 0x05
     de8:	3f c0       	rjmp	.+126    	; 0xe68 <getPassword+0x15c>
	else if (__tmp > 65535)
     dea:	6f 81       	ldd	r22, Y+7	; 0x07
     dec:	78 85       	ldd	r23, Y+8	; 0x08
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	4f e7       	ldi	r20, 0x7F	; 127
     df8:	57 e4       	ldi	r21, 0x47	; 71
     dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfe:	18 16       	cp	r1, r24
     e00:	4c f5       	brge	.+82     	; 0xe54 <getPassword+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e02:	6b 85       	ldd	r22, Y+11	; 0x0b
     e04:	7c 85       	ldd	r23, Y+12	; 0x0c
     e06:	8d 85       	ldd	r24, Y+13	; 0x0d
     e08:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e2       	ldi	r20, 0x20	; 32
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	0f c0       	rjmp	.+30     	; 0xe4a <getPassword+0x13e>
     e2c:	89 e1       	ldi	r24, 0x19	; 25
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	8b 83       	std	Y+3, r24	; 0x03
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <getPassword+0x12c>
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	69 f7       	brne	.-38     	; 0xe2c <getPassword+0x120>
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <getPassword+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <getPassword+0x168>
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
					{
						i = i-1;
						continue;
					}
					_delay_ms(500);
					LCD_goToRowColumn(1 , i);
     e7c:	98 89       	ldd	r25, Y+16	; 0x10
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	69 2f       	mov	r22, r25
     e82:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_goToRowColumn>
					LCD_displayCharacter('*');
     e86:	8a e2       	ldi	r24, 0x2A	; 42
     e88:	0e 94 25 14 	call	0x284a	; 0x284a <LCD_displayCharacter>
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <getPassword+0x188>
						password[i] = key;
					}

					else
					{
						i = i-1;
     e8e:	88 89       	ldd	r24, Y+16	; 0x10
     e90:	81 50       	subi	r24, 0x01	; 1
     e92:	88 8b       	std	Y+16, r24	; 0x10
 **************************************************************************************************************/
void getPassword(char*password)
{
	sint8 i;
	uint8 key;
	for (i = 0 ; i < 5 ; i++ )
     e94:	88 89       	ldd	r24, Y+16	; 0x10
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	88 8b       	std	Y+16, r24	; 0x10
     e9a:	88 89       	ldd	r24, Y+16	; 0x10
     e9c:	85 30       	cpi	r24, 0x05	; 5
     e9e:	0c f4       	brge	.+2      	; 0xea2 <getPassword+0x196>
     ea0:	43 cf       	rjmp	.-378    	; 0xd28 <getPassword+0x1c>
		}


	}

}
     ea2:	62 96       	adiw	r28, 0x12	; 18
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	f8 94       	cli
     ea8:	de bf       	out	0x3e, r29	; 62
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <readyToSend>:
 * Description    : This Function is responsible for transforming the password to a string to be sent to the UART.
 * Arguments      : pointer to character to carry an address of the password array.
 * Return         : None
 **************************************************************************************************************/
void readyToSend(char*password1, char*password2)
 {
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <readyToSend+0x6>
     eba:	00 d0       	rcall	.+0      	; 0xebc <readyToSend+0x8>
     ebc:	00 d0       	rcall	.+0      	; 0xebe <readyToSend+0xa>
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9c 83       	std	Y+4, r25	; 0x04
     ec4:	8b 83       	std	Y+3, r24	; 0x03
     ec6:	7e 83       	std	Y+6, r23	; 0x06
     ec8:	6d 83       	std	Y+5, r22	; 0x05
	int i ;
	for(i = 0 ; i < 5 ; i++)
     eca:	1a 82       	std	Y+2, r1	; 0x02
     ecc:	19 82       	std	Y+1, r1	; 0x01
     ece:	24 c0       	rjmp	.+72     	; 0xf18 <readyToSend+0x64>
	{
		if(i==4)
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	9a 81       	ldd	r25, Y+2	; 0x02
     ed4:	84 30       	cpi	r24, 0x04	; 4
     ed6:	91 05       	cpc	r25, r1
     ed8:	51 f4       	brne	.+20     	; 0xeee <readyToSend+0x3a>
		{
			password2[i] = '#';
     eda:	29 81       	ldd	r18, Y+1	; 0x01
     edc:	3a 81       	ldd	r19, Y+2	; 0x02
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	fc 01       	movw	r30, r24
     ee4:	e2 0f       	add	r30, r18
     ee6:	f3 1f       	adc	r31, r19
     ee8:	83 e2       	ldi	r24, 0x23	; 35
     eea:	80 83       	st	Z, r24
     eec:	10 c0       	rjmp	.+32     	; 0xf0e <readyToSend+0x5a>
		}
		else
		{
			password2[i] = password1[i];
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	3a 81       	ldd	r19, Y+2	; 0x02
     ef2:	8d 81       	ldd	r24, Y+5	; 0x05
     ef4:	9e 81       	ldd	r25, Y+6	; 0x06
     ef6:	dc 01       	movw	r26, r24
     ef8:	a2 0f       	add	r26, r18
     efa:	b3 1f       	adc	r27, r19
     efc:	29 81       	ldd	r18, Y+1	; 0x01
     efe:	3a 81       	ldd	r19, Y+2	; 0x02
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	fc 01       	movw	r30, r24
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	80 81       	ld	r24, Z
     f0c:	8c 93       	st	X, r24
 * Return         : None
 **************************************************************************************************************/
void readyToSend(char*password1, char*password2)
 {
	int i ;
	for(i = 0 ; i < 5 ; i++)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	85 30       	cpi	r24, 0x05	; 5
     f1e:	91 05       	cpc	r25, r1
     f20:	bc f2       	brlt	.-82     	; 0xed0 <readyToSend+0x1c>
		{
			password2[i] = password1[i];
		}
	}

 }
     f22:	26 96       	adiw	r28, 0x06	; 6
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <main>:



/*************************************************** Main *****************************************************/

int main(){
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	c0 59       	subi	r28, 0x90	; 144
     f42:	d0 40       	sbci	r29, 0x00	; 0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61

	SREG |=1<<7;
     f4e:	af e5       	ldi	r26, 0x5F	; 95
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ef e5       	ldi	r30, 0x5F	; 95
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 68       	ori	r24, 0x80	; 128
     f5a:	8c 93       	st	X, r24
    UCSRBC_init mp1={Eight_bit ,Asynchronous ,Enable_EvenParity ,stop2_bit ,Rising_XCK_EDGE};
     f5c:	ce 01       	movw	r24, r28
     f5e:	81 58       	subi	r24, 0x81	; 129
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	c9 57       	subi	r28, 0x79	; 121
     f64:	df 4f       	sbci	r29, 0xFF	; 255
     f66:	99 83       	std	Y+1, r25	; 0x01
     f68:	88 83       	st	Y, r24
     f6a:	c7 58       	subi	r28, 0x87	; 135
     f6c:	d0 40       	sbci	r29, 0x00	; 0
     f6e:	86 e7       	ldi	r24, 0x76	; 118
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	c7 57       	subi	r28, 0x77	; 119
     f74:	df 4f       	sbci	r29, 0xFF	; 255
     f76:	99 83       	std	Y+1, r25	; 0x01
     f78:	88 83       	st	Y, r24
     f7a:	c9 58       	subi	r28, 0x89	; 137
     f7c:	d0 40       	sbci	r29, 0x00	; 0
     f7e:	95 e0       	ldi	r25, 0x05	; 5
     f80:	c5 57       	subi	r28, 0x75	; 117
     f82:	df 4f       	sbci	r29, 0xFF	; 255
     f84:	98 83       	st	Y, r25
     f86:	cb 58       	subi	r28, 0x8B	; 139
     f88:	d0 40       	sbci	r29, 0x00	; 0
     f8a:	c7 57       	subi	r28, 0x77	; 119
     f8c:	df 4f       	sbci	r29, 0xFF	; 255
     f8e:	e8 81       	ld	r30, Y
     f90:	f9 81       	ldd	r31, Y+1	; 0x01
     f92:	c9 58       	subi	r28, 0x89	; 137
     f94:	d0 40       	sbci	r29, 0x00	; 0
     f96:	00 80       	ld	r0, Z
     f98:	c7 57       	subi	r28, 0x77	; 119
     f9a:	df 4f       	sbci	r29, 0xFF	; 255
     f9c:	88 81       	ld	r24, Y
     f9e:	99 81       	ldd	r25, Y+1	; 0x01
     fa0:	c9 58       	subi	r28, 0x89	; 137
     fa2:	d0 40       	sbci	r29, 0x00	; 0
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	c7 57       	subi	r28, 0x77	; 119
     fa8:	df 4f       	sbci	r29, 0xFF	; 255
     faa:	99 83       	std	Y+1, r25	; 0x01
     fac:	88 83       	st	Y, r24
     fae:	c9 58       	subi	r28, 0x89	; 137
     fb0:	d0 40       	sbci	r29, 0x00	; 0
     fb2:	c9 57       	subi	r28, 0x79	; 121
     fb4:	df 4f       	sbci	r29, 0xFF	; 255
     fb6:	e8 81       	ld	r30, Y
     fb8:	f9 81       	ldd	r31, Y+1	; 0x01
     fba:	c7 58       	subi	r28, 0x87	; 135
     fbc:	d0 40       	sbci	r29, 0x00	; 0
     fbe:	00 82       	st	Z, r0
     fc0:	c9 57       	subi	r28, 0x79	; 121
     fc2:	df 4f       	sbci	r29, 0xFF	; 255
     fc4:	88 81       	ld	r24, Y
     fc6:	99 81       	ldd	r25, Y+1	; 0x01
     fc8:	c7 58       	subi	r28, 0x87	; 135
     fca:	d0 40       	sbci	r29, 0x00	; 0
     fcc:	01 96       	adiw	r24, 0x01	; 1
     fce:	c9 57       	subi	r28, 0x79	; 121
     fd0:	df 4f       	sbci	r29, 0xFF	; 255
     fd2:	99 83       	std	Y+1, r25	; 0x01
     fd4:	88 83       	st	Y, r24
     fd6:	c7 58       	subi	r28, 0x87	; 135
     fd8:	d0 40       	sbci	r29, 0x00	; 0
     fda:	c5 57       	subi	r28, 0x75	; 117
     fdc:	df 4f       	sbci	r29, 0xFF	; 255
     fde:	98 81       	ld	r25, Y
     fe0:	cb 58       	subi	r28, 0x8B	; 139
     fe2:	d0 40       	sbci	r29, 0x00	; 0
     fe4:	91 50       	subi	r25, 0x01	; 1
     fe6:	c5 57       	subi	r28, 0x75	; 117
     fe8:	df 4f       	sbci	r29, 0xFF	; 255
     fea:	98 83       	st	Y, r25
     fec:	cb 58       	subi	r28, 0x8B	; 139
     fee:	d0 40       	sbci	r29, 0x00	; 0
     ff0:	c5 57       	subi	r28, 0x75	; 117
     ff2:	df 4f       	sbci	r29, 0xFF	; 255
     ff4:	e8 81       	ld	r30, Y
     ff6:	cb 58       	subi	r28, 0x8B	; 139
     ff8:	d0 40       	sbci	r29, 0x00	; 0
     ffa:	ee 23       	and	r30, r30
     ffc:	31 f6       	brne	.-116    	; 0xf8a <main+0x56>
	UART_init(&mp1);
     ffe:	ce 01       	movw	r24, r28
    1000:	81 58       	subi	r24, 0x81	; 129
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <UART_init>
	Timer0_setup timer0={Normal02,Normal_NonPWM,Prescaler_256};
    1008:	ce 01       	movw	r24, r28
    100a:	8c 57       	subi	r24, 0x7C	; 124
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	c4 57       	subi	r28, 0x74	; 116
    1010:	df 4f       	sbci	r29, 0xFF	; 255
    1012:	99 83       	std	Y+1, r25	; 0x01
    1014:	88 83       	st	Y, r24
    1016:	cc 58       	subi	r28, 0x8C	; 140
    1018:	d0 40       	sbci	r29, 0x00	; 0
    101a:	83 e7       	ldi	r24, 0x73	; 115
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	c2 57       	subi	r28, 0x72	; 114
    1020:	df 4f       	sbci	r29, 0xFF	; 255
    1022:	99 83       	std	Y+1, r25	; 0x01
    1024:	88 83       	st	Y, r24
    1026:	ce 58       	subi	r28, 0x8E	; 142
    1028:	d0 40       	sbci	r29, 0x00	; 0
    102a:	93 e0       	ldi	r25, 0x03	; 3
    102c:	c0 57       	subi	r28, 0x70	; 112
    102e:	df 4f       	sbci	r29, 0xFF	; 255
    1030:	98 83       	st	Y, r25
    1032:	c0 59       	subi	r28, 0x90	; 144
    1034:	d0 40       	sbci	r29, 0x00	; 0
    1036:	c2 57       	subi	r28, 0x72	; 114
    1038:	df 4f       	sbci	r29, 0xFF	; 255
    103a:	e8 81       	ld	r30, Y
    103c:	f9 81       	ldd	r31, Y+1	; 0x01
    103e:	ce 58       	subi	r28, 0x8E	; 142
    1040:	d0 40       	sbci	r29, 0x00	; 0
    1042:	00 80       	ld	r0, Z
    1044:	c2 57       	subi	r28, 0x72	; 114
    1046:	df 4f       	sbci	r29, 0xFF	; 255
    1048:	88 81       	ld	r24, Y
    104a:	99 81       	ldd	r25, Y+1	; 0x01
    104c:	ce 58       	subi	r28, 0x8E	; 142
    104e:	d0 40       	sbci	r29, 0x00	; 0
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	c2 57       	subi	r28, 0x72	; 114
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	99 83       	std	Y+1, r25	; 0x01
    1058:	88 83       	st	Y, r24
    105a:	ce 58       	subi	r28, 0x8E	; 142
    105c:	d0 40       	sbci	r29, 0x00	; 0
    105e:	c4 57       	subi	r28, 0x74	; 116
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	e8 81       	ld	r30, Y
    1064:	f9 81       	ldd	r31, Y+1	; 0x01
    1066:	cc 58       	subi	r28, 0x8C	; 140
    1068:	d0 40       	sbci	r29, 0x00	; 0
    106a:	00 82       	st	Z, r0
    106c:	c4 57       	subi	r28, 0x74	; 116
    106e:	df 4f       	sbci	r29, 0xFF	; 255
    1070:	88 81       	ld	r24, Y
    1072:	99 81       	ldd	r25, Y+1	; 0x01
    1074:	cc 58       	subi	r28, 0x8C	; 140
    1076:	d0 40       	sbci	r29, 0x00	; 0
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	c4 57       	subi	r28, 0x74	; 116
    107c:	df 4f       	sbci	r29, 0xFF	; 255
    107e:	99 83       	std	Y+1, r25	; 0x01
    1080:	88 83       	st	Y, r24
    1082:	cc 58       	subi	r28, 0x8C	; 140
    1084:	d0 40       	sbci	r29, 0x00	; 0
    1086:	c0 57       	subi	r28, 0x70	; 112
    1088:	df 4f       	sbci	r29, 0xFF	; 255
    108a:	98 81       	ld	r25, Y
    108c:	c0 59       	subi	r28, 0x90	; 144
    108e:	d0 40       	sbci	r29, 0x00	; 0
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	c0 57       	subi	r28, 0x70	; 112
    1094:	df 4f       	sbci	r29, 0xFF	; 255
    1096:	98 83       	st	Y, r25
    1098:	c0 59       	subi	r28, 0x90	; 144
    109a:	d0 40       	sbci	r29, 0x00	; 0
    109c:	c0 57       	subi	r28, 0x70	; 112
    109e:	df 4f       	sbci	r29, 0xFF	; 255
    10a0:	e8 81       	ld	r30, Y
    10a2:	c0 59       	subi	r28, 0x90	; 144
    10a4:	d0 40       	sbci	r29, 0x00	; 0
    10a6:	ee 23       	and	r30, r30
    10a8:	31 f6       	brne	.-116    	; 0x1036 <main+0x102>
	SET_timer0(&timer0);
    10aa:	ce 01       	movw	r24, r28
    10ac:	8c 57       	subi	r24, 0x7C	; 124
    10ae:	9f 4f       	sbci	r25, 0xFF	; 255
    10b0:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <SET_timer0>
	LCD_init();
    10b4:	0e 94 0e 12 	call	0x241c	; 0x241c <LCD_init>
	LCD_displayStringRowColumn(0,4," Welcome ");
    10b8:	21 e7       	ldi	r18, 0x71	; 113
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	64 e0       	ldi	r22, 0x04	; 4
    10c0:	a9 01       	movw	r20, r18
    10c2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0," Final Project");
    10c6:	2b e7       	ldi	r18, 0x7B	; 123
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	a9 01       	movw	r20, r18
    10d0:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    10d4:	fe 01       	movw	r30, r28
    10d6:	e5 58       	subi	r30, 0x85	; 133
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	aa e7       	ldi	r26, 0x7A	; 122
    10e0:	b4 e4       	ldi	r27, 0x44	; 68
    10e2:	80 83       	st	Z, r24
    10e4:	91 83       	std	Z+1, r25	; 0x01
    10e6:	a2 83       	std	Z+2, r26	; 0x02
    10e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ea:	8e 01       	movw	r16, r28
    10ec:	09 58       	subi	r16, 0x89	; 137
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	fe 01       	movw	r30, r28
    10f2:	e5 58       	subi	r30, 0x85	; 133
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	60 81       	ld	r22, Z
    10f8:	71 81       	ldd	r23, Z+1	; 0x01
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	4a e7       	ldi	r20, 0x7A	; 122
    1104:	53 e4       	ldi	r21, 0x43	; 67
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	f8 01       	movw	r30, r16
    1110:	80 83       	st	Z, r24
    1112:	91 83       	std	Z+1, r25	; 0x01
    1114:	a2 83       	std	Z+2, r26	; 0x02
    1116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1118:	fe 01       	movw	r30, r28
    111a:	e9 58       	subi	r30, 0x89	; 137
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	60 81       	ld	r22, Z
    1120:	71 81       	ldd	r23, Z+1	; 0x01
    1122:	82 81       	ldd	r24, Z+2	; 0x02
    1124:	93 81       	ldd	r25, Z+3	; 0x03
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e8       	ldi	r20, 0x80	; 128
    112c:	5f e3       	ldi	r21, 0x3F	; 63
    112e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1132:	88 23       	and	r24, r24
    1134:	44 f4       	brge	.+16     	; 0x1146 <main+0x212>
		__ticks = 1;
    1136:	fe 01       	movw	r30, r28
    1138:	eb 58       	subi	r30, 0x8B	; 139
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
    1144:	64 c0       	rjmp	.+200    	; 0x120e <main+0x2da>
	else if (__tmp > 65535)
    1146:	fe 01       	movw	r30, r28
    1148:	e9 58       	subi	r30, 0x89	; 137
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	0c f0       	brlt	.+2      	; 0x1166 <main+0x232>
    1164:	43 c0       	rjmp	.+134    	; 0x11ec <main+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	fe 01       	movw	r30, r28
    1168:	e5 58       	subi	r30, 0x85	; 133
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	60 81       	ld	r22, Z
    116e:	71 81       	ldd	r23, Z+1	; 0x01
    1170:	82 81       	ldd	r24, Z+2	; 0x02
    1172:	93 81       	ldd	r25, Z+3	; 0x03
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e2       	ldi	r20, 0x20	; 32
    117a:	51 e4       	ldi	r21, 0x41	; 65
    117c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8e 01       	movw	r16, r28
    1186:	0b 58       	subi	r16, 0x8B	; 139
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	1f c0       	rjmp	.+62     	; 0x11dc <main+0x2a8>
    119e:	fe 01       	movw	r30, r28
    11a0:	ed 58       	subi	r30, 0x8D	; 141
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	89 e1       	ldi	r24, 0x19	; 25
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	91 83       	std	Z+1, r25	; 0x01
    11aa:	80 83       	st	Z, r24
    11ac:	fe 01       	movw	r30, r28
    11ae:	ed 58       	subi	r30, 0x8D	; 141
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <main+0x282>
    11ba:	fe 01       	movw	r30, r28
    11bc:	ed 58       	subi	r30, 0x8D	; 141
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	de 01       	movw	r26, r28
    11c6:	ab 58       	subi	r26, 0x8B	; 139
    11c8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ca:	fe 01       	movw	r30, r28
    11cc:	eb 58       	subi	r30, 0x8B	; 139
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	11 96       	adiw	r26, 0x01	; 1
    11d8:	9c 93       	st	X, r25
    11da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	fe 01       	movw	r30, r28
    11de:	eb 58       	subi	r30, 0x8B	; 139
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	d1 f6       	brne	.-76     	; 0x119e <main+0x26a>
    11ea:	27 c0       	rjmp	.+78     	; 0x123a <main+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ec:	8e 01       	movw	r16, r28
    11ee:	0b 58       	subi	r16, 0x8B	; 139
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	fe 01       	movw	r30, r28
    11f4:	e9 58       	subi	r30, 0x89	; 137
    11f6:	ff 4f       	sbci	r31, 0xFF	; 255
    11f8:	60 81       	ld	r22, Z
    11fa:	71 81       	ldd	r23, Z+1	; 0x01
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	f8 01       	movw	r30, r16
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
    120e:	de 01       	movw	r26, r28
    1210:	af 58       	subi	r26, 0x8F	; 143
    1212:	bf 4f       	sbci	r27, 0xFF	; 255
    1214:	fe 01       	movw	r30, r28
    1216:	eb 58       	subi	r30, 0x8B	; 139
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	8d 93       	st	X+, r24
    1220:	9c 93       	st	X, r25
    1222:	fe 01       	movw	r30, r28
    1224:	ef 58       	subi	r30, 0x8F	; 143
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 81       	ld	r24, Z
    122a:	91 81       	ldd	r25, Z+1	; 0x01
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <main+0x2f8>
    1230:	fe 01       	movw	r30, r28
    1232:	ef 58       	subi	r30, 0x8F	; 143
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24
	_delay_ms(1000);
	LCD_clearScreen();
    123a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
		SREG |=(1<<7);
    123e:	af e5       	ldi	r26, 0x5F	; 95
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ef e5       	ldi	r30, 0x5F	; 95
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	80 68       	ori	r24, 0x80	; 128
    124a:	8c 93       	st	X, r24
    124c:	fe 01       	movw	r30, r28
    124e:	e3 59       	subi	r30, 0x93	; 147
    1250:	ff 4f       	sbci	r31, 0xFF	; 255
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a8 e4       	ldi	r26, 0x48	; 72
    1258:	b2 e4       	ldi	r27, 0x42	; 66
    125a:	80 83       	st	Z, r24
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	a2 83       	std	Z+2, r26	; 0x02
    1260:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	8e 01       	movw	r16, r28
    1264:	07 59       	subi	r16, 0x97	; 151
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	fe 01       	movw	r30, r28
    126a:	e3 59       	subi	r30, 0x93	; 147
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	60 81       	ld	r22, Z
    1270:	71 81       	ldd	r23, Z+1	; 0x01
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a e7       	ldi	r20, 0x7A	; 122
    127c:	53 e4       	ldi	r21, 0x43	; 67
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	f8 01       	movw	r30, r16
    1288:	80 83       	st	Z, r24
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	a2 83       	std	Z+2, r26	; 0x02
    128e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1290:	fe 01       	movw	r30, r28
    1292:	e7 59       	subi	r30, 0x97	; 151
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	44 f4       	brge	.+16     	; 0x12be <main+0x38a>
		__ticks = 1;
    12ae:	fe 01       	movw	r30, r28
    12b0:	e9 59       	subi	r30, 0x99	; 153
    12b2:	ff 4f       	sbci	r31, 0xFF	; 255
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	91 83       	std	Z+1, r25	; 0x01
    12ba:	80 83       	st	Z, r24
    12bc:	64 c0       	rjmp	.+200    	; 0x1386 <main+0x452>
	else if (__tmp > 65535)
    12be:	fe 01       	movw	r30, r28
    12c0:	e7 59       	subi	r30, 0x97	; 151
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	0c f0       	brlt	.+2      	; 0x12de <main+0x3aa>
    12dc:	43 c0       	rjmp	.+134    	; 0x1364 <main+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	fe 01       	movw	r30, r28
    12e0:	e3 59       	subi	r30, 0x93	; 147
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8e 01       	movw	r16, r28
    12fe:	09 59       	subi	r16, 0x99	; 153
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	f8 01       	movw	r30, r16
    1310:	91 83       	std	Z+1, r25	; 0x01
    1312:	80 83       	st	Z, r24
    1314:	1f c0       	rjmp	.+62     	; 0x1354 <main+0x420>
    1316:	fe 01       	movw	r30, r28
    1318:	eb 59       	subi	r30, 0x9B	; 155
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	89 e1       	ldi	r24, 0x19	; 25
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	80 83       	st	Z, r24
    1324:	fe 01       	movw	r30, r28
    1326:	eb 59       	subi	r30, 0x9B	; 155
    1328:	ff 4f       	sbci	r31, 0xFF	; 255
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <main+0x3fa>
    1332:	fe 01       	movw	r30, r28
    1334:	eb 59       	subi	r30, 0x9B	; 155
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133c:	de 01       	movw	r26, r28
    133e:	a9 59       	subi	r26, 0x99	; 153
    1340:	bf 4f       	sbci	r27, 0xFF	; 255
    1342:	fe 01       	movw	r30, r28
    1344:	e9 59       	subi	r30, 0x99	; 153
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	9c 93       	st	X, r25
    1352:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1354:	fe 01       	movw	r30, r28
    1356:	e9 59       	subi	r30, 0x99	; 153
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	d1 f6       	brne	.-76     	; 0x1316 <main+0x3e2>
    1362:	27 c0       	rjmp	.+78     	; 0x13b2 <main+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1364:	8e 01       	movw	r16, r28
    1366:	09 59       	subi	r16, 0x99	; 153
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	fe 01       	movw	r30, r28
    136c:	e7 59       	subi	r30, 0x97	; 151
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	82 81       	ldd	r24, Z+2	; 0x02
    1376:	93 81       	ldd	r25, Z+3	; 0x03
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	f8 01       	movw	r30, r16
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	de 01       	movw	r26, r28
    1388:	ad 59       	subi	r26, 0x9D	; 157
    138a:	bf 4f       	sbci	r27, 0xFF	; 255
    138c:	fe 01       	movw	r30, r28
    138e:	e9 59       	subi	r30, 0x99	; 153
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	8d 93       	st	X+, r24
    1398:	9c 93       	st	X, r25
    139a:	fe 01       	movw	r30, r28
    139c:	ed 59       	subi	r30, 0x9D	; 157
    139e:	ff 4f       	sbci	r31, 0xFF	; 255
    13a0:	80 81       	ld	r24, Z
    13a2:	91 81       	ldd	r25, Z+1	; 0x01
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <main+0x470>
    13a8:	fe 01       	movw	r30, r28
    13aa:	ed 59       	subi	r30, 0x9D	; 157
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	80 83       	st	Z, r24
		_delay_ms(50);
		while(1)
		{
			memValue = eeprom_read_byte((uint8 *)INTERNAL_MEMORY_ADD);
    13b2:	8f e0       	ldi	r24, 0x0F	; 15
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 ba 18 	call	0x3174	; 0x3174 <__eerd_byte_m16>
    13ba:	80 93 88 01 	sts	0x0188, r24
			if(memValue != INTERNAL_MEMORY_DATA)
    13be:	80 91 88 01 	lds	r24, 0x0188
    13c2:	80 31       	cpi	r24, 0x10	; 16
    13c4:	19 f0       	breq	.+6      	; 0x13cc <main+0x498>
			{
				firstTimeFlag = 0;
    13c6:	10 92 7c 01 	sts	0x017C, r1
    13ca:	07 c0       	rjmp	.+14     	; 0x13da <main+0x4a6>
			}
			else if (memValue == INTERNAL_MEMORY_DATA)
    13cc:	80 91 88 01 	lds	r24, 0x0188
    13d0:	80 31       	cpi	r24, 0x10	; 16
    13d2:	19 f4       	brne	.+6      	; 0x13da <main+0x4a6>
			{
				firstTimeFlag = 1;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 7c 01 	sts	0x017C, r24
			}
			if(firstTimeFlag == 0)
    13da:	80 91 7c 01 	lds	r24, 0x017C
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <main+0x4b0>
    13e2:	bf c1       	rjmp	.+894    	; 0x1762 <main+0x82e>
				{
				    LCD_clearScreen();
    13e4:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
					LCD_displayString("Enter 4-dig Pass");
    13e8:	8a e8       	ldi	r24, 0x8A	; 138
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_displayString>
					getPassword(a_firstPassword);
    13f0:	87 e9       	ldi	r24, 0x97	; 151
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 86 06 	call	0xd0c	; 0xd0c <getPassword>
					LCD_clearScreen();
    13f8:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
					LCD_displayString("Re-enter Pass");
    13fc:	8b e9       	ldi	r24, 0x9B	; 155
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_displayString>
					getPassword(a_secondPassword);
    1404:	8b e8       	ldi	r24, 0x8B	; 139
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	0e 94 86 06 	call	0xd0c	; 0xd0c <getPassword>
					compare = strcmp(a_firstPassword ,a_secondPassword );
    140c:	87 e9       	ldi	r24, 0x97	; 151
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	2b e8       	ldi	r18, 0x8B	; 139
    1412:	31 e0       	ldi	r19, 0x01	; 1
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 90 18 	call	0x3120	; 0x3120 <strcmp>
    141a:	80 93 a1 01 	sts	0x01A1, r24
					if(compare == 0)
    141e:	80 91 a1 01 	lds	r24, 0x01A1
    1422:	88 23       	and	r24, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <main+0x4f4>
    1426:	d7 c0       	rjmp	.+430    	; 0x15d6 <main+0x6a2>
					{
						eeprom_write_byte((uint8 *)INTERNAL_MEMORY_ADD,INTERNAL_MEMORY_DATA);
    1428:	8f e0       	ldi	r24, 0x0F	; 15
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	60 e1       	ldi	r22, 0x10	; 16
    142e:	0e 94 c2 18 	call	0x3184	; 0x3184 <__eewr_byte_m16>

						LCD_clearScreen();
    1432:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "password");
    1436:	29 ea       	ldi	r18, 0xA9	; 169
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, "Match");
    1444:	22 eb       	ldi	r18, 0xB2	; 178
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    1452:	fe 01       	movw	r30, r28
    1454:	e1 5a       	subi	r30, 0xA1	; 161
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	aa e7       	ldi	r26, 0x7A	; 122
    145e:	b4 e4       	ldi	r27, 0x44	; 68
    1460:	80 83       	st	Z, r24
    1462:	91 83       	std	Z+1, r25	; 0x01
    1464:	a2 83       	std	Z+2, r26	; 0x02
    1466:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1468:	8e 01       	movw	r16, r28
    146a:	05 5a       	subi	r16, 0xA5	; 165
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	fe 01       	movw	r30, r28
    1470:	e1 5a       	subi	r30, 0xA1	; 161
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	4a e7       	ldi	r20, 0x7A	; 122
    1482:	53 e4       	ldi	r21, 0x43	; 67
    1484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22
    148c:	f8 01       	movw	r30, r16
    148e:	80 83       	st	Z, r24
    1490:	91 83       	std	Z+1, r25	; 0x01
    1492:	a2 83       	std	Z+2, r26	; 0x02
    1494:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1496:	fe 01       	movw	r30, r28
    1498:	e5 5a       	subi	r30, 0xA5	; 165
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	44 f4       	brge	.+16     	; 0x14c4 <main+0x590>
		__ticks = 1;
    14b4:	fe 01       	movw	r30, r28
    14b6:	e7 5a       	subi	r30, 0xA7	; 167
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	80 83       	st	Z, r24
    14c2:	64 c0       	rjmp	.+200    	; 0x158c <main+0x658>
	else if (__tmp > 65535)
    14c4:	fe 01       	movw	r30, r28
    14c6:	e5 5a       	subi	r30, 0xA5	; 165
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	57 e4       	ldi	r21, 0x47	; 71
    14da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	0c f0       	brlt	.+2      	; 0x14e4 <main+0x5b0>
    14e2:	43 c0       	rjmp	.+134    	; 0x156a <main+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14e4:	fe 01       	movw	r30, r28
    14e6:	e1 5a       	subi	r30, 0xA1	; 161
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e2       	ldi	r20, 0x20	; 32
    14f8:	51 e4       	ldi	r21, 0x41	; 65
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	8e 01       	movw	r16, r28
    1504:	07 5a       	subi	r16, 0xA7	; 167
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	f8 01       	movw	r30, r16
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
    151a:	1f c0       	rjmp	.+62     	; 0x155a <main+0x626>
    151c:	fe 01       	movw	r30, r28
    151e:	e9 5a       	subi	r30, 0xA9	; 169
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	89 e1       	ldi	r24, 0x19	; 25
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	91 83       	std	Z+1, r25	; 0x01
    1528:	80 83       	st	Z, r24
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5a       	subi	r30, 0xA9	; 169
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <main+0x600>
    1538:	fe 01       	movw	r30, r28
    153a:	e9 5a       	subi	r30, 0xA9	; 169
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	91 83       	std	Z+1, r25	; 0x01
    1540:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	de 01       	movw	r26, r28
    1544:	a7 5a       	subi	r26, 0xA7	; 167
    1546:	bf 4f       	sbci	r27, 0xFF	; 255
    1548:	fe 01       	movw	r30, r28
    154a:	e7 5a       	subi	r30, 0xA7	; 167
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	11 96       	adiw	r26, 0x01	; 1
    1556:	9c 93       	st	X, r25
    1558:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	fe 01       	movw	r30, r28
    155c:	e7 5a       	subi	r30, 0xA7	; 167
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	d1 f6       	brne	.-76     	; 0x151c <main+0x5e8>
    1568:	27 c0       	rjmp	.+78     	; 0x15b8 <main+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156a:	8e 01       	movw	r16, r28
    156c:	07 5a       	subi	r16, 0xA7	; 167
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	fe 01       	movw	r30, r28
    1572:	e5 5a       	subi	r30, 0xA5	; 165
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	f8 01       	movw	r30, r16
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
    158c:	de 01       	movw	r26, r28
    158e:	ab 5a       	subi	r26, 0xAB	; 171
    1590:	bf 4f       	sbci	r27, 0xFF	; 255
    1592:	fe 01       	movw	r30, r28
    1594:	e7 5a       	subi	r30, 0xA7	; 167
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	8d 93       	st	X+, r24
    159e:	9c 93       	st	X, r25
    15a0:	fe 01       	movw	r30, r28
    15a2:	eb 5a       	subi	r30, 0xAB	; 171
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	91 81       	ldd	r25, Z+1	; 0x01
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <main+0x676>
    15ae:	fe 01       	movw	r30, r28
    15b0:	eb 5a       	subi	r30, 0xAB	; 171
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	80 83       	st	Z, r24
						_delay_ms(1000);
						readyToSend(a_firstPassword , a_message);
    15b8:	87 e9       	ldi	r24, 0x97	; 151
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	23 e8       	ldi	r18, 0x83	; 131
    15be:	31 e0       	ldi	r19, 0x01	; 1
    15c0:	b9 01       	movw	r22, r18
    15c2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <readyToSend>
						UART_sendByte(SAVE_PASSWORD);
    15c6:	8b e0       	ldi	r24, 0x0B	; 11
    15c8:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_sendByte>
						UART_sendString(a_message);
    15cc:	83 e8       	ldi	r24, 0x83	; 131
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 a2 10 	call	0x2144	; 0x2144 <UART_sendString>
    15d4:	ee ce       	rjmp	.-548    	; 0x13b2 <main+0x47e>

					}
					else
					{
						LCD_clearScreen();
    15d6:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "password");
    15da:	29 ea       	ldi	r18, 0xA9	; 169
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	a9 01       	movw	r20, r18
    15e4:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1, 0, " don't Match");
    15e8:	28 eb       	ldi	r18, 0xB8	; 184
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	a9 01       	movw	r20, r18
    15f2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    15f6:	fe 01       	movw	r30, r28
    15f8:	ef 5a       	subi	r30, 0xAF	; 175
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	aa e7       	ldi	r26, 0x7A	; 122
    1602:	b4 e4       	ldi	r27, 0x44	; 68
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	8e 01       	movw	r16, r28
    160e:	03 5b       	subi	r16, 0xB3	; 179
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	ef 5a       	subi	r30, 0xAF	; 175
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a e7       	ldi	r20, 0x7A	; 122
    1626:	53 e4       	ldi	r21, 0x43	; 67
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    163a:	fe 01       	movw	r30, r28
    163c:	e3 5b       	subi	r30, 0xB3	; 179
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	44 f4       	brge	.+16     	; 0x1668 <main+0x734>
		__ticks = 1;
    1658:	fe 01       	movw	r30, r28
    165a:	e5 5b       	subi	r30, 0xB5	; 181
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	64 c0       	rjmp	.+200    	; 0x1730 <main+0x7fc>
	else if (__tmp > 65535)
    1668:	fe 01       	movw	r30, r28
    166a:	e3 5b       	subi	r30, 0xB3	; 179
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f0       	brlt	.+2      	; 0x1688 <main+0x754>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <main+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	fe 01       	movw	r30, r28
    168a:	ef 5a       	subi	r30, 0xAF	; 175
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 01       	movw	r16, r28
    16a8:	05 5b       	subi	r16, 0xB5	; 181
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	f8 01       	movw	r30, r16
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	1f c0       	rjmp	.+62     	; 0x16fe <main+0x7ca>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e7 5b       	subi	r30, 0xB7	; 183
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	89 e1       	ldi	r24, 0x19	; 25
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 5b       	subi	r30, 0xB7	; 183
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <main+0x7a4>
    16dc:	fe 01       	movw	r30, r28
    16de:	e7 5b       	subi	r30, 0xB7	; 183
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	de 01       	movw	r26, r28
    16e8:	a5 5b       	subi	r26, 0xB5	; 181
    16ea:	bf 4f       	sbci	r27, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5b       	subi	r30, 0xB5	; 181
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	9c 93       	st	X, r25
    16fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	fe 01       	movw	r30, r28
    1700:	e5 5b       	subi	r30, 0xB5	; 181
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	d1 f6       	brne	.-76     	; 0x16c0 <main+0x78c>
    170c:	27 c0       	rjmp	.+78     	; 0x175c <main+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	8e 01       	movw	r16, r28
    1710:	05 5b       	subi	r16, 0xB5	; 181
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	fe 01       	movw	r30, r28
    1716:	e3 5b       	subi	r30, 0xB3	; 179
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	de 01       	movw	r26, r28
    1732:	a9 5b       	subi	r26, 0xB9	; 185
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	e5 5b       	subi	r30, 0xB5	; 181
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	8d 93       	st	X+, r24
    1742:	9c 93       	st	X, r25
    1744:	fe 01       	movw	r30, r28
    1746:	e9 5b       	subi	r30, 0xB9	; 185
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <main+0x81a>
    1752:	fe 01       	movw	r30, r28
    1754:	e9 5b       	subi	r30, 0xB9	; 185
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
						_delay_ms(1000);
						LCD_clearScreen();
    175c:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
    1760:	28 ce       	rjmp	.-944    	; 0x13b2 <main+0x47e>

					}
				}
			else if(firstTimeFlag == 1)
    1762:	80 91 7c 01 	lds	r24, 0x017C
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	09 f0       	breq	.+2      	; 0x176c <main+0x838>
    176a:	23 ce       	rjmp	.-954    	; 0x13b2 <main+0x47e>
			{
				if(screen == 0)
    176c:	80 91 7d 01 	lds	r24, 0x017D
    1770:	88 23       	and	r24, r24
    1772:	09 f0       	breq	.+2      	; 0x1776 <main+0x842>
    1774:	0c c1       	rjmp	.+536    	; 0x198e <main+0xa5a>
				{

					LCD_clearScreen();
    1776:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "0:Open Door");
    177a:	25 ec       	ldi	r18, 0xC5	; 197
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	60 e0       	ldi	r22, 0x00	; 0
    1782:	a9 01       	movw	r20, r18
    1784:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "1:Change PW");
    1788:	21 ed       	ldi	r18, 0xD1	; 209
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
					operation = KeyPad_getPressedKey();
    1796:	0e 94 10 11 	call	0x2220	; 0x2220 <KeyPad_getPressedKey>
    179a:	80 93 8a 01 	sts	0x018A, r24
    179e:	fe 01       	movw	r30, r28
    17a0:	ed 5b       	subi	r30, 0xBD	; 189
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a8 ec       	ldi	r26, 0xC8	; 200
    17aa:	b3 e4       	ldi	r27, 0x43	; 67
    17ac:	80 83       	st	Z, r24
    17ae:	91 83       	std	Z+1, r25	; 0x01
    17b0:	a2 83       	std	Z+2, r26	; 0x02
    17b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17b4:	8e 01       	movw	r16, r28
    17b6:	01 5c       	subi	r16, 0xC1	; 193
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	fe 01       	movw	r30, r28
    17bc:	ed 5b       	subi	r30, 0xBD	; 189
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a e7       	ldi	r20, 0x7A	; 122
    17ce:	53 e4       	ldi	r21, 0x43	; 67
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	f8 01       	movw	r30, r16
    17da:	80 83       	st	Z, r24
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	a2 83       	std	Z+2, r26	; 0x02
    17e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17e2:	fe 01       	movw	r30, r28
    17e4:	ff 96       	adiw	r30, 0x3f	; 63
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e8       	ldi	r20, 0x80	; 128
    17f4:	5f e3       	ldi	r21, 0x3F	; 63
    17f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fa:	88 23       	and	r24, r24
    17fc:	2c f4       	brge	.+10     	; 0x1808 <main+0x8d4>
		__ticks = 1;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9e af       	std	Y+62, r25	; 0x3e
    1804:	8d af       	std	Y+61, r24	; 0x3d
    1806:	46 c0       	rjmp	.+140    	; 0x1894 <main+0x960>
	else if (__tmp > 65535)
    1808:	fe 01       	movw	r30, r28
    180a:	ff 96       	adiw	r30, 0x3f	; 63
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	64 f5       	brge	.+88     	; 0x187c <main+0x948>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	fe 01       	movw	r30, r28
    1826:	ed 5b       	subi	r30, 0xBD	; 189
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e af       	std	Y+62, r25	; 0x3e
    1850:	8d af       	std	Y+61, r24	; 0x3d
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <main+0x93e>
    1854:	89 e1       	ldi	r24, 0x19	; 25
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c af       	std	Y+60, r25	; 0x3c
    185a:	8b af       	std	Y+59, r24	; 0x3b
    185c:	8b ad       	ldd	r24, Y+59	; 0x3b
    185e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <main+0x92c>
    1864:	9c af       	std	Y+60, r25	; 0x3c
    1866:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	8d ad       	ldd	r24, Y+61	; 0x3d
    186a:	9e ad       	ldd	r25, Y+62	; 0x3e
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9e af       	std	Y+62, r25	; 0x3e
    1870:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1872:	8d ad       	ldd	r24, Y+61	; 0x3d
    1874:	9e ad       	ldd	r25, Y+62	; 0x3e
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f7       	brne	.-38     	; 0x1854 <main+0x920>
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <main+0x974>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	fe 01       	movw	r30, r28
    187e:	ff 96       	adiw	r30, 0x3f	; 63
    1880:	60 81       	ld	r22, Z
    1882:	71 81       	ldd	r23, Z+1	; 0x01
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9e af       	std	Y+62, r25	; 0x3e
    1892:	8d af       	std	Y+61, r24	; 0x3d
    1894:	8d ad       	ldd	r24, Y+61	; 0x3d
    1896:	9e ad       	ldd	r25, Y+62	; 0x3e
    1898:	9a af       	std	Y+58, r25	; 0x3a
    189a:	89 af       	std	Y+57, r24	; 0x39
    189c:	89 ad       	ldd	r24, Y+57	; 0x39
    189e:	9a ad       	ldd	r25, Y+58	; 0x3a
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <main+0x96c>
    18a4:	9a af       	std	Y+58, r25	; 0x3a
    18a6:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(400);
					if(operation == 0)
    18a8:	80 91 8a 01 	lds	r24, 0x018A
    18ac:	88 23       	and	r24, r24
    18ae:	f9 f4       	brne	.+62     	; 0x18ee <main+0x9ba>
					{
						LCD_clearScreen();
    18b0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "please enter PW");
    18b4:	2d ed       	ldi	r18, 0xDD	; 221
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	a9 01       	movw	r20, r18
    18be:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						getPassword(a_firstPassword);
    18c2:	87 e9       	ldi	r24, 0x97	; 151
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	0e 94 86 06 	call	0xd0c	; 0xd0c <getPassword>
						readyToSend(a_firstPassword , a_message);
    18ca:	87 e9       	ldi	r24, 0x97	; 151
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	23 e8       	ldi	r18, 0x83	; 131
    18d0:	31 e0       	ldi	r19, 0x01	; 1
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <readyToSend>
						UART_sendByte(OPEN_DOOR);
    18d8:	8d e0       	ldi	r24, 0x0D	; 13
    18da:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_sendByte>
						UART_sendString(a_message);
    18de:	83 e8       	ldi	r24, 0x83	; 131
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 a2 10 	call	0x2144	; 0x2144 <UART_sendString>
						screen = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 7d 01 	sts	0x017D, r24
    18ec:	62 cd       	rjmp	.-1340   	; 0x13b2 <main+0x47e>
					}
					else if(operation == 1)
    18ee:	80 91 8a 01 	lds	r24, 0x018A
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <main+0x9c4>
    18f6:	5d cd       	rjmp	.-1350   	; 0x13b2 <main+0x47e>
					{
						LCD_clearScreen();
    18f8:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, " enter old PW");
    18fc:	2d ee       	ldi	r18, 0xED	; 237
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	a9 01       	movw	r20, r18
    1906:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						getPassword(a_firstPassword);
    190a:	87 e9       	ldi	r24, 0x97	; 151
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	0e 94 86 06 	call	0xd0c	; 0xd0c <getPassword>
						for( i = 0 ; i < 5 ; i++)
    1912:	10 92 96 01 	sts	0x0196, r1
    1916:	10 92 95 01 	sts	0x0195, r1
    191a:	19 c0       	rjmp	.+50     	; 0x194e <main+0xa1a>
						{
							a_oldPass[i] = a_firstPassword[i];
    191c:	20 91 95 01 	lds	r18, 0x0195
    1920:	30 91 96 01 	lds	r19, 0x0196
    1924:	80 91 95 01 	lds	r24, 0x0195
    1928:	90 91 96 01 	lds	r25, 0x0196
    192c:	fc 01       	movw	r30, r24
    192e:	e9 56       	subi	r30, 0x69	; 105
    1930:	fe 4f       	sbci	r31, 0xFE	; 254
    1932:	80 81       	ld	r24, Z
    1934:	f9 01       	movw	r30, r18
    1936:	e0 57       	subi	r30, 0x70	; 112
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	80 83       	st	Z, r24
					else if(operation == 1)
					{
						LCD_clearScreen();
						LCD_displayStringRowColumn(0, 0, " enter old PW");
						getPassword(a_firstPassword);
						for( i = 0 ; i < 5 ; i++)
    193c:	80 91 95 01 	lds	r24, 0x0195
    1940:	90 91 96 01 	lds	r25, 0x0196
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	90 93 96 01 	sts	0x0196, r25
    194a:	80 93 95 01 	sts	0x0195, r24
    194e:	80 91 95 01 	lds	r24, 0x0195
    1952:	90 91 96 01 	lds	r25, 0x0196
    1956:	85 30       	cpi	r24, 0x05	; 5
    1958:	91 05       	cpc	r25, r1
    195a:	04 f3       	brlt	.-64     	; 0x191c <main+0x9e8>
						{
							a_oldPass[i] = a_firstPassword[i];
						}
						readyToSend(a_oldPass , a_oldPassMess);
    195c:	80 e9       	ldi	r24, 0x90	; 144
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	2c e9       	ldi	r18, 0x9C	; 156
    1962:	31 e0       	ldi	r19, 0x01	; 1
    1964:	b9 01       	movw	r22, r18
    1966:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <readyToSend>
						readyToSend(a_firstPassword , a_message);
    196a:	87 e9       	ldi	r24, 0x97	; 151
    196c:	91 e0       	ldi	r25, 0x01	; 1
    196e:	23 e8       	ldi	r18, 0x83	; 131
    1970:	31 e0       	ldi	r19, 0x01	; 1
    1972:	b9 01       	movw	r22, r18
    1974:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <readyToSend>
						UART_sendByte(CHANGE_PASSWORD);
    1978:	8e e0       	ldi	r24, 0x0E	; 14
    197a:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_sendByte>
						UART_sendString(a_message);
    197e:	83 e8       	ldi	r24, 0x83	; 131
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	0e 94 a2 10 	call	0x2144	; 0x2144 <UART_sendString>
						screen = 2 ;
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	80 93 7d 01 	sts	0x017D, r24
    198c:	12 cd       	rjmp	.-1500   	; 0x13b2 <main+0x47e>
					}
				}
				else if(screen == 1)
    198e:	80 91 7d 01 	lds	r24, 0x017D
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	09 f0       	breq	.+2      	; 0x1998 <main+0xa64>
    1996:	03 c1       	rjmp	.+518    	; 0x1b9e <main+0xc6a>
				{
					state = UART_receiveByte();
    1998:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_receiveByte>
    199c:	80 93 89 01 	sts	0x0189, r24
					LCD_clearScreen();
    19a0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
					if(state == CORRECT_PW)
    19a4:	80 91 89 01 	lds	r24, 0x0189
    19a8:	8f 30       	cpi	r24, 0x0F	; 15
    19aa:	09 f0       	breq	.+2      	; 0x19ae <main+0xa7a>
    19ac:	4d c0       	rjmp	.+154    	; 0x1a48 <main+0xb14>
					{
						LCD_displayStringRowColumn(0, 0, "OPENING DOOR 10s");
    19ae:	2b ef       	ldi	r18, 0xFB	; 251
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	a9 01       	movw	r20, r18
    19b8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						ACTIVATE_timer0(&timer0);
    19bc:	ce 01       	movw	r24, r28
    19be:	8c 57       	subi	r24, 0x7C	; 124
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ACTIVATE_timer0>
    19c6:	0b c0       	rjmp	.+22     	; 0x19de <main+0xaaa>

						while(seconds != 10)
						{
							LCD_goToRowColumn(1,0);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_goToRowColumn>
							LCD_intgerToString(seconds+1);
    19d0:	80 91 7f 01 	lds	r24, 0x017F
    19d4:	90 91 80 01 	lds	r25, 0x0180
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_intgerToString>
					if(state == CORRECT_PW)
					{
						LCD_displayStringRowColumn(0, 0, "OPENING DOOR 10s");
						ACTIVATE_timer0(&timer0);

						while(seconds != 10)
    19de:	80 91 7f 01 	lds	r24, 0x017F
    19e2:	90 91 80 01 	lds	r25, 0x0180
    19e6:	8a 30       	cpi	r24, 0x0A	; 10
    19e8:	91 05       	cpc	r25, r1
    19ea:	71 f7       	brne	.-36     	; 0x19c8 <main+0xa94>
						{
							LCD_goToRowColumn(1,0);
							LCD_intgerToString(seconds+1);
						}
						seconds = 0;
    19ec:	10 92 80 01 	sts	0x0180, r1
    19f0:	10 92 7f 01 	sts	0x017F, r1
						LCD_clearScreen();
    19f4:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "CLOSING DOOR 10s");
    19f8:	2c e0       	ldi	r18, 0x0C	; 12
    19fa:	31 e0       	ldi	r19, 0x01	; 1
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	a9 01       	movw	r20, r18
    1a02:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						ACTIVATE_timer0(&timer0);
    1a06:	ce 01       	movw	r24, r28
    1a08:	8c 57       	subi	r24, 0x7C	; 124
    1a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a0c:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ACTIVATE_timer0>
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <main+0xaf4>
						while(seconds != 10)
						{
							LCD_goToRowColumn(1,0);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_goToRowColumn>
							LCD_intgerToString(seconds+1);
    1a1a:	80 91 7f 01 	lds	r24, 0x017F
    1a1e:	90 91 80 01 	lds	r25, 0x0180
    1a22:	01 96       	adiw	r24, 0x01	; 1
    1a24:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_intgerToString>
						}
						seconds = 0;
						LCD_clearScreen();
						LCD_displayStringRowColumn(0, 0, "CLOSING DOOR 10s");
						ACTIVATE_timer0(&timer0);
						while(seconds != 10)
    1a28:	80 91 7f 01 	lds	r24, 0x017F
    1a2c:	90 91 80 01 	lds	r25, 0x0180
    1a30:	8a 30       	cpi	r24, 0x0A	; 10
    1a32:	91 05       	cpc	r25, r1
    1a34:	71 f7       	brne	.-36     	; 0x1a12 <main+0xade>
						{
							LCD_goToRowColumn(1,0);
							LCD_intgerToString(seconds+1);
						}
						LCD_clearScreen();
    1a36:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						wrongPW = 0;
    1a3a:	10 92 7e 01 	sts	0x017E, r1
						state = 0;
    1a3e:	10 92 89 01 	sts	0x0189, r1
						screen = 0;
    1a42:	10 92 7d 01 	sts	0x017D, r1
    1a46:	b5 cc       	rjmp	.-1686   	; 0x13b2 <main+0x47e>
					}
					else if(state == WRONG_PASSWORD)
    1a48:	80 91 89 01 	lds	r24, 0x0189
    1a4c:	8c 30       	cpi	r24, 0x0C	; 12
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <main+0xb1e>
    1a50:	b0 cc       	rjmp	.-1696   	; 0x13b2 <main+0x47e>
					{
						if(wrongPW != 3)
    1a52:	80 91 7e 01 	lds	r24, 0x017E
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <main+0xb28>
    1a5a:	79 c0       	rjmp	.+242    	; 0x1b4e <main+0xc1a>
						{
						LCD_displayStringRowColumn(0, 0, "WRONG PW TRY AGAIN");
    1a5c:	2d e1       	ldi	r18, 0x1D	; 29
    1a5e:	31 e0       	ldi	r19, 0x01	; 1
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	aa ef       	ldi	r26, 0xFA	; 250
    1a70:	b4 e4       	ldi	r27, 0x44	; 68
    1a72:	8d ab       	std	Y+53, r24	; 0x35
    1a74:	9e ab       	std	Y+54, r25	; 0x36
    1a76:	af ab       	std	Y+55, r26	; 0x37
    1a78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7a:	6d a9       	ldd	r22, Y+53	; 0x35
    1a7c:	7e a9       	ldd	r23, Y+54	; 0x36
    1a7e:	8f a9       	ldd	r24, Y+55	; 0x37
    1a80:	98 ad       	ldd	r25, Y+56	; 0x38
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a e7       	ldi	r20, 0x7A	; 122
    1a88:	53 e4       	ldi	r21, 0x43	; 67
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	89 ab       	std	Y+49, r24	; 0x31
    1a94:	9a ab       	std	Y+50, r25	; 0x32
    1a96:	ab ab       	std	Y+51, r26	; 0x33
    1a98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1a9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <main+0xb88>
		__ticks = 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 ab       	std	Y+48, r25	; 0x30
    1ab8:	8f a7       	std	Y+47, r24	; 0x2f
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <main+0xc06>
	else if (__tmp > 65535)
    1abc:	69 a9       	ldd	r22, Y+49	; 0x31
    1abe:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	4c f5       	brge	.+82     	; 0x1b26 <main+0xbf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad8:	8f a9       	ldd	r24, Y+55	; 0x37
    1ada:	98 ad       	ldd	r25, Y+56	; 0x38
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	98 ab       	std	Y+48, r25	; 0x30
    1afa:	8f a7       	std	Y+47, r24	; 0x2f
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <main+0xbe8>
    1afe:	89 e1       	ldi	r24, 0x19	; 25
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9e a7       	std	Y+46, r25	; 0x2e
    1b04:	8d a7       	std	Y+45, r24	; 0x2d
    1b06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <main+0xbd6>
    1b0e:	9e a7       	std	Y+46, r25	; 0x2e
    1b10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b14:	98 a9       	ldd	r25, Y+48	; 0x30
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <main+0xbca>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <main+0xc1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	69 a9       	ldd	r22, Y+49	; 0x31
    1b28:	7a a9       	ldd	r23, Y+50	; 0x32
    1b2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	98 ab       	std	Y+48, r25	; 0x30
    1b38:	8f a7       	std	Y+47, r24	; 0x2f
    1b3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3e:	9c a7       	std	Y+44, r25	; 0x2c
    1b40:	8b a7       	std	Y+43, r24	; 0x2b
    1b42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <main+0xc12>
    1b4a:	9c a7       	std	Y+44, r25	; 0x2c
    1b4c:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(2000);
						}
						wrongPW++;
    1b4e:	80 91 7e 01 	lds	r24, 0x017E
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	80 93 7e 01 	sts	0x017E, r24
						screen = 0;
    1b58:	10 92 7d 01 	sts	0x017D, r1
						state  = 0;
    1b5c:	10 92 89 01 	sts	0x0189, r1
						if(wrongPW == 3)
    1b60:	80 91 7e 01 	lds	r24, 0x017E
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <main+0xc36>
    1b68:	24 cc       	rjmp	.-1976   	; 0x13b2 <main+0x47e>
						{
							LCD_displayStringRowColumn(0, 0, " ALARM !!!      ");
    1b6a:	20 e3       	ldi	r18, 0x30	; 48
    1b6c:	31 e0       	ldi	r19, 0x01	; 1
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	a9 01       	movw	r20, r18
    1b74:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
							ACTIVATE_timer0(&timer0);
    1b78:	ce 01       	movw	r24, r28
    1b7a:	8c 57       	subi	r24, 0x7C	; 124
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ACTIVATE_timer0>
							while(seconds != 10);
    1b82:	80 91 7f 01 	lds	r24, 0x017F
    1b86:	90 91 80 01 	lds	r25, 0x0180
    1b8a:	8a 30       	cpi	r24, 0x0A	; 10
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	c9 f7       	brne	.-14     	; 0x1b82 <main+0xc4e>
							wrongPW = 0;
    1b90:	10 92 7e 01 	sts	0x017E, r1
							screen = 0;
    1b94:	10 92 7d 01 	sts	0x017D, r1
							state  = 0;
    1b98:	10 92 89 01 	sts	0x0189, r1
    1b9c:	0a cc       	rjmp	.-2028   	; 0x13b2 <main+0x47e>
						}

					}
				}
				else if(screen == 2)
    1b9e:	80 91 7d 01 	lds	r24, 0x017D
    1ba2:	82 30       	cpi	r24, 0x02	; 2
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <main+0xc74>
    1ba6:	05 cc       	rjmp	.-2038   	; 0x13b2 <main+0x47e>
				{
					state = UART_receiveByte();
    1ba8:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_receiveByte>
    1bac:	80 93 89 01 	sts	0x0189, r24
					LCD_clearScreen();
    1bb0:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
					if (state == CORRECT_PW)
    1bb4:	80 91 89 01 	lds	r24, 0x0189
    1bb8:	8f 30       	cpi	r24, 0x0F	; 15
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <main+0xc8a>
    1bbc:	49 c1       	rjmp	.+658    	; 0x1e50 <main+0xf1c>
					{


						LCD_displayStringRowColumn(0, 0,"Enter 4-digit PW      ");
    1bbe:	21 e4       	ldi	r18, 0x41	; 65
    1bc0:	31 e0       	ldi	r19, 0x01	; 1
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	a9 01       	movw	r20, r18
    1bc8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						getPassword(a_firstPassword);
    1bcc:	87 e9       	ldi	r24, 0x97	; 151
    1bce:	91 e0       	ldi	r25, 0x01	; 1
    1bd0:	0e 94 86 06 	call	0xd0c	; 0xd0c <getPassword>
						LCD_clearScreen();
    1bd4:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Reenter 4-digit PW");
    1bd8:	28 e5       	ldi	r18, 0x58	; 88
    1bda:	31 e0       	ldi	r19, 0x01	; 1
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
						getPassword(a_secondPassword);
    1be6:	8b e8       	ldi	r24, 0x8B	; 139
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 86 06 	call	0xd0c	; 0xd0c <getPassword>
						compare = strcmp(a_firstPassword ,a_secondPassword );
    1bee:	87 e9       	ldi	r24, 0x97	; 151
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	2b e8       	ldi	r18, 0x8B	; 139
    1bf4:	31 e0       	ldi	r19, 0x01	; 1
    1bf6:	b9 01       	movw	r22, r18
    1bf8:	0e 94 90 18 	call	0x3120	; 0x3120 <strcmp>
    1bfc:	80 93 a1 01 	sts	0x01A1, r24
						if(compare == 0)
    1c00:	80 91 a1 01 	lds	r24, 0x01A1
    1c04:	88 23       	and	r24, r24
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <main+0xcd6>
    1c08:	95 c0       	rjmp	.+298    	; 0x1d34 <main+0xe00>
						{
							LCD_clearScreen();
    1c0a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 0, "password");
    1c0e:	29 ea       	ldi	r18, 0xA9	; 169
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 0, "Match");
    1c1c:	22 eb       	ldi	r18, 0xB2	; 178
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	aa e7       	ldi	r26, 0x7A	; 122
    1c30:	b4 e4       	ldi	r27, 0x44	; 68
    1c32:	8f a3       	std	Y+39, r24	; 0x27
    1c34:	98 a7       	std	Y+40, r25	; 0x28
    1c36:	a9 a7       	std	Y+41, r26	; 0x29
    1c38:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	4a e7       	ldi	r20, 0x7A	; 122
    1c48:	53 e4       	ldi	r21, 0x43	; 67
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	8b a3       	std	Y+35, r24	; 0x23
    1c54:	9c a3       	std	Y+36, r25	; 0x24
    1c56:	ad a3       	std	Y+37, r26	; 0x25
    1c58:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c60:	9e a1       	ldd	r25, Y+38	; 0x26
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	40 e8       	ldi	r20, 0x80	; 128
    1c68:	5f e3       	ldi	r21, 0x3F	; 63
    1c6a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6e:	88 23       	and	r24, r24
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <main+0xd48>
		__ticks = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	9a a3       	std	Y+34, r25	; 0x22
    1c78:	89 a3       	std	Y+33, r24	; 0x21
    1c7a:	3f c0       	rjmp	.+126    	; 0x1cfa <main+0xdc6>
	else if (__tmp > 65535)
    1c7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c80:	8d a1       	ldd	r24, Y+37	; 0x25
    1c82:	9e a1       	ldd	r25, Y+38	; 0x26
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	4f e7       	ldi	r20, 0x7F	; 127
    1c8a:	57 e4       	ldi	r21, 0x47	; 71
    1c8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c90:	18 16       	cp	r1, r24
    1c92:	4c f5       	brge	.+82     	; 0x1ce6 <main+0xdb2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c94:	6f a1       	ldd	r22, Y+39	; 0x27
    1c96:	78 a5       	ldd	r23, Y+40	; 0x28
    1c98:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	cd 01       	movw	r24, r26
    1cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	9a a3       	std	Y+34, r25	; 0x22
    1cba:	89 a3       	std	Y+33, r24	; 0x21
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <main+0xda8>
    1cbe:	89 e1       	ldi	r24, 0x19	; 25
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	98 a3       	std	Y+32, r25	; 0x20
    1cc4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <main+0xd96>
    1cce:	98 a3       	std	Y+32, r25	; 0x20
    1cd0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	9a a3       	std	Y+34, r25	; 0x22
    1cda:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cde:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	69 f7       	brne	.-38     	; 0x1cbe <main+0xd8a>
    1ce4:	14 c0       	rjmp	.+40     	; 0x1d0e <main+0xdda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cea:	8d a1       	ldd	r24, Y+37	; 0x25
    1cec:	9e a1       	ldd	r25, Y+38	; 0x26
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
    1cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfe:	9e 8f       	std	Y+30, r25	; 0x1e
    1d00:	8d 8f       	std	Y+29, r24	; 0x1d
    1d02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <main+0xdd2>
    1d0a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d0c:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
							readyToSend(a_firstPassword , a_message);
    1d0e:	87 e9       	ldi	r24, 0x97	; 151
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	23 e8       	ldi	r18, 0x83	; 131
    1d14:	31 e0       	ldi	r19, 0x01	; 1
    1d16:	b9 01       	movw	r22, r18
    1d18:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <readyToSend>
							UART_sendByte(NEW_PASSWORD);
    1d1c:	80 e1       	ldi	r24, 0x10	; 16
    1d1e:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_sendByte>
							UART_sendString(a_message);
    1d22:	83 e8       	ldi	r24, 0x83	; 131
    1d24:	91 e0       	ldi	r25, 0x01	; 1
    1d26:	0e 94 a2 10 	call	0x2144	; 0x2144 <UART_sendString>
							screen = 0;
    1d2a:	10 92 7d 01 	sts	0x017D, r1
							state  = 0;
    1d2e:	10 92 89 01 	sts	0x0189, r1
    1d32:	8b c0       	rjmp	.+278    	; 0x1e4a <main+0xf16>
						}
						else
						{
							LCD_clearScreen();
    1d34:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>
							LCD_displayStringRowColumn(0, 0, "password");
    1d38:	29 ea       	ldi	r18, 0xA9	; 169
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	a9 01       	movw	r20, r18
    1d42:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1, 0, " don't Match");
    1d46:	28 eb       	ldi	r18, 0xB8	; 184
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	a9 01       	movw	r20, r18
    1d50:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	aa e7       	ldi	r26, 0x7A	; 122
    1d5a:	b4 e4       	ldi	r27, 0x44	; 68
    1d5c:	89 8f       	std	Y+25, r24	; 0x19
    1d5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d60:	ab 8f       	std	Y+27, r26	; 0x1b
    1d62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	69 8d       	ldd	r22, Y+25	; 0x19
    1d66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a e7       	ldi	r20, 0x7A	; 122
    1d72:	53 e4       	ldi	r21, 0x43	; 67
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8d 8b       	std	Y+21, r24	; 0x15
    1d7e:	9e 8b       	std	Y+22, r25	; 0x16
    1d80:	af 8b       	std	Y+23, r26	; 0x17
    1d82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d84:	6d 89       	ldd	r22, Y+21	; 0x15
    1d86:	7e 89       	ldd	r23, Y+22	; 0x16
    1d88:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <main+0xe72>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9c 8b       	std	Y+20, r25	; 0x14
    1da2:	8b 8b       	std	Y+19, r24	; 0x13
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <main+0xef0>
	else if (__tmp > 65535)
    1da6:	6d 89       	ldd	r22, Y+21	; 0x15
    1da8:	7e 89       	ldd	r23, Y+22	; 0x16
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <main+0xedc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9c 8b       	std	Y+20, r25	; 0x14
    1de4:	8b 8b       	std	Y+19, r24	; 0x13
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <main+0xed2>
    1de8:	89 e1       	ldi	r24, 0x19	; 25
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9a 8b       	std	Y+18, r25	; 0x12
    1dee:	89 8b       	std	Y+17, r24	; 0x11
    1df0:	89 89       	ldd	r24, Y+17	; 0x11
    1df2:	9a 89       	ldd	r25, Y+18	; 0x12
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <main+0xec0>
    1df8:	9a 8b       	std	Y+18, r25	; 0x12
    1dfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9c 8b       	std	Y+20, r25	; 0x14
    1e04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8b 89       	ldd	r24, Y+19	; 0x13
    1e08:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <main+0xeb4>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <main+0xf04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6d 89       	ldd	r22, Y+21	; 0x15
    1e12:	7e 89       	ldd	r23, Y+22	; 0x16
    1e14:	8f 89       	ldd	r24, Y+23	; 0x17
    1e16:	98 8d       	ldd	r25, Y+24	; 0x18
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9c 8b       	std	Y+20, r25	; 0x14
    1e22:	8b 8b       	std	Y+19, r24	; 0x13
    1e24:	8b 89       	ldd	r24, Y+19	; 0x13
    1e26:	9c 89       	ldd	r25, Y+20	; 0x14
    1e28:	98 8b       	std	Y+16, r25	; 0x10
    1e2a:	8f 87       	std	Y+15, r24	; 0x0f
    1e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2e:	98 89       	ldd	r25, Y+16	; 0x10
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <main+0xefc>
    1e34:	98 8b       	std	Y+16, r25	; 0x10
    1e36:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(1000);
							UART_sendByte(NEW_PASSWORD);
    1e38:	80 e1       	ldi	r24, 0x10	; 16
    1e3a:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_sendByte>
							UART_sendString(a_oldPassMess);
    1e3e:	8c e9       	ldi	r24, 0x9C	; 156
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	0e 94 a2 10 	call	0x2144	; 0x2144 <UART_sendString>
							LCD_clearScreen();
    1e46:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <LCD_clearScreen>

						}
						screen = 0;
    1e4a:	10 92 7d 01 	sts	0x017D, r1
    1e4e:	b1 ca       	rjmp	.-2718   	; 0x13b2 <main+0x47e>
					}
					else if (state == WRONG_PASSWORD)
    1e50:	80 91 89 01 	lds	r24, 0x0189
    1e54:	8c 30       	cpi	r24, 0x0C	; 12
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <main+0xf26>
    1e58:	ac ca       	rjmp	.-2728   	; 0x13b2 <main+0x47e>
					{

						LCD_displayStringRowColumn(0, 0, "WRONG PW TRY AGAIN");
    1e5a:	2d e1       	ldi	r18, 0x1D	; 29
    1e5c:	31 e0       	ldi	r19, 0x01	; 1
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	a9 01       	movw	r20, r18
    1e64:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	aa ef       	ldi	r26, 0xFA	; 250
    1e6e:	b4 e4       	ldi	r27, 0x44	; 68
    1e70:	8b 87       	std	Y+11, r24	; 0x0b
    1e72:	9c 87       	std	Y+12, r25	; 0x0c
    1e74:	ad 87       	std	Y+13, r26	; 0x0d
    1e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a e7       	ldi	r20, 0x7A	; 122
    1e86:	53 e4       	ldi	r21, 0x43	; 67
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8f 83       	std	Y+7, r24	; 0x07
    1e92:	98 87       	std	Y+8, r25	; 0x08
    1e94:	a9 87       	std	Y+9, r26	; 0x09
    1e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e98:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9a:	78 85       	ldd	r23, Y+8	; 0x08
    1e9c:	89 85       	ldd	r24, Y+9	; 0x09
    1e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <main+0xf86>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <main+0x1004>
	else if (__tmp > 65535)
    1eba:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebc:	78 85       	ldd	r23, Y+8	; 0x08
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <main+0xff0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <main+0xfe6>
    1efc:	89 e1       	ldi	r24, 0x19	; 25
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    1f04:	8b 81       	ldd	r24, Y+3	; 0x03
    1f06:	9c 81       	ldd	r25, Y+4	; 0x04
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <main+0xfd4>
    1f0c:	9c 83       	std	Y+4, r25	; 0x04
    1f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9e 83       	std	Y+6, r25	; 0x06
    1f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <main+0xfc8>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <main+0x1018>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <main+0x1010>
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2000);
						wrongPW++;
    1f4c:	80 91 7e 01 	lds	r24, 0x017E
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	80 93 7e 01 	sts	0x017E, r24
						screen = 0;
    1f56:	10 92 7d 01 	sts	0x017D, r1
						state  = 0;
    1f5a:	10 92 89 01 	sts	0x0189, r1
						if(wrongPW == 3)
    1f5e:	80 91 7e 01 	lds	r24, 0x017E
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	09 f0       	breq	.+2      	; 0x1f68 <main+0x1034>
    1f66:	25 ca       	rjmp	.-2998   	; 0x13b2 <main+0x47e>
						{
							LCD_displayStringRowColumn(0, 0, " ALARM !!!      ");
    1f68:	20 e3       	ldi	r18, 0x30	; 48
    1f6a:	31 e0       	ldi	r19, 0x01	; 1
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_displayStringRowColumn>
							ACTIVATE_timer0(&timer0);
    1f76:	ce 01       	movw	r24, r28
    1f78:	8c 57       	subi	r24, 0x7C	; 124
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ACTIVATE_timer0>
							while(seconds != 10);
    1f80:	80 91 7f 01 	lds	r24, 0x017F
    1f84:	90 91 80 01 	lds	r25, 0x0180
    1f88:	8a 30       	cpi	r24, 0x0A	; 10
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	c9 f7       	brne	.-14     	; 0x1f80 <main+0x104c>
							wrongPW = 0;
    1f8e:	10 92 7e 01 	sts	0x017E, r1
							screen = 0;
    1f92:	10 92 7d 01 	sts	0x017D, r1
							state  = 0;
    1f96:	10 92 89 01 	sts	0x0189, r1
    1f9a:	0b ca       	rjmp	.-3050   	; 0x13b2 <main+0x47e>

00001f9c <UART_init>:
 * Function Name : UART_init
 * Description   : This Function is responsible for setting the USART Registers (UCSRA- UCSRB- UCSRC)
 * Arguments     : A Pointer to Structure
 * Return        : None
 **************************************************************************************************************/
void UART_init(const UCSRBC_init *DataPtr){
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <UART_init+0x6>
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	 *    2- Parity Mode (UPM1:0)
	 *    3- Stop Bit (USBS)
	 *    4- Clock Polarity (UCPOL)
	 */
    #if(ASYNCHRONOUS_DOUBLE_SPEED_MODE_ACTIVATION ==1)
	   UCSRA = 1<<U2X;
    1faa:	eb e2       	ldi	r30, 0x2B	; 43
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	80 83       	st	Z, r24
    #endif
	UCSRB  = ( 1<<TXEN ) | ( 1<<RXEN );
    1fb2:	ea e2       	ldi	r30, 0x2A	; 42
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	88 e1       	ldi	r24, 0x18	; 24
    1fb8:	80 83       	st	Z, r24
	UCSRB |= (UCSRB & 0xFB) | ((DataPtr-> Data_mode));
    1fba:	aa e2       	ldi	r26, 0x2A	; 42
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	ea e2       	ldi	r30, 0x2A	; 42
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	ea e2       	ldi	r30, 0x2A	; 42
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	98 2f       	mov	r25, r24
    1fce:	9b 7f       	andi	r25, 0xFB	; 251
    1fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd4:	80 81       	ld	r24, Z
    1fd6:	89 2b       	or	r24, r25
    1fd8:	82 2b       	or	r24, r18
    1fda:	8c 93       	st	X, r24
	UCSRC |= (1<<URSEL);
    1fdc:	a0 e4       	ldi	r26, 0x40	; 64
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e0 e4       	ldi	r30, 0x40	; 64
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	80 68       	ori	r24, 0x80	; 128
    1fe8:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF9) | ((DataPtr-> Data_mode) <<1);
    1fea:	a0 e4       	ldi	r26, 0x40	; 64
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e0 e4       	ldi	r30, 0x40	; 64
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	38 2f       	mov	r19, r24
    1ff6:	e0 e4       	ldi	r30, 0x40	; 64
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	28 2f       	mov	r18, r24
    1ffe:	29 7f       	andi	r18, 0xF9	; 249
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	80 81       	ld	r24, Z
    2006:	88 2f       	mov	r24, r24
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	82 2b       	or	r24, r18
    2010:	83 2b       	or	r24, r19
    2012:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xBF) | ((DataPtr->Usart_mode) <<6);
    2014:	a0 e4       	ldi	r26, 0x40	; 64
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e0 e4       	ldi	r30, 0x40	; 64
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	38 2f       	mov	r19, r24
    2020:	e0 e4       	ldi	r30, 0x40	; 64
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	28 2f       	mov	r18, r24
    2028:	2f 7b       	andi	r18, 0xBF	; 191
    202a:	e9 81       	ldd	r30, Y+1	; 0x01
    202c:	fa 81       	ldd	r31, Y+2	; 0x02
    202e:	81 81       	ldd	r24, Z+1	; 0x01
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	00 24       	eor	r0, r0
    2036:	96 95       	lsr	r25
    2038:	87 95       	ror	r24
    203a:	07 94       	ror	r0
    203c:	96 95       	lsr	r25
    203e:	87 95       	ror	r24
    2040:	07 94       	ror	r0
    2042:	98 2f       	mov	r25, r24
    2044:	80 2d       	mov	r24, r0
    2046:	82 2b       	or	r24, r18
    2048:	83 2b       	or	r24, r19
    204a:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xCF) | ((DataPtr->parity_mode) <<4);
    204c:	a0 e4       	ldi	r26, 0x40	; 64
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e0 e4       	ldi	r30, 0x40	; 64
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	38 2f       	mov	r19, r24
    2058:	e0 e4       	ldi	r30, 0x40	; 64
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	28 2f       	mov	r18, r24
    2060:	2f 7c       	andi	r18, 0xCF	; 207
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	82 95       	swap	r24
    206e:	92 95       	swap	r25
    2070:	90 7f       	andi	r25, 0xF0	; 240
    2072:	98 27       	eor	r25, r24
    2074:	80 7f       	andi	r24, 0xF0	; 240
    2076:	98 27       	eor	r25, r24
    2078:	82 2b       	or	r24, r18
    207a:	83 2b       	or	r24, r19
    207c:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF7) | ((DataPtr->stopbit) <<3);
    207e:	a0 e4       	ldi	r26, 0x40	; 64
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e0 e4       	ldi	r30, 0x40	; 64
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	38 2f       	mov	r19, r24
    208a:	e0 e4       	ldi	r30, 0x40	; 64
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	28 2f       	mov	r18, r24
    2092:	27 7f       	andi	r18, 0xF7	; 247
    2094:	e9 81       	ldd	r30, Y+1	; 0x01
    2096:	fa 81       	ldd	r31, Y+2	; 0x02
    2098:	83 81       	ldd	r24, Z+3	; 0x03
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	82 2b       	or	r24, r18
    20ac:	83 2b       	or	r24, r19
    20ae:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xFE) | (DataPtr->clock_Polarity);
    20b0:	a0 e4       	ldi	r26, 0x40	; 64
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e0 e4       	ldi	r30, 0x40	; 64
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	28 2f       	mov	r18, r24
    20bc:	e0 e4       	ldi	r30, 0x40	; 64
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	98 2f       	mov	r25, r24
    20c4:	9e 7f       	andi	r25, 0xFE	; 254
    20c6:	e9 81       	ldd	r30, Y+1	; 0x01
    20c8:	fa 81       	ldd	r31, Y+2	; 0x02
    20ca:	84 81       	ldd	r24, Z+4	; 0x04
    20cc:	89 2b       	or	r24, r25
    20ce:	82 2b       	or	r24, r18
    20d0:	8c 93       	st	X, r24
	UBRRH  = UBRR_value >>8;
    20d2:	e0 e4       	ldi	r30, 0x40	; 64
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	10 82       	st	Z, r1
	UBRRL  = UBRR_value;
    20d8:	e9 e2       	ldi	r30, 0x29	; 41
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	8c e0       	ldi	r24, 0x0C	; 12
    20de:	80 83       	st	Z, r24





}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <UART_sendByte>:
 * Function Name : UART_sendByte
 * Description   : This Function is responsible for sending a byte through the UART Transmitter
 * Arguments     : Data
 * Return        : None
 *************************************************************************************************************/
void UART_sendByte( char data){
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	0f 92       	push	r0
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * 1- Set the data into the USART DATA REGISTER UDR-> Data
	 * 2- Wait until the Transmit complete flag is 1 meaning that data is fully transmitted.
	 * 3- Finally Clear the Transmitter flag by setting it to  1  TXC -> 1
	 */
	UDR=data;
    20f6:	ec e2       	ldi	r30, 0x2C	; 44
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	80 83       	st	Z, r24
	while(((UCSRA) & (1<<TXC))==0);
    20fe:	eb e2       	ldi	r30, 0x2B	; 43
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	80 74       	andi	r24, 0x40	; 64
    210a:	90 70       	andi	r25, 0x00	; 0
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	b9 f3       	breq	.-18     	; 0x20fe <UART_sendByte+0x14>
    UCSRA |= (1<<TXC);
    2110:	ab e2       	ldi	r26, 0x2B	; 43
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	eb e2       	ldi	r30, 0x2B	; 43
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 64       	ori	r24, 0x40	; 64
    211c:	8c 93       	st	X, r24

}
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <UART_receiveByte>:
 * Function Name : UART_sendByte
 * Description   : This Function is responsible for receiving a byte through the UART Receiver.
 * Arguments     : None
 * Return        : UDR value (1 Byte -> char)
 **************************************************************************************************************/
char UART_receiveByte(){
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1- Wait until the Receive complete flag is 1 meaning that data is fully received.
	 * 2- Read the value of the UDR (Return the value of the USART DATA REGISTER).
	 */
	while(((UCSRA) & (1<<RXC))==0);
    212e:	eb e2       	ldi	r30, 0x2B	; 43
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	88 23       	and	r24, r24
    2136:	dc f7       	brge	.-10     	; 0x212e <UART_receiveByte+0x8>
	return UDR;
    2138:	ec e2       	ldi	r30, 0x2C	; 44
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z

}
    213e:	cf 91       	pop	r28
    2140:	df 91       	pop	r29
    2142:	08 95       	ret

00002144 <UART_sendString>:
 * Arguments     : Pointer to Character
 *                 The Function is passed an address which is the address of the String array
 *                 so it is carried by a pointer to character.
 * Return        : None
 *************************************************************************************************************/
void UART_sendString( char* dataa){
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	00 d0       	rcall	.+0      	; 0x214a <UART_sendString+0x6>
    214a:	00 d0       	rcall	.+0      	; 0x214c <UART_sendString+0x8>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	8b 83       	std	Y+3, r24	; 0x03
	 * 1- Initialise the Counter to zero
	 * 2- Keep looping in the string array until you reach '\0' character which indicates the end of the string.
	 * 3- Call the UART_sendByte() Function and pass each character from the string.
	 * 4- Increment the Counter.
	 */
	int i=0;
    2154:	1a 82       	std	Y+2, r1	; 0x02
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <UART_sendString+0x34>
	while(dataa[i] !='\0'){
		UART_sendByte(dataa[i]);
    215a:	29 81       	ldd	r18, Y+1	; 0x01
    215c:	3a 81       	ldd	r19, Y+2	; 0x02
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	80 81       	ld	r24, Z
    216a:	0e 94 75 10 	call	0x20ea	; 0x20ea <UART_sendByte>
		i++;
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	9a 81       	ldd	r25, Y+2	; 0x02
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	9a 83       	std	Y+2, r25	; 0x02
    2176:	89 83       	std	Y+1, r24	; 0x01
	 * 2- Keep looping in the string array until you reach '\0' character which indicates the end of the string.
	 * 3- Call the UART_sendByte() Function and pass each character from the string.
	 * 4- Increment the Counter.
	 */
	int i=0;
	while(dataa[i] !='\0'){
    2178:	29 81       	ldd	r18, Y+1	; 0x01
    217a:	3a 81       	ldd	r19, Y+2	; 0x02
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	fc 01       	movw	r30, r24
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	80 81       	ld	r24, Z
    2188:	88 23       	and	r24, r24
    218a:	39 f7       	brne	.-50     	; 0x215a <UART_sendString+0x16>
		UART_sendByte(dataa[i]);
		i++;
	}

}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <UART_receiveString>:
 * Function Name : UART_receiveString
 * Description   : This Function is responsible for receiving a String through the UART Receiver.
 * Arguments     : None
 * Return        : None
 **************************************************************************************************************/
void UART_receiveString(char *dataa){
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <UART_receiveString+0xa>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <UART_receiveString+0xc>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
	*      4.1 Increment the counter.
	*      4.2 Call the UART_receiveByte() function and put the byte in string array.
	* 5- After exiting the Loop replace the '#' character with '\0' character.
	*/

	int i=0;
    21ae:	1a 82       	std	Y+2, r1	; 0x02
    21b0:	19 82       	std	Y+1, r1	; 0x01
	dataa[i]=UART_receiveByte();
    21b2:	29 81       	ldd	r18, Y+1	; 0x01
    21b4:	3a 81       	ldd	r19, Y+2	; 0x02
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ba:	8c 01       	movw	r16, r24
    21bc:	02 0f       	add	r16, r18
    21be:	13 1f       	adc	r17, r19
    21c0:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_receiveByte>
    21c4:	f8 01       	movw	r30, r16
    21c6:	80 83       	st	Z, r24
    21c8:	10 c0       	rjmp	.+32     	; 0x21ea <UART_receiveString+0x50>
	while(dataa[i] !='#'){
		i++;
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	89 83       	std	Y+1, r24	; 0x01
		dataa[i]=UART_receiveByte();
    21d4:	29 81       	ldd	r18, Y+1	; 0x01
    21d6:	3a 81       	ldd	r19, Y+2	; 0x02
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	8c 01       	movw	r16, r24
    21de:	02 0f       	add	r16, r18
    21e0:	13 1f       	adc	r17, r19
    21e2:	0e 94 93 10 	call	0x2126	; 0x2126 <UART_receiveByte>
    21e6:	f8 01       	movw	r30, r16
    21e8:	80 83       	st	Z, r24
	* 5- After exiting the Loop replace the '#' character with '\0' character.
	*/

	int i=0;
	dataa[i]=UART_receiveByte();
	while(dataa[i] !='#'){
    21ea:	29 81       	ldd	r18, Y+1	; 0x01
    21ec:	3a 81       	ldd	r19, Y+2	; 0x02
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	fc 01       	movw	r30, r24
    21f4:	e2 0f       	add	r30, r18
    21f6:	f3 1f       	adc	r31, r19
    21f8:	80 81       	ld	r24, Z
    21fa:	83 32       	cpi	r24, 0x23	; 35
    21fc:	31 f7       	brne	.-52     	; 0x21ca <UART_receiveString+0x30>
		i++;
		dataa[i]=UART_receiveByte();
	}
	dataa[i]='\0';
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	2b 81       	ldd	r18, Y+3	; 0x03
    2204:	3c 81       	ldd	r19, Y+4	; 0x04
    2206:	f9 01       	movw	r30, r18
    2208:	e8 0f       	add	r30, r24
    220a:	f9 1f       	adc	r31, r25
    220c:	10 82       	st	Z, r1
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	1f 91       	pop	r17
    221c:	0f 91       	pop	r16
    221e:	08 95       	ret

00002220 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <KeyPad_getPressedKey+0x6>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    222a:	1a 82       	std	Y+2, r1	; 0x02
    222c:	4c c0       	rjmp	.+152    	; 0x22c6 <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    222e:	ea e3       	ldi	r30, 0x3A	; 58
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	80 e1       	ldi	r24, 0x10	; 16
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <KeyPad_getPressedKey+0x22>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	2a 95       	dec	r18
    2244:	e2 f7       	brpl	.-8      	; 0x223e <KeyPad_getPressedKey+0x1e>
    2246:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    2248:	eb e3       	ldi	r30, 0x3B	; 59
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	80 e1       	ldi	r24, 0x10	; 16
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	02 2e       	mov	r0, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <KeyPad_getPressedKey+0x3e>
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	0a 94       	dec	r0
    2260:	e2 f7       	brpl	.-8      	; 0x225a <KeyPad_getPressedKey+0x3a>
    2262:	80 95       	com	r24
    2264:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    2266:	19 82       	std	Y+1, r1	; 0x01
    2268:	28 c0       	rjmp	.+80     	; 0x22ba <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    226a:	e9 e3       	ldi	r30, 0x39	; 57
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a9 01       	movw	r20, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <KeyPad_getPressedKey+0x62>
    227e:	55 95       	asr	r21
    2280:	47 95       	ror	r20
    2282:	8a 95       	dec	r24
    2284:	e2 f7       	brpl	.-8      	; 0x227e <KeyPad_getPressedKey+0x5e>
    2286:	ca 01       	movw	r24, r20
    2288:	81 70       	andi	r24, 0x01	; 1
    228a:	90 70       	andi	r25, 0x00	; 0
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	91 f4       	brne	.+36     	; 0x22b4 <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	98 2f       	mov	r25, r24
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	89 0f       	add	r24, r25
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	84 30       	cpi	r24, 0x04	; 4
    22be:	a8 f2       	brcs	.-86     	; 0x226a <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    22c0:	8a 81       	ldd	r24, Y+2	; 0x02
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	8a 83       	std	Y+2, r24	; 0x02
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	84 30       	cpi	r24, 0x04	; 4
    22ca:	08 f4       	brcc	.+2      	; 0x22ce <KeyPad_getPressedKey+0xae>
    22cc:	b0 cf       	rjmp	.-160    	; 0x222e <KeyPad_getPressedKey+0xe>
    22ce:	ad cf       	rjmp	.-166    	; 0x222a <KeyPad_getPressedKey+0xa>

000022d0 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <KeyPad_4x4_adjustKeyNumber+0x6>
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <KeyPad_4x4_adjustKeyNumber+0x8>
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	3c 83       	std	Y+4, r19	; 0x04
    22e6:	2b 83       	std	Y+3, r18	; 0x03
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	88 30       	cpi	r24, 0x08	; 8
    22ee:	91 05       	cpc	r25, r1
    22f0:	09 f4       	brne	.+2      	; 0x22f4 <KeyPad_4x4_adjustKeyNumber+0x24>
    22f2:	70 c0       	rjmp	.+224    	; 0x23d4 <KeyPad_4x4_adjustKeyNumber+0x104>
    22f4:	2b 81       	ldd	r18, Y+3	; 0x03
    22f6:	3c 81       	ldd	r19, Y+4	; 0x04
    22f8:	29 30       	cpi	r18, 0x09	; 9
    22fa:	31 05       	cpc	r19, r1
    22fc:	5c f5       	brge	.+86     	; 0x2354 <KeyPad_4x4_adjustKeyNumber+0x84>
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	84 30       	cpi	r24, 0x04	; 4
    2304:	91 05       	cpc	r25, r1
    2306:	09 f4       	brne	.+2      	; 0x230a <KeyPad_4x4_adjustKeyNumber+0x3a>
    2308:	59 c0       	rjmp	.+178    	; 0x23bc <KeyPad_4x4_adjustKeyNumber+0xec>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	25 30       	cpi	r18, 0x05	; 5
    2310:	31 05       	cpc	r19, r1
    2312:	9c f4       	brge	.+38     	; 0x233a <KeyPad_4x4_adjustKeyNumber+0x6a>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	91 05       	cpc	r25, r1
    231c:	09 f4       	brne	.+2      	; 0x2320 <KeyPad_4x4_adjustKeyNumber+0x50>
    231e:	48 c0       	rjmp	.+144    	; 0x23b0 <KeyPad_4x4_adjustKeyNumber+0xe0>
    2320:	2b 81       	ldd	r18, Y+3	; 0x03
    2322:	3c 81       	ldd	r19, Y+4	; 0x04
    2324:	23 30       	cpi	r18, 0x03	; 3
    2326:	31 05       	cpc	r19, r1
    2328:	0c f0       	brlt	.+2      	; 0x232c <KeyPad_4x4_adjustKeyNumber+0x5c>
    232a:	45 c0       	rjmp	.+138    	; 0x23b6 <KeyPad_4x4_adjustKeyNumber+0xe6>
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	09 f4       	brne	.+2      	; 0x2338 <KeyPad_4x4_adjustKeyNumber+0x68>
    2336:	39 c0       	rjmp	.+114    	; 0x23aa <KeyPad_4x4_adjustKeyNumber+0xda>
    2338:	67 c0       	rjmp	.+206    	; 0x2408 <KeyPad_4x4_adjustKeyNumber+0x138>
    233a:	2b 81       	ldd	r18, Y+3	; 0x03
    233c:	3c 81       	ldd	r19, Y+4	; 0x04
    233e:	26 30       	cpi	r18, 0x06	; 6
    2340:	31 05       	cpc	r19, r1
    2342:	09 f4       	brne	.+2      	; 0x2346 <KeyPad_4x4_adjustKeyNumber+0x76>
    2344:	41 c0       	rjmp	.+130    	; 0x23c8 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	87 30       	cpi	r24, 0x07	; 7
    234c:	91 05       	cpc	r25, r1
    234e:	0c f0       	brlt	.+2      	; 0x2352 <KeyPad_4x4_adjustKeyNumber+0x82>
    2350:	3e c0       	rjmp	.+124    	; 0x23ce <KeyPad_4x4_adjustKeyNumber+0xfe>
    2352:	37 c0       	rjmp	.+110    	; 0x23c2 <KeyPad_4x4_adjustKeyNumber+0xf2>
    2354:	2b 81       	ldd	r18, Y+3	; 0x03
    2356:	3c 81       	ldd	r19, Y+4	; 0x04
    2358:	2c 30       	cpi	r18, 0x0C	; 12
    235a:	31 05       	cpc	r19, r1
    235c:	09 f4       	brne	.+2      	; 0x2360 <KeyPad_4x4_adjustKeyNumber+0x90>
    235e:	46 c0       	rjmp	.+140    	; 0x23ec <KeyPad_4x4_adjustKeyNumber+0x11c>
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	8d 30       	cpi	r24, 0x0D	; 13
    2366:	91 05       	cpc	r25, r1
    2368:	5c f4       	brge	.+22     	; 0x2380 <KeyPad_4x4_adjustKeyNumber+0xb0>
    236a:	2b 81       	ldd	r18, Y+3	; 0x03
    236c:	3c 81       	ldd	r19, Y+4	; 0x04
    236e:	2a 30       	cpi	r18, 0x0A	; 10
    2370:	31 05       	cpc	r19, r1
    2372:	b1 f1       	breq	.+108    	; 0x23e0 <KeyPad_4x4_adjustKeyNumber+0x110>
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	8b 30       	cpi	r24, 0x0B	; 11
    237a:	91 05       	cpc	r25, r1
    237c:	a4 f5       	brge	.+104    	; 0x23e6 <KeyPad_4x4_adjustKeyNumber+0x116>
    237e:	2d c0       	rjmp	.+90     	; 0x23da <KeyPad_4x4_adjustKeyNumber+0x10a>
    2380:	2b 81       	ldd	r18, Y+3	; 0x03
    2382:	3c 81       	ldd	r19, Y+4	; 0x04
    2384:	2e 30       	cpi	r18, 0x0E	; 14
    2386:	31 05       	cpc	r19, r1
    2388:	b9 f1       	breq	.+110    	; 0x23f8 <KeyPad_4x4_adjustKeyNumber+0x128>
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	8e 30       	cpi	r24, 0x0E	; 14
    2390:	91 05       	cpc	r25, r1
    2392:	7c f1       	brlt	.+94     	; 0x23f2 <KeyPad_4x4_adjustKeyNumber+0x122>
    2394:	2b 81       	ldd	r18, Y+3	; 0x03
    2396:	3c 81       	ldd	r19, Y+4	; 0x04
    2398:	2f 30       	cpi	r18, 0x0F	; 15
    239a:	31 05       	cpc	r19, r1
    239c:	79 f1       	breq	.+94     	; 0x23fc <KeyPad_4x4_adjustKeyNumber+0x12c>
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	80 31       	cpi	r24, 0x10	; 16
    23a4:	91 05       	cpc	r25, r1
    23a6:	69 f1       	breq	.+90     	; 0x2402 <KeyPad_4x4_adjustKeyNumber+0x132>
    23a8:	2f c0       	rjmp	.+94     	; 0x2408 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    23aa:	97 e0       	ldi	r25, 0x07	; 7
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	2e c0       	rjmp	.+92     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    23b0:	28 e0       	ldi	r18, 0x08	; 8
    23b2:	2a 83       	std	Y+2, r18	; 0x02
    23b4:	2b c0       	rjmp	.+86     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    23b6:	39 e0       	ldi	r19, 0x09	; 9
    23b8:	3a 83       	std	Y+2, r19	; 0x02
    23ba:	28 c0       	rjmp	.+80     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    23bc:	85 e2       	ldi	r24, 0x25	; 37
    23be:	8a 83       	std	Y+2, r24	; 0x02
    23c0:	25 c0       	rjmp	.+74     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    23c2:	94 e0       	ldi	r25, 0x04	; 4
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	22 c0       	rjmp	.+68     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    23c8:	25 e0       	ldi	r18, 0x05	; 5
    23ca:	2a 83       	std	Y+2, r18	; 0x02
    23cc:	1f c0       	rjmp	.+62     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    23ce:	36 e0       	ldi	r19, 0x06	; 6
    23d0:	3a 83       	std	Y+2, r19	; 0x02
    23d2:	1c c0       	rjmp	.+56     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    23d4:	8a e2       	ldi	r24, 0x2A	; 42
    23d6:	8a 83       	std	Y+2, r24	; 0x02
    23d8:	19 c0       	rjmp	.+50     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	16 c0       	rjmp	.+44     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    23e0:	22 e0       	ldi	r18, 0x02	; 2
    23e2:	2a 83       	std	Y+2, r18	; 0x02
    23e4:	13 c0       	rjmp	.+38     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    23e6:	33 e0       	ldi	r19, 0x03	; 3
    23e8:	3a 83       	std	Y+2, r19	; 0x02
    23ea:	10 c0       	rjmp	.+32     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    23ec:	8d e2       	ldi	r24, 0x2D	; 45
    23ee:	8a 83       	std	Y+2, r24	; 0x02
    23f0:	0d c0       	rjmp	.+26     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    23f2:	9d e0       	ldi	r25, 0x0D	; 13
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	0a c0       	rjmp	.+20     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    23f8:	1a 82       	std	Y+2, r1	; 0x02
    23fa:	08 c0       	rjmp	.+16     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    23fc:	2d e3       	ldi	r18, 0x3D	; 61
    23fe:	2a 83       	std	Y+2, r18	; 0x02
    2400:	05 c0       	rjmp	.+10     	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2402:	3b e2       	ldi	r19, 0x2B	; 43
    2404:	3a 83       	std	Y+2, r19	; 0x02
    2406:	02 c0       	rjmp	.+4      	; 0x240c <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2424:	a1 e3       	ldi	r26, 0x31	; 49
    2426:	b0 e0       	ldi	r27, 0x00	; 0
    2428:	e1 e3       	ldi	r30, 0x31	; 49
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8c 61       	ori	r24, 0x1C	; 28
    2430:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    2432:	e4 e3       	ldi	r30, 0x34	; 52
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    243a:	88 e3       	ldi	r24, 0x38	; 56
    243c:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2440:	8c e0       	ldi	r24, 0x0C	; 12
    2442:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
}
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	e9 97       	sbiw	r28, 0x39	; 57
    245c:	0f b6       	in	r0, 0x3f	; 63
    245e:	f8 94       	cli
    2460:	de bf       	out	0x3e, r29	; 62
    2462:	0f be       	out	0x3f, r0	; 63
    2464:	cd bf       	out	0x3d, r28	; 61
    2466:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2468:	a2 e3       	ldi	r26, 0x32	; 50
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	e2 e3       	ldi	r30, 0x32	; 50
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	8f 7e       	andi	r24, 0xEF	; 239
    2474:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2476:	a2 e3       	ldi	r26, 0x32	; 50
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	e2 e3       	ldi	r30, 0x32	; 50
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	87 7f       	andi	r24, 0xF7	; 247
    2482:	8c 93       	st	X, r24
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a0 e8       	ldi	r26, 0x80	; 128
    248a:	bf e3       	ldi	r27, 0x3F	; 63
    248c:	8d ab       	std	Y+53, r24	; 0x35
    248e:	9e ab       	std	Y+54, r25	; 0x36
    2490:	af ab       	std	Y+55, r26	; 0x37
    2492:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	6d a9       	ldd	r22, Y+53	; 0x35
    2496:	7e a9       	ldd	r23, Y+54	; 0x36
    2498:	8f a9       	ldd	r24, Y+55	; 0x37
    249a:	98 ad       	ldd	r25, Y+56	; 0x38
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a e7       	ldi	r20, 0x7A	; 122
    24a2:	53 e4       	ldi	r21, 0x43	; 67
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	89 ab       	std	Y+49, r24	; 0x31
    24ae:	9a ab       	std	Y+50, r25	; 0x32
    24b0:	ab ab       	std	Y+51, r26	; 0x33
    24b2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24b4:	69 a9       	ldd	r22, Y+49	; 0x31
    24b6:	7a a9       	ldd	r23, Y+50	; 0x32
    24b8:	8b a9       	ldd	r24, Y+51	; 0x33
    24ba:	9c a9       	ldd	r25, Y+52	; 0x34
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <LCD_sendCommand+0x84>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	98 ab       	std	Y+48, r25	; 0x30
    24d2:	8f a7       	std	Y+47, r24	; 0x2f
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    24d6:	69 a9       	ldd	r22, Y+49	; 0x31
    24d8:	7a a9       	ldd	r23, Y+50	; 0x32
    24da:	8b a9       	ldd	r24, Y+51	; 0x33
    24dc:	9c a9       	ldd	r25, Y+52	; 0x34
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	6d a9       	ldd	r22, Y+53	; 0x35
    24f0:	7e a9       	ldd	r23, Y+54	; 0x36
    24f2:	8f a9       	ldd	r24, Y+55	; 0x37
    24f4:	98 ad       	ldd	r25, Y+56	; 0x38
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	98 ab       	std	Y+48, r25	; 0x30
    2514:	8f a7       	std	Y+47, r24	; 0x2f
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <LCD_sendCommand+0xe4>
    2518:	89 e1       	ldi	r24, 0x19	; 25
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9e a7       	std	Y+46, r25	; 0x2e
    251e:	8d a7       	std	Y+45, r24	; 0x2d
    2520:	8d a5       	ldd	r24, Y+45	; 0x2d
    2522:	9e a5       	ldd	r25, Y+46	; 0x2e
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_sendCommand+0xd2>
    2528:	9e a7       	std	Y+46, r25	; 0x2e
    252a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8f a5       	ldd	r24, Y+47	; 0x2f
    252e:	98 a9       	ldd	r25, Y+48	; 0x30
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	98 ab       	std	Y+48, r25	; 0x30
    2534:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8f a5       	ldd	r24, Y+47	; 0x2f
    2538:	98 a9       	ldd	r25, Y+48	; 0x30
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <LCD_sendCommand+0xc6>
    253e:	14 c0       	rjmp	.+40     	; 0x2568 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	69 a9       	ldd	r22, Y+49	; 0x31
    2542:	7a a9       	ldd	r23, Y+50	; 0x32
    2544:	8b a9       	ldd	r24, Y+51	; 0x33
    2546:	9c a9       	ldd	r25, Y+52	; 0x34
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	98 ab       	std	Y+48, r25	; 0x30
    2552:	8f a7       	std	Y+47, r24	; 0x2f
    2554:	8f a5       	ldd	r24, Y+47	; 0x2f
    2556:	98 a9       	ldd	r25, Y+48	; 0x30
    2558:	9c a7       	std	Y+44, r25	; 0x2c
    255a:	8b a7       	std	Y+43, r24	; 0x2b
    255c:	8b a5       	ldd	r24, Y+43	; 0x2b
    255e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <LCD_sendCommand+0x10e>
    2564:	9c a7       	std	Y+44, r25	; 0x2c
    2566:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2568:	a2 e3       	ldi	r26, 0x32	; 50
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e2 e3       	ldi	r30, 0x32	; 50
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	84 60       	ori	r24, 0x04	; 4
    2574:	8c 93       	st	X, r24
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e8       	ldi	r26, 0x80	; 128
    257c:	bf e3       	ldi	r27, 0x3F	; 63
    257e:	8f a3       	std	Y+39, r24	; 0x27
    2580:	98 a7       	std	Y+40, r25	; 0x28
    2582:	a9 a7       	std	Y+41, r26	; 0x29
    2584:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	6f a1       	ldd	r22, Y+39	; 0x27
    2588:	78 a5       	ldd	r23, Y+40	; 0x28
    258a:	89 a5       	ldd	r24, Y+41	; 0x29
    258c:	9a a5       	ldd	r25, Y+42	; 0x2a
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	4a e7       	ldi	r20, 0x7A	; 122
    2594:	53 e4       	ldi	r21, 0x43	; 67
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8b a3       	std	Y+35, r24	; 0x23
    25a0:	9c a3       	std	Y+36, r25	; 0x24
    25a2:	ad a3       	std	Y+37, r26	; 0x25
    25a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25a6:	6b a1       	ldd	r22, Y+35	; 0x23
    25a8:	7c a1       	ldd	r23, Y+36	; 0x24
    25aa:	8d a1       	ldd	r24, Y+37	; 0x25
    25ac:	9e a1       	ldd	r25, Y+38	; 0x26
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <LCD_sendCommand+0x176>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
    25c6:	3f c0       	rjmp	.+126    	; 0x2646 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    25c8:	6b a1       	ldd	r22, Y+35	; 0x23
    25ca:	7c a1       	ldd	r23, Y+36	; 0x24
    25cc:	8d a1       	ldd	r24, Y+37	; 0x25
    25ce:	9e a1       	ldd	r25, Y+38	; 0x26
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	57 e4       	ldi	r21, 0x47	; 71
    25d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25dc:	18 16       	cp	r1, r24
    25de:	4c f5       	brge	.+82     	; 0x2632 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	6f a1       	ldd	r22, Y+39	; 0x27
    25e2:	78 a5       	ldd	r23, Y+40	; 0x28
    25e4:	89 a5       	ldd	r24, Y+41	; 0x29
    25e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9a a3       	std	Y+34, r25	; 0x22
    2606:	89 a3       	std	Y+33, r24	; 0x21
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <LCD_sendCommand+0x1d6>
    260a:	89 e1       	ldi	r24, 0x19	; 25
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	98 a3       	std	Y+32, r25	; 0x20
    2610:	8f 8f       	std	Y+31, r24	; 0x1f
    2612:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2614:	98 a1       	ldd	r25, Y+32	; 0x20
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_sendCommand+0x1c4>
    261a:	98 a3       	std	Y+32, r25	; 0x20
    261c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261e:	89 a1       	ldd	r24, Y+33	; 0x21
    2620:	9a a1       	ldd	r25, Y+34	; 0x22
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	9a a3       	std	Y+34, r25	; 0x22
    2626:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	89 a1       	ldd	r24, Y+33	; 0x21
    262a:	9a a1       	ldd	r25, Y+34	; 0x22
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	69 f7       	brne	.-38     	; 0x260a <LCD_sendCommand+0x1b8>
    2630:	14 c0       	rjmp	.+40     	; 0x265a <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	6b a1       	ldd	r22, Y+35	; 0x23
    2634:	7c a1       	ldd	r23, Y+36	; 0x24
    2636:	8d a1       	ldd	r24, Y+37	; 0x25
    2638:	9e a1       	ldd	r25, Y+38	; 0x26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9a a3       	std	Y+34, r25	; 0x22
    2644:	89 a3       	std	Y+33, r24	; 0x21
    2646:	89 a1       	ldd	r24, Y+33	; 0x21
    2648:	9a a1       	ldd	r25, Y+34	; 0x22
    264a:	9e 8f       	std	Y+30, r25	; 0x1e
    264c:	8d 8f       	std	Y+29, r24	; 0x1d
    264e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2650:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_sendCommand+0x200>
    2656:	9e 8f       	std	Y+30, r25	; 0x1e
    2658:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    265a:	e5 e3       	ldi	r30, 0x35	; 53
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	89 ad       	ldd	r24, Y+57	; 0x39
    2660:	80 83       	st	Z, r24
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a0 e8       	ldi	r26, 0x80	; 128
    2668:	bf e3       	ldi	r27, 0x3F	; 63
    266a:	89 8f       	std	Y+25, r24	; 0x19
    266c:	9a 8f       	std	Y+26, r25	; 0x1a
    266e:	ab 8f       	std	Y+27, r26	; 0x1b
    2670:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	69 8d       	ldd	r22, Y+25	; 0x19
    2674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4a e7       	ldi	r20, 0x7A	; 122
    2680:	53 e4       	ldi	r21, 0x43	; 67
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	8d 8b       	std	Y+21, r24	; 0x15
    268c:	9e 8b       	std	Y+22, r25	; 0x16
    268e:	af 8b       	std	Y+23, r26	; 0x17
    2690:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e8       	ldi	r20, 0x80	; 128
    26a0:	5f e3       	ldi	r21, 0x3F	; 63
    26a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a6:	88 23       	and	r24, r24
    26a8:	2c f4       	brge	.+10     	; 0x26b4 <LCD_sendCommand+0x262>
		__ticks = 1;
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
    26b2:	3f c0       	rjmp	.+126    	; 0x2732 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	3f ef       	ldi	r19, 0xFF	; 255
    26c0:	4f e7       	ldi	r20, 0x7F	; 127
    26c2:	57 e4       	ldi	r21, 0x47	; 71
    26c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c8:	18 16       	cp	r1, r24
    26ca:	4c f5       	brge	.+82     	; 0x271e <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	69 8d       	ldd	r22, Y+25	; 0x19
    26ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e2       	ldi	r20, 0x20	; 32
    26da:	51 e4       	ldi	r21, 0x41	; 65
    26dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9c 8b       	std	Y+20, r25	; 0x14
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	0f c0       	rjmp	.+30     	; 0x2714 <LCD_sendCommand+0x2c2>
    26f6:	89 e1       	ldi	r24, 0x19	; 25
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	9a 8b       	std	Y+18, r25	; 0x12
    26fc:	89 8b       	std	Y+17, r24	; 0x11
    26fe:	89 89       	ldd	r24, Y+17	; 0x11
    2700:	9a 89       	ldd	r25, Y+18	; 0x12
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	f1 f7       	brne	.-4      	; 0x2702 <LCD_sendCommand+0x2b0>
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270a:	8b 89       	ldd	r24, Y+19	; 0x13
    270c:	9c 89       	ldd	r25, Y+20	; 0x14
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2714:	8b 89       	ldd	r24, Y+19	; 0x13
    2716:	9c 89       	ldd	r25, Y+20	; 0x14
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	69 f7       	brne	.-38     	; 0x26f6 <LCD_sendCommand+0x2a4>
    271c:	14 c0       	rjmp	.+40     	; 0x2746 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271e:	6d 89       	ldd	r22, Y+21	; 0x15
    2720:	7e 89       	ldd	r23, Y+22	; 0x16
    2722:	8f 89       	ldd	r24, Y+23	; 0x17
    2724:	98 8d       	ldd	r25, Y+24	; 0x18
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9c 8b       	std	Y+20, r25	; 0x14
    2730:	8b 8b       	std	Y+19, r24	; 0x13
    2732:	8b 89       	ldd	r24, Y+19	; 0x13
    2734:	9c 89       	ldd	r25, Y+20	; 0x14
    2736:	98 8b       	std	Y+16, r25	; 0x10
    2738:	8f 87       	std	Y+15, r24	; 0x0f
    273a:	8f 85       	ldd	r24, Y+15	; 0x0f
    273c:	98 89       	ldd	r25, Y+16	; 0x10
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <LCD_sendCommand+0x2ec>
    2742:	98 8b       	std	Y+16, r25	; 0x10
    2744:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2746:	a2 e3       	ldi	r26, 0x32	; 50
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e2 e3       	ldi	r30, 0x32	; 50
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8b 7f       	andi	r24, 0xFB	; 251
    2752:	8c 93       	st	X, r24
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a0 e8       	ldi	r26, 0x80	; 128
    275a:	bf e3       	ldi	r27, 0x3F	; 63
    275c:	8b 87       	std	Y+11, r24	; 0x0b
    275e:	9c 87       	std	Y+12, r25	; 0x0c
    2760:	ad 87       	std	Y+13, r26	; 0x0d
    2762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	6b 85       	ldd	r22, Y+11	; 0x0b
    2766:	7c 85       	ldd	r23, Y+12	; 0x0c
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	9e 85       	ldd	r25, Y+14	; 0x0e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a e7       	ldi	r20, 0x7A	; 122
    2772:	53 e4       	ldi	r21, 0x43	; 67
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8f 83       	std	Y+7, r24	; 0x07
    277e:	98 87       	std	Y+8, r25	; 0x08
    2780:	a9 87       	std	Y+9, r26	; 0x09
    2782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2784:	6f 81       	ldd	r22, Y+7	; 0x07
    2786:	78 85       	ldd	r23, Y+8	; 0x08
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	9a 85       	ldd	r25, Y+10	; 0x0a
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	2c f4       	brge	.+10     	; 0x27a6 <LCD_sendCommand+0x354>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	3f c0       	rjmp	.+126    	; 0x2824 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	4c f5       	brge	.+82     	; 0x2810 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <LCD_sendCommand+0x3b4>
    27e8:	89 e1       	ldi	r24, 0x19	; 25
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_sendCommand+0x3a2>
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	69 f7       	brne	.-38     	; 0x27e8 <LCD_sendCommand+0x396>
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_sendCommand+0x3de>
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2838:	e9 96       	adiw	r28, 0x39	; 57
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	e9 97       	sbiw	r28, 0x39	; 57
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2860:	a2 e3       	ldi	r26, 0x32	; 50
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e2 e3       	ldi	r30, 0x32	; 50
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 61       	ori	r24, 0x10	; 16
    286c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    286e:	a2 e3       	ldi	r26, 0x32	; 50
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e2 e3       	ldi	r30, 0x32	; 50
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	87 7f       	andi	r24, 0xF7	; 247
    287a:	8c 93       	st	X, r24
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	a0 e8       	ldi	r26, 0x80	; 128
    2882:	bf e3       	ldi	r27, 0x3F	; 63
    2884:	8d ab       	std	Y+53, r24	; 0x35
    2886:	9e ab       	std	Y+54, r25	; 0x36
    2888:	af ab       	std	Y+55, r26	; 0x37
    288a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288c:	6d a9       	ldd	r22, Y+53	; 0x35
    288e:	7e a9       	ldd	r23, Y+54	; 0x36
    2890:	8f a9       	ldd	r24, Y+55	; 0x37
    2892:	98 ad       	ldd	r25, Y+56	; 0x38
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	4a e7       	ldi	r20, 0x7A	; 122
    289a:	53 e4       	ldi	r21, 0x43	; 67
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	89 ab       	std	Y+49, r24	; 0x31
    28a6:	9a ab       	std	Y+50, r25	; 0x32
    28a8:	ab ab       	std	Y+51, r26	; 0x33
    28aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ac:	69 a9       	ldd	r22, Y+49	; 0x31
    28ae:	7a a9       	ldd	r23, Y+50	; 0x32
    28b0:	8b a9       	ldd	r24, Y+51	; 0x33
    28b2:	9c a9       	ldd	r25, Y+52	; 0x34
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	40 e8       	ldi	r20, 0x80	; 128
    28ba:	5f e3       	ldi	r21, 0x3F	; 63
    28bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c0:	88 23       	and	r24, r24
    28c2:	2c f4       	brge	.+10     	; 0x28ce <LCD_displayCharacter+0x84>
		__ticks = 1;
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	98 ab       	std	Y+48, r25	; 0x30
    28ca:	8f a7       	std	Y+47, r24	; 0x2f
    28cc:	3f c0       	rjmp	.+126    	; 0x294c <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    28ce:	69 a9       	ldd	r22, Y+49	; 0x31
    28d0:	7a a9       	ldd	r23, Y+50	; 0x32
    28d2:	8b a9       	ldd	r24, Y+51	; 0x33
    28d4:	9c a9       	ldd	r25, Y+52	; 0x34
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	3f ef       	ldi	r19, 0xFF	; 255
    28da:	4f e7       	ldi	r20, 0x7F	; 127
    28dc:	57 e4       	ldi	r21, 0x47	; 71
    28de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e2:	18 16       	cp	r1, r24
    28e4:	4c f5       	brge	.+82     	; 0x2938 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e6:	6d a9       	ldd	r22, Y+53	; 0x35
    28e8:	7e a9       	ldd	r23, Y+54	; 0x36
    28ea:	8f a9       	ldd	r24, Y+55	; 0x37
    28ec:	98 ad       	ldd	r25, Y+56	; 0x38
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e2       	ldi	r20, 0x20	; 32
    28f4:	51 e4       	ldi	r21, 0x41	; 65
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	bc 01       	movw	r22, r24
    2900:	cd 01       	movw	r24, r26
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	98 ab       	std	Y+48, r25	; 0x30
    290c:	8f a7       	std	Y+47, r24	; 0x2f
    290e:	0f c0       	rjmp	.+30     	; 0x292e <LCD_displayCharacter+0xe4>
    2910:	89 e1       	ldi	r24, 0x19	; 25
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9e a7       	std	Y+46, r25	; 0x2e
    2916:	8d a7       	std	Y+45, r24	; 0x2d
    2918:	8d a5       	ldd	r24, Y+45	; 0x2d
    291a:	9e a5       	ldd	r25, Y+46	; 0x2e
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <LCD_displayCharacter+0xd2>
    2920:	9e a7       	std	Y+46, r25	; 0x2e
    2922:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2924:	8f a5       	ldd	r24, Y+47	; 0x2f
    2926:	98 a9       	ldd	r25, Y+48	; 0x30
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	98 ab       	std	Y+48, r25	; 0x30
    292c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2930:	98 a9       	ldd	r25, Y+48	; 0x30
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	69 f7       	brne	.-38     	; 0x2910 <LCD_displayCharacter+0xc6>
    2936:	14 c0       	rjmp	.+40     	; 0x2960 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2938:	69 a9       	ldd	r22, Y+49	; 0x31
    293a:	7a a9       	ldd	r23, Y+50	; 0x32
    293c:	8b a9       	ldd	r24, Y+51	; 0x33
    293e:	9c a9       	ldd	r25, Y+52	; 0x34
    2940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	98 ab       	std	Y+48, r25	; 0x30
    294a:	8f a7       	std	Y+47, r24	; 0x2f
    294c:	8f a5       	ldd	r24, Y+47	; 0x2f
    294e:	98 a9       	ldd	r25, Y+48	; 0x30
    2950:	9c a7       	std	Y+44, r25	; 0x2c
    2952:	8b a7       	std	Y+43, r24	; 0x2b
    2954:	8b a5       	ldd	r24, Y+43	; 0x2b
    2956:	9c a5       	ldd	r25, Y+44	; 0x2c
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	f1 f7       	brne	.-4      	; 0x2958 <LCD_displayCharacter+0x10e>
    295c:	9c a7       	std	Y+44, r25	; 0x2c
    295e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2960:	a2 e3       	ldi	r26, 0x32	; 50
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e2 e3       	ldi	r30, 0x32	; 50
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	84 60       	ori	r24, 0x04	; 4
    296c:	8c 93       	st	X, r24
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e8       	ldi	r26, 0x80	; 128
    2974:	bf e3       	ldi	r27, 0x3F	; 63
    2976:	8f a3       	std	Y+39, r24	; 0x27
    2978:	98 a7       	std	Y+40, r25	; 0x28
    297a:	a9 a7       	std	Y+41, r26	; 0x29
    297c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	6f a1       	ldd	r22, Y+39	; 0x27
    2980:	78 a5       	ldd	r23, Y+40	; 0x28
    2982:	89 a5       	ldd	r24, Y+41	; 0x29
    2984:	9a a5       	ldd	r25, Y+42	; 0x2a
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	53 e4       	ldi	r21, 0x43	; 67
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8b a3       	std	Y+35, r24	; 0x23
    2998:	9c a3       	std	Y+36, r25	; 0x24
    299a:	ad a3       	std	Y+37, r26	; 0x25
    299c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    299e:	6b a1       	ldd	r22, Y+35	; 0x23
    29a0:	7c a1       	ldd	r23, Y+36	; 0x24
    29a2:	8d a1       	ldd	r24, Y+37	; 0x25
    29a4:	9e a1       	ldd	r25, Y+38	; 0x26
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <LCD_displayCharacter+0x176>
		__ticks = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9a a3       	std	Y+34, r25	; 0x22
    29bc:	89 a3       	std	Y+33, r24	; 0x21
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    29c0:	6b a1       	ldd	r22, Y+35	; 0x23
    29c2:	7c a1       	ldd	r23, Y+36	; 0x24
    29c4:	8d a1       	ldd	r24, Y+37	; 0x25
    29c6:	9e a1       	ldd	r25, Y+38	; 0x26
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	4c f5       	brge	.+82     	; 0x2a2a <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d8:	6f a1       	ldd	r22, Y+39	; 0x27
    29da:	78 a5       	ldd	r23, Y+40	; 0x28
    29dc:	89 a5       	ldd	r24, Y+41	; 0x29
    29de:	9a a5       	ldd	r25, Y+42	; 0x2a
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	9a a3       	std	Y+34, r25	; 0x22
    29fe:	89 a3       	std	Y+33, r24	; 0x21
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <LCD_displayCharacter+0x1d6>
    2a02:	89 e1       	ldi	r24, 0x19	; 25
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	98 a3       	std	Y+32, r25	; 0x20
    2a08:	8f 8f       	std	Y+31, r24	; 0x1f
    2a0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a0c:	98 a1       	ldd	r25, Y+32	; 0x20
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <LCD_displayCharacter+0x1c4>
    2a12:	98 a3       	std	Y+32, r25	; 0x20
    2a14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	89 a1       	ldd	r24, Y+33	; 0x21
    2a18:	9a a1       	ldd	r25, Y+34	; 0x22
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	9a a3       	std	Y+34, r25	; 0x22
    2a1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	89 a1       	ldd	r24, Y+33	; 0x21
    2a22:	9a a1       	ldd	r25, Y+34	; 0x22
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <LCD_displayCharacter+0x1b8>
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a30:	9e a1       	ldd	r25, Y+38	; 0x26
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
    2a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a40:	9a a1       	ldd	r25, Y+34	; 0x22
    2a42:	9e 8f       	std	Y+30, r25	; 0x1e
    2a44:	8d 8f       	std	Y+29, r24	; 0x1d
    2a46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_displayCharacter+0x200>
    2a4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a50:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    2a52:	e5 e3       	ldi	r30, 0x35	; 53
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	89 ad       	ldd	r24, Y+57	; 0x39
    2a58:	80 83       	st	Z, r24
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	a0 e8       	ldi	r26, 0x80	; 128
    2a60:	bf e3       	ldi	r27, 0x3F	; 63
    2a62:	89 8f       	std	Y+25, r24	; 0x19
    2a64:	9a 8f       	std	Y+26, r25	; 0x1a
    2a66:	ab 8f       	std	Y+27, r26	; 0x1b
    2a68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	4a e7       	ldi	r20, 0x7A	; 122
    2a78:	53 e4       	ldi	r21, 0x43	; 67
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	8d 8b       	std	Y+21, r24	; 0x15
    2a84:	9e 8b       	std	Y+22, r25	; 0x16
    2a86:	af 8b       	std	Y+23, r26	; 0x17
    2a88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a90:	98 8d       	ldd	r25, Y+24	; 0x18
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e8       	ldi	r20, 0x80	; 128
    2a98:	5f e3       	ldi	r21, 0x3F	; 63
    2a9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a9e:	88 23       	and	r24, r24
    2aa0:	2c f4       	brge	.+10     	; 0x2aac <LCD_displayCharacter+0x262>
		__ticks = 1;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	8b 8b       	std	Y+19, r24	; 0x13
    2aaa:	3f c0       	rjmp	.+126    	; 0x2b2a <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2aac:	6d 89       	ldd	r22, Y+21	; 0x15
    2aae:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	4c f5       	brge	.+82     	; 0x2b16 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e2       	ldi	r20, 0x20	; 32
    2ad2:	51 e4       	ldi	r21, 0x41	; 65
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	8b 8b       	std	Y+19, r24	; 0x13
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <LCD_displayCharacter+0x2c2>
    2aee:	89 e1       	ldi	r24, 0x19	; 25
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	9a 8b       	std	Y+18, r25	; 0x12
    2af4:	89 8b       	std	Y+17, r24	; 0x11
    2af6:	89 89       	ldd	r24, Y+17	; 0x11
    2af8:	9a 89       	ldd	r25, Y+18	; 0x12
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <LCD_displayCharacter+0x2b0>
    2afe:	9a 8b       	std	Y+18, r25	; 0x12
    2b00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b02:	8b 89       	ldd	r24, Y+19	; 0x13
    2b04:	9c 89       	ldd	r25, Y+20	; 0x14
    2b06:	01 97       	sbiw	r24, 0x01	; 1
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b10:	00 97       	sbiw	r24, 0x00	; 0
    2b12:	69 f7       	brne	.-38     	; 0x2aee <LCD_displayCharacter+0x2a4>
    2b14:	14 c0       	rjmp	.+40     	; 0x2b3e <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9c 8b       	std	Y+20, r25	; 0x14
    2b28:	8b 8b       	std	Y+19, r24	; 0x13
    2b2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2e:	98 8b       	std	Y+16, r25	; 0x10
    2b30:	8f 87       	std	Y+15, r24	; 0x0f
    2b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b34:	98 89       	ldd	r25, Y+16	; 0x10
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_displayCharacter+0x2ec>
    2b3a:	98 8b       	std	Y+16, r25	; 0x10
    2b3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2b3e:	a2 e3       	ldi	r26, 0x32	; 50
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	e2 e3       	ldi	r30, 0x32	; 50
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	8b 7f       	andi	r24, 0xFB	; 251
    2b4a:	8c 93       	st	X, r24
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	a0 e8       	ldi	r26, 0x80	; 128
    2b52:	bf e3       	ldi	r27, 0x3F	; 63
    2b54:	8b 87       	std	Y+11, r24	; 0x0b
    2b56:	9c 87       	std	Y+12, r25	; 0x0c
    2b58:	ad 87       	std	Y+13, r26	; 0x0d
    2b5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	4a e7       	ldi	r20, 0x7A	; 122
    2b6a:	53 e4       	ldi	r21, 0x43	; 67
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	8f 83       	std	Y+7, r24	; 0x07
    2b76:	98 87       	std	Y+8, r25	; 0x08
    2b78:	a9 87       	std	Y+9, r26	; 0x09
    2b7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7e:	78 85       	ldd	r23, Y+8	; 0x08
    2b80:	89 85       	ldd	r24, Y+9	; 0x09
    2b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e8       	ldi	r20, 0x80	; 128
    2b8a:	5f e3       	ldi	r21, 0x3F	; 63
    2b8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b90:	88 23       	and	r24, r24
    2b92:	2c f4       	brge	.+10     	; 0x2b9e <LCD_displayCharacter+0x354>
		__ticks = 1;
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
    2b9c:	3f c0       	rjmp	.+126    	; 0x2c1c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2b9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba0:	78 85       	ldd	r23, Y+8	; 0x08
    2ba2:	89 85       	ldd	r24, Y+9	; 0x09
    2ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	3f ef       	ldi	r19, 0xFF	; 255
    2baa:	4f e7       	ldi	r20, 0x7F	; 127
    2bac:	57 e4       	ldi	r21, 0x47	; 71
    2bae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bb2:	18 16       	cp	r1, r24
    2bb4:	4c f5       	brge	.+82     	; 0x2c08 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
    2bde:	0f c0       	rjmp	.+30     	; 0x2bfe <LCD_displayCharacter+0x3b4>
    2be0:	89 e1       	ldi	r24, 0x19	; 25
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	9c 81       	ldd	r25, Y+4	; 0x04
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_displayCharacter+0x3a2>
    2bf0:	9c 83       	std	Y+4, r25	; 0x04
    2bf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	9e 83       	std	Y+6, r25	; 0x06
    2bfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2c00:	9e 81       	ldd	r25, Y+6	; 0x06
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	69 f7       	brne	.-38     	; 0x2be0 <LCD_displayCharacter+0x396>
    2c06:	14 c0       	rjmp	.+40     	; 0x2c30 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c08:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0a:	78 85       	ldd	r23, Y+8	; 0x08
    2c0c:	89 85       	ldd	r24, Y+9	; 0x09
    2c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <LCD_displayCharacter+0x3de>
    2c2c:	9a 83       	std	Y+2, r25	; 0x02
    2c2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c30:	e9 96       	adiw	r28, 0x39	; 57
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	cf 91       	pop	r28
    2c3e:	df 91       	pop	r29
    2c40:	08 95       	ret

00002c42 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2c42:	df 93       	push	r29
    2c44:	cf 93       	push	r28
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <LCD_displayString+0x6>
    2c48:	0f 92       	push	r0
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
    2c4e:	9b 83       	std	Y+3, r25	; 0x03
    2c50:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c52:	19 82       	std	Y+1, r1	; 0x01
    2c54:	0e c0       	rjmp	.+28     	; 0x2c72 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	fc 01       	movw	r30, r24
    2c62:	e2 0f       	add	r30, r18
    2c64:	f3 1f       	adc	r31, r19
    2c66:	80 81       	ld	r24, Z
    2c68:	0e 94 25 14 	call	0x284a	; 0x284a <LCD_displayCharacter>
		i++;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	8f 5f       	subi	r24, 0xFF	; 255
    2c70:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	e2 0f       	add	r30, r18
    2c80:	f3 1f       	adc	r31, r19
    2c82:	80 81       	ld	r24, Z
    2c84:	88 23       	and	r24, r24
    2c86:	39 f7       	brne	.-50     	; 0x2c56 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	0f 90       	pop	r0
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2c94:	df 93       	push	r29
    2c96:	cf 93       	push	r28
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <LCD_goToRowColumn+0x6>
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <LCD_goToRowColumn+0x8>
    2c9c:	0f 92       	push	r0
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	8a 83       	std	Y+2, r24	; 0x02
    2ca4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	3d 83       	std	Y+5, r19	; 0x05
    2cae:	2c 83       	std	Y+4, r18	; 0x04
    2cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	c1 f0       	breq	.+48     	; 0x2cea <LCD_goToRowColumn+0x56>
    2cba:	2c 81       	ldd	r18, Y+4	; 0x04
    2cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2cbe:	22 30       	cpi	r18, 0x02	; 2
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <LCD_goToRowColumn+0x3a>
    2cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	61 f0       	breq	.+24     	; 0x2ce4 <LCD_goToRowColumn+0x50>
    2ccc:	19 c0       	rjmp	.+50     	; 0x2d00 <LCD_goToRowColumn+0x6c>
    2cce:	2c 81       	ldd	r18, Y+4	; 0x04
    2cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd2:	22 30       	cpi	r18, 0x02	; 2
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	69 f0       	breq	.+26     	; 0x2cf2 <LCD_goToRowColumn+0x5e>
    2cd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cda:	9d 81       	ldd	r25, Y+5	; 0x05
    2cdc:	83 30       	cpi	r24, 0x03	; 3
    2cde:	91 05       	cpc	r25, r1
    2ce0:	61 f0       	breq	.+24     	; 0x2cfa <LCD_goToRowColumn+0x66>
    2ce2:	0e c0       	rjmp	.+28     	; 0x2d00 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	0b c0       	rjmp	.+22     	; 0x2d00 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	80 5c       	subi	r24, 0xC0	; 192
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	07 c0       	rjmp	.+14     	; 0x2d00 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	80 5f       	subi	r24, 0xF0	; 240
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	80 5b       	subi	r24, 0xB0	; 176
    2cfe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	80 68       	ori	r24, 0x80	; 128
    2d04:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	cf 91       	pop	r28
    2d14:	df 91       	pop	r29
    2d16:	08 95       	ret

00002d18 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <LCD_displayStringRowColumn+0x6>
    2d1e:	00 d0       	rcall	.+0      	; 0x2d20 <LCD_displayStringRowColumn+0x8>
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	6a 83       	std	Y+2, r22	; 0x02
    2d28:	5c 83       	std	Y+4, r21	; 0x04
    2d2a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	6a 81       	ldd	r22, Y+2	; 0x02
    2d30:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2d34:	8b 81       	ldd	r24, Y+3	; 0x03
    2d36:	9c 81       	ldd	r25, Y+4	; 0x04
    2d38:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_displayString>
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	62 97       	sbiw	r28, 0x12	; 18
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	9a 8b       	std	Y+18, r25	; 0x12
    2d60:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2d62:	89 89       	ldd	r24, Y+17	; 0x11
    2d64:	9a 89       	ldd	r25, Y+18	; 0x12
    2d66:	9e 01       	movw	r18, r28
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	b9 01       	movw	r22, r18
    2d6e:	4a e0       	ldi	r20, 0x0A	; 10
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	0e 94 99 18 	call	0x3132	; 0x3132 <itoa>
   LCD_displayString(buff);
    2d76:	ce 01       	movw	r24, r28
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	0e 94 21 16 	call	0x2c42	; 0x2c42 <LCD_displayString>
}
    2d7e:	62 96       	adiw	r28, 0x12	; 18
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	0e 94 29 12 	call	0x2452	; 0x2452 <LCD_sendCommand>
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	08 95       	ret

00002da4 <ISR>:
int count=0;


/******************************************* Interrupt Service Routines ***************************************/

ISR(TIMER1_OVF_vect){
    2da4:	df 93       	push	r29
    2da6:	cf 93       	push	r28
    2da8:	00 d0       	rcall	.+0      	; 0x2daa <ISR+0x6>
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <ISR+0x8>
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	9a 83       	std	Y+2, r25	; 0x02
    2db2:	89 83       	std	Y+1, r24	; 0x01
count++;
    2db4:	80 91 81 01 	lds	r24, 0x0181
    2db8:	90 91 82 01 	lds	r25, 0x0182
    2dbc:	01 96       	adiw	r24, 0x01	; 1
    2dbe:	90 93 82 01 	sts	0x0182, r25
    2dc2:	80 93 81 01 	sts	0x0181, r24
   if(count ==122){
    2dc6:	80 91 81 01 	lds	r24, 0x0181
    2dca:	90 91 82 01 	lds	r25, 0x0182
    2dce:	8a 37       	cpi	r24, 0x7A	; 122
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	49 f4       	brne	.+18     	; 0x2de6 <ISR+0x42>
	seconds++;
    2dd4:	80 91 7f 01 	lds	r24, 0x017F
    2dd8:	90 91 80 01 	lds	r25, 0x0180
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	90 93 80 01 	sts	0x0180, r25
    2de2:	80 93 7f 01 	sts	0x017F, r24
   }
}
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <SET_timer0>:
 *                  that carries the information of Timer 0.
 * Return         : None
 **************************************************************************************************************/

void SET_timer0(const Timer0_setup* Timer0_Data)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	00 d0       	rcall	.+0      	; 0x2dfa <SET_timer0+0x6>
    2dfa:	cd b7       	in	r28, 0x3d	; 61
    2dfc:	de b7       	in	r29, 0x3e	; 62
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
	  *
	  * TIMSK :
	  *   Set the Interrupt Enables according to the activated mode in the Timer 0.
	  */

	if(Timer0_Data->Timer_zeroMode != 1){
    2e02:	e9 81       	ldd	r30, Y+1	; 0x01
    2e04:	fa 81       	ldd	r31, Y+2	; 0x02
    2e06:	80 81       	ld	r24, Z
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	39 f0       	breq	.+14     	; 0x2e1a <SET_timer0+0x26>
       TCCR0 |=1 << FOC0 ;
    2e0c:	a3 e5       	ldi	r26, 0x53	; 83
    2e0e:	b0 e0       	ldi	r27, 0x00	; 0
    2e10:	e3 e5       	ldi	r30, 0x53	; 83
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	80 81       	ld	r24, Z
    2e16:	80 68       	ori	r24, 0x80	; 128
    2e18:	8c 93       	st	X, r24

	}
	TCCR0 |= (TCCR0 & 0xB7) | (Timer0_Data->Timer_zeroMode << 3) | (Timer0_Data->Timer_zeroMode << 5);
    2e1a:	a3 e5       	ldi	r26, 0x53	; 83
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e3 e5       	ldi	r30, 0x53	; 83
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	38 2f       	mov	r19, r24
    2e26:	e3 e5       	ldi	r30, 0x53	; 83
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	27 7b       	andi	r18, 0xB7	; 183
    2e30:	e9 81       	ldd	r30, Y+1	; 0x01
    2e32:	fa 81       	ldd	r31, Y+2	; 0x02
    2e34:	80 81       	ld	r24, Z
    2e36:	88 2f       	mov	r24, r24
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	28 2b       	or	r18, r24
    2e48:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4c:	80 81       	ld	r24, Z
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	82 95       	swap	r24
    2e58:	92 95       	swap	r25
    2e5a:	90 7f       	andi	r25, 0xF0	; 240
    2e5c:	98 27       	eor	r25, r24
    2e5e:	80 7f       	andi	r24, 0xF0	; 240
    2e60:	98 27       	eor	r25, r24
    2e62:	82 2b       	or	r24, r18
    2e64:	83 2b       	or	r24, r19
    2e66:	8c 93       	st	X, r24
	TCCR0 |= (TCCR0 & 0xCF) | (Timer0_Data->Timer0_mode);
    2e68:	a3 e5       	ldi	r26, 0x53	; 83
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e3 e5       	ldi	r30, 0x53	; 83
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	28 2f       	mov	r18, r24
    2e74:	e3 e5       	ldi	r30, 0x53	; 83
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	98 2f       	mov	r25, r24
    2e7c:	9f 7c       	andi	r25, 0xCF	; 207
    2e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e80:	fa 81       	ldd	r31, Y+2	; 0x02
    2e82:	81 81       	ldd	r24, Z+1	; 0x01
    2e84:	89 2b       	or	r24, r25
    2e86:	82 2b       	or	r24, r18
    2e88:	8c 93       	st	X, r24
	//TCCR0 |= (TCCR0 & 0xF8) | (Timer0_Data->Clock0);
	if(Timer0_Data->Timer_zeroMode == 0){
    2e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	41 f4       	brne	.+16     	; 0x2ea4 <SET_timer0+0xb0>
		TIMSK |= (1<<TOIE0);
    2e94:	a9 e5       	ldi	r26, 0x59	; 89
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e9 e5       	ldi	r30, 0x59	; 89
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	81 60       	ori	r24, 0x01	; 1
    2ea0:	8c 93       	st	X, r24
    2ea2:	0a c0       	rjmp	.+20     	; 0x2eb8 <SET_timer0+0xc4>
	}
	else{
		TIMSK |= (1<<OCIE0);
    2ea4:	a9 e5       	ldi	r26, 0x59	; 89
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e9 e5       	ldi	r30, 0x59	; 89
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	82 60       	ori	r24, 0x02	; 2
    2eb0:	8c 93       	st	X, r24
		OCR0 =OUTPUT_COMPARE_MATCH_REGISTER0 ;
    2eb2:	ec e5       	ldi	r30, 0x5C	; 92
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	10 82       	st	Z, r1
	}

	TCNT0=TIMER_COUNTER_INITIAL_VALUE;
    2eb8:	e2 e5       	ldi	r30, 0x52	; 82
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	10 82       	st	Z, r1
}
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <ACTIVATE_timer0>:
 * Description    : This Function is responsible for giving clock to Timer 0.
 * Arguments      : Constant Pointer to Structure to carry the address of the Structure
 *                  that carries the information of Timer 0.
 * Return         : None.
 **************************************************************************************************************/
void ACTIVATE_timer0(const Timer0_setup* Timer0_Data){
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <ACTIVATE_timer0+0x6>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	9a 83       	std	Y+2, r25	; 0x02
    2ed4:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= (TCCR0 & 0xF8) | (Timer0_Data->Clock0);
    2ed6:	a3 e5       	ldi	r26, 0x53	; 83
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e3 e5       	ldi	r30, 0x53	; 83
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	e3 e5       	ldi	r30, 0x53	; 83
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	98 2f       	mov	r25, r24
    2eea:	98 7f       	andi	r25, 0xF8	; 248
    2eec:	e9 81       	ldd	r30, Y+1	; 0x01
    2eee:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	89 2b       	or	r24, r25
    2ef4:	82 2b       	or	r24, r18
    2ef6:	8c 93       	st	X, r24
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <DEACTIVATE_timer0>:
 * Function Name  : DEACTIVATE_timer0
 * Description    : This Function is responsible for stop clock to Timer 0.
 * Arguments      : None.
 * Return         : None.
 **************************************************************************************************************/
void DEACTIVATE_timer0(){
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (TCCR0 & 0xF8) | (0);
    2f0a:	a3 e5       	ldi	r26, 0x53	; 83
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e3 e5       	ldi	r30, 0x53	; 83
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	98 2f       	mov	r25, r24
    2f16:	e3 e5       	ldi	r30, 0x53	; 83
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 7f       	andi	r24, 0xF8	; 248
    2f1e:	89 2b       	or	r24, r25
    2f20:	8c 93       	st	X, r24
}
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <SET_timer1>:
 * Description   : This Function is responsible for setting the registers of timer 1
 * Arguments     : Constant Pointer to Structure to carry the address of the Structure
 *                 that carries the information of Timer 1.
 * Return        : None
 **************************************************************************************************************/
void SET_timer1(const Timer1_setup* Timer1_Data){
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <SET_timer1+0x6>
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
  * TIMSK :
  *   Set the Interrupt Enables according to the activated mode in the Timer 1.
  */


 if((Timer1_Data->Timer_oneMode != 1)||(Timer1_Data->Timer_oneMode != 2)||(Timer1_Data->Timer_oneMode != 3)){
    2f36:	e9 81       	ldd	r30, Y+1	; 0x01
    2f38:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3a:	80 81       	ld	r24, Z
    2f3c:	81 30       	cpi	r24, 0x01	; 1
    2f3e:	51 f4       	brne	.+20     	; 0x2f54 <SET_timer1+0x2c>
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	80 81       	ld	r24, Z
    2f46:	82 30       	cpi	r24, 0x02	; 2
    2f48:	29 f4       	brne	.+10     	; 0x2f54 <SET_timer1+0x2c>
    2f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4e:	80 81       	ld	r24, Z
    2f50:	83 30       	cpi	r24, 0x03	; 3
    2f52:	39 f0       	breq	.+14     	; 0x2f62 <SET_timer1+0x3a>
        #if( (TIMER1_CHANNEL_A  == 1 )&& (TIMER1_CHANNEL_B == 0 ))
		TCCR1A |=1 << FOC1A ;
    2f54:	af e4       	ldi	r26, 0x4F	; 79
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	ef e4       	ldi	r30, 0x4F	; 79
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	88 60       	ori	r24, 0x08	; 8
    2f60:	8c 93       	st	X, r24
	    TCCR1A |=(1 << FOC1A) | (1 << FOC1B );
        #endif
	}

  #if( (TIMER1_CHANNEL_A  == 1 )&& (TIMER1_CHANNEL_B == 0 ))
	TCCR1A |= (TCCR1A & 0x3F)|(Timer1_Data->Timer1_mode <<6) ;
    2f62:	af e4       	ldi	r26, 0x4F	; 79
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	ef e4       	ldi	r30, 0x4F	; 79
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	38 2f       	mov	r19, r24
    2f6e:	ef e4       	ldi	r30, 0x4F	; 79
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	28 2f       	mov	r18, r24
    2f76:	2f 73       	andi	r18, 0x3F	; 63
    2f78:	e9 81       	ldd	r30, Y+1	; 0x01
    2f7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7c:	81 81       	ldd	r24, Z+1	; 0x01
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	00 24       	eor	r0, r0
    2f84:	96 95       	lsr	r25
    2f86:	87 95       	ror	r24
    2f88:	07 94       	ror	r0
    2f8a:	96 95       	lsr	r25
    2f8c:	87 95       	ror	r24
    2f8e:	07 94       	ror	r0
    2f90:	98 2f       	mov	r25, r24
    2f92:	80 2d       	mov	r24, r0
    2f94:	82 2b       	or	r24, r18
    2f96:	83 2b       	or	r24, r19
    2f98:	8c 93       	st	X, r24
	TCCR1A |= (TCCR1A & 0xCF)|(Timer1_Data->Timer1_mode <<4) ;
  #elif((TIMER1_CHANNEL_A  == 1 )&&(TIMER1_CHANNEL_B == 1 ))
	TCCR1A |= (TCCR1A & 0x0F)|(Timer1_Data->Timer1_mode <<4)|(Timer1_Data->Timer1_mode <<6);
  #endif

	TCCR1A |= (TCCR1A & 0xFC) | (Timer1_Data->Timer_oneMode);
    2f9a:	af e4       	ldi	r26, 0x4F	; 79
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	ef e4       	ldi	r30, 0x4F	; 79
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	ef e4       	ldi	r30, 0x4F	; 79
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	98 2f       	mov	r25, r24
    2fae:	9c 7f       	andi	r25, 0xFC	; 252
    2fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb4:	80 81       	ld	r24, Z
    2fb6:	89 2b       	or	r24, r25
    2fb8:	82 2b       	or	r24, r18
    2fba:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xE7) | ((Timer1_Data->Timer_oneMode)<<3);
    2fbc:	ae e4       	ldi	r26, 0x4E	; 78
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	ee e4       	ldi	r30, 0x4E	; 78
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	38 2f       	mov	r19, r24
    2fc8:	ee e4       	ldi	r30, 0x4E	; 78
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	28 2f       	mov	r18, r24
    2fd0:	27 7e       	andi	r18, 0xE7	; 231
    2fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd6:	80 81       	ld	r24, Z
    2fd8:	88 2f       	mov	r24, r24
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	88 0f       	add	r24, r24
    2fde:	99 1f       	adc	r25, r25
    2fe0:	88 0f       	add	r24, r24
    2fe2:	99 1f       	adc	r25, r25
    2fe4:	88 0f       	add	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	82 2b       	or	r24, r18
    2fea:	83 2b       	or	r24, r19
    2fec:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xF8) | (Timer1_Data->Clock1);
    2fee:	ae e4       	ldi	r26, 0x4E	; 78
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	ee e4       	ldi	r30, 0x4E	; 78
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	ee e4       	ldi	r30, 0x4E	; 78
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	98 2f       	mov	r25, r24
    3002:	98 7f       	andi	r25, 0xF8	; 248
    3004:	e9 81       	ldd	r30, Y+1	; 0x01
    3006:	fa 81       	ldd	r31, Y+2	; 0x02
    3008:	82 81       	ldd	r24, Z+2	; 0x02
    300a:	89 2b       	or	r24, r25
    300c:	82 2b       	or	r24, r18
    300e:	8c 93       	st	X, r24

  if(Timer1_Data->Timer_oneMode ==0){
    3010:	e9 81       	ldd	r30, Y+1	; 0x01
    3012:	fa 81       	ldd	r31, Y+2	; 0x02
    3014:	80 81       	ld	r24, Z
    3016:	88 23       	and	r24, r24
    3018:	41 f4       	brne	.+16     	; 0x302a <SET_timer1+0x102>
			TIMSK |= 1<<TOIE1;
    301a:	a9 e5       	ldi	r26, 0x59	; 89
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	e9 e5       	ldi	r30, 0x59	; 89
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	80 81       	ld	r24, Z
    3024:	84 60       	ori	r24, 0x04	; 4
    3026:	8c 93       	st	X, r24
    3028:	0b c0       	rjmp	.+22     	; 0x3040 <SET_timer1+0x118>
  }

  else {
  #if(( TIMER1_CHANNEL_A  == 1 )&& (TIMER1_CHANNEL_B == 0 ))
	TIMSK |= 1<<OCIE1A;
    302a:	a9 e5       	ldi	r26, 0x59	; 89
    302c:	b0 e0       	ldi	r27, 0x00	; 0
    302e:	e9 e5       	ldi	r30, 0x59	; 89
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	80 61       	ori	r24, 0x10	; 16
    3036:	8c 93       	st	X, r24
	OCR1A=OUTPUT_COMPARE_MATCH_REGISTERA;
    3038:	ea e4       	ldi	r30, 0x4A	; 74
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	11 82       	std	Z+1, r1	; 0x01
    303e:	10 82       	st	Z, r1
	OCR1B = OUTPUT_COMPARE_MATCH_REGISTERB;

  #endif
  }

    TCNT1=TIMER_COUNTER_INITIAL_VALUE;
    3040:	ec e4       	ldi	r30, 0x4C	; 76
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	11 82       	std	Z+1, r1	; 0x01
    3046:	10 82       	st	Z, r1

 }
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <ACTIVATE_timer1>:
 * Description    : This Function is responsible for giving clock to Timer 1.
 * Arguments      : Constant Pointer to Structure to carry the address of the Structure
 *                  that carries the information of Timer 1.
 * Return         : None.
 **************************************************************************************************************/
void ACTIVATE_timer1(const Timer1_setup* Timer1_Data){
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	00 d0       	rcall	.+0      	; 0x3058 <ACTIVATE_timer1+0x6>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= (TCCR1B & 0xF8) | (Timer1_Data->Clock1);
    3060:	ae e4       	ldi	r26, 0x4E	; 78
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	ee e4       	ldi	r30, 0x4E	; 78
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	28 2f       	mov	r18, r24
    306c:	ee e4       	ldi	r30, 0x4E	; 78
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	98 2f       	mov	r25, r24
    3074:	98 7f       	andi	r25, 0xF8	; 248
    3076:	e9 81       	ldd	r30, Y+1	; 0x01
    3078:	fa 81       	ldd	r31, Y+2	; 0x02
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	89 2b       	or	r24, r25
    307e:	82 2b       	or	r24, r18
    3080:	8c 93       	st	X, r24
}
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	cf 91       	pop	r28
    3088:	df 91       	pop	r29
    308a:	08 95       	ret

0000308c <DEACTIVATE_timer1>:
 * Function Name  : DEACTIVATE_timer1
 * Description    : This Function is responsible for stop clock to Timer 1.
 * Arguments      : None.
 * Return         : None.
 **************************************************************************************************************/
void DEACTIVATE_timer1(){
    308c:	df 93       	push	r29
    308e:	cf 93       	push	r28
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (TCCR1B & 0xF8) | (0);
    3094:	ae e4       	ldi	r26, 0x4E	; 78
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	ee e4       	ldi	r30, 0x4E	; 78
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	98 2f       	mov	r25, r24
    30a0:	ee e4       	ldi	r30, 0x4E	; 78
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	88 7f       	andi	r24, 0xF8	; 248
    30a8:	89 2b       	or	r24, r25
    30aa:	8c 93       	st	X, r24
}
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <__prologue_saves__>:
    30b2:	2f 92       	push	r2
    30b4:	3f 92       	push	r3
    30b6:	4f 92       	push	r4
    30b8:	5f 92       	push	r5
    30ba:	6f 92       	push	r6
    30bc:	7f 92       	push	r7
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	ca 1b       	sub	r28, r26
    30dc:	db 0b       	sbc	r29, r27
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	09 94       	ijmp

000030ea <__epilogue_restores__>:
    30ea:	2a 88       	ldd	r2, Y+18	; 0x12
    30ec:	39 88       	ldd	r3, Y+17	; 0x11
    30ee:	48 88       	ldd	r4, Y+16	; 0x10
    30f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fc:	b9 84       	ldd	r11, Y+9	; 0x09
    30fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3100:	df 80       	ldd	r13, Y+7	; 0x07
    3102:	ee 80       	ldd	r14, Y+6	; 0x06
    3104:	fd 80       	ldd	r15, Y+5	; 0x05
    3106:	0c 81       	ldd	r16, Y+4	; 0x04
    3108:	1b 81       	ldd	r17, Y+3	; 0x03
    310a:	aa 81       	ldd	r26, Y+2	; 0x02
    310c:	b9 81       	ldd	r27, Y+1	; 0x01
    310e:	ce 0f       	add	r28, r30
    3110:	d1 1d       	adc	r29, r1
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	ed 01       	movw	r28, r26
    311e:	08 95       	ret

00003120 <strcmp>:
    3120:	fb 01       	movw	r30, r22
    3122:	dc 01       	movw	r26, r24
    3124:	8d 91       	ld	r24, X+
    3126:	01 90       	ld	r0, Z+
    3128:	80 19       	sub	r24, r0
    312a:	01 10       	cpse	r0, r1
    312c:	d9 f3       	breq	.-10     	; 0x3124 <strcmp+0x4>
    312e:	99 0b       	sbc	r25, r25
    3130:	08 95       	ret

00003132 <itoa>:
    3132:	fb 01       	movw	r30, r22
    3134:	9f 01       	movw	r18, r30
    3136:	e8 94       	clt
    3138:	42 30       	cpi	r20, 0x02	; 2
    313a:	c4 f0       	brlt	.+48     	; 0x316c <itoa+0x3a>
    313c:	45 32       	cpi	r20, 0x25	; 37
    313e:	b4 f4       	brge	.+44     	; 0x316c <itoa+0x3a>
    3140:	4a 30       	cpi	r20, 0x0A	; 10
    3142:	29 f4       	brne	.+10     	; 0x314e <itoa+0x1c>
    3144:	97 fb       	bst	r25, 7
    3146:	1e f4       	brtc	.+6      	; 0x314e <itoa+0x1c>
    3148:	90 95       	com	r25
    314a:	81 95       	neg	r24
    314c:	9f 4f       	sbci	r25, 0xFF	; 255
    314e:	64 2f       	mov	r22, r20
    3150:	77 27       	eor	r23, r23
    3152:	0e 94 df 18 	call	0x31be	; 0x31be <__udivmodhi4>
    3156:	80 5d       	subi	r24, 0xD0	; 208
    3158:	8a 33       	cpi	r24, 0x3A	; 58
    315a:	0c f0       	brlt	.+2      	; 0x315e <itoa+0x2c>
    315c:	89 5d       	subi	r24, 0xD9	; 217
    315e:	81 93       	st	Z+, r24
    3160:	cb 01       	movw	r24, r22
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	a1 f7       	brne	.-24     	; 0x314e <itoa+0x1c>
    3166:	16 f4       	brtc	.+4      	; 0x316c <itoa+0x3a>
    3168:	5d e2       	ldi	r21, 0x2D	; 45
    316a:	51 93       	st	Z+, r21
    316c:	10 82       	st	Z, r1
    316e:	c9 01       	movw	r24, r18
    3170:	0c 94 cf 18 	jmp	0x319e	; 0x319e <strrev>

00003174 <__eerd_byte_m16>:
    3174:	e1 99       	sbic	0x1c, 1	; 28
    3176:	fe cf       	rjmp	.-4      	; 0x3174 <__eerd_byte_m16>
    3178:	9f bb       	out	0x1f, r25	; 31
    317a:	8e bb       	out	0x1e, r24	; 30
    317c:	e0 9a       	sbi	0x1c, 0	; 28
    317e:	99 27       	eor	r25, r25
    3180:	8d b3       	in	r24, 0x1d	; 29
    3182:	08 95       	ret

00003184 <__eewr_byte_m16>:
    3184:	26 2f       	mov	r18, r22

00003186 <__eewr_r18_m16>:
    3186:	e1 99       	sbic	0x1c, 1	; 28
    3188:	fe cf       	rjmp	.-4      	; 0x3186 <__eewr_r18_m16>
    318a:	9f bb       	out	0x1f, r25	; 31
    318c:	8e bb       	out	0x1e, r24	; 30
    318e:	2d bb       	out	0x1d, r18	; 29
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	e2 9a       	sbi	0x1c, 2	; 28
    3196:	e1 9a       	sbi	0x1c, 1	; 28
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	01 96       	adiw	r24, 0x01	; 1
    319c:	08 95       	ret

0000319e <strrev>:
    319e:	dc 01       	movw	r26, r24
    31a0:	fc 01       	movw	r30, r24
    31a2:	67 2f       	mov	r22, r23
    31a4:	71 91       	ld	r23, Z+
    31a6:	77 23       	and	r23, r23
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <strrev+0x4>
    31aa:	32 97       	sbiw	r30, 0x02	; 2
    31ac:	04 c0       	rjmp	.+8      	; 0x31b6 <strrev+0x18>
    31ae:	7c 91       	ld	r23, X
    31b0:	6d 93       	st	X+, r22
    31b2:	70 83       	st	Z, r23
    31b4:	62 91       	ld	r22, -Z
    31b6:	ae 17       	cp	r26, r30
    31b8:	bf 07       	cpc	r27, r31
    31ba:	c8 f3       	brcs	.-14     	; 0x31ae <strrev+0x10>
    31bc:	08 95       	ret

000031be <__udivmodhi4>:
    31be:	aa 1b       	sub	r26, r26
    31c0:	bb 1b       	sub	r27, r27
    31c2:	51 e1       	ldi	r21, 0x11	; 17
    31c4:	07 c0       	rjmp	.+14     	; 0x31d4 <__udivmodhi4_ep>

000031c6 <__udivmodhi4_loop>:
    31c6:	aa 1f       	adc	r26, r26
    31c8:	bb 1f       	adc	r27, r27
    31ca:	a6 17       	cp	r26, r22
    31cc:	b7 07       	cpc	r27, r23
    31ce:	10 f0       	brcs	.+4      	; 0x31d4 <__udivmodhi4_ep>
    31d0:	a6 1b       	sub	r26, r22
    31d2:	b7 0b       	sbc	r27, r23

000031d4 <__udivmodhi4_ep>:
    31d4:	88 1f       	adc	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	5a 95       	dec	r21
    31da:	a9 f7       	brne	.-22     	; 0x31c6 <__udivmodhi4_loop>
    31dc:	80 95       	com	r24
    31de:	90 95       	com	r25
    31e0:	bc 01       	movw	r22, r24
    31e2:	cd 01       	movw	r24, r26
    31e4:	08 95       	ret

000031e6 <_exit>:
    31e6:	f8 94       	cli

000031e8 <__stop_program>:
    31e8:	ff cf       	rjmp	.-2      	; 0x31e8 <__stop_program>
