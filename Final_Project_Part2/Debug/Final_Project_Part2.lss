
Final_Project_Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00001d52  00001de6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800074  00800074  00001dfa  2**0
                  ALLOC
  3 .stab         00001e48  00000000  00000000  00001dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000152f  00000000  00000000  00003c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005173  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000052b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005423  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007f57  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000090f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000098bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 39       	cpi	r26, 0x90	; 144
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <main>
      8a:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EEPROM_init>:
 * Description   : This Function is responsible for calling the TWI_init() function to initialise the I2C.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void EEPROM_init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Call the TWI_init() function to initialise the I2C.
	 */
	TWI_init();
     b4e:	0e 94 f4 06 	call	0xde8	; 0xde8 <TWI_init>
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <EEPROM_writeByte>:
 * Description   : This Function is responsible for writing bytes to EEPROM.
 * Arguments     : unsigned short variable , pointer to character that carries an address..
 * Return        : char.
 **************************************************************************************************************/
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <EEPROM_writeByte+0x6>
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <EEPROM_writeByte+0x8>
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
     b68:	6b 83       	std	Y+3, r22	; 0x03
	 * 4- Write byte to EEprom.
	 * 5- Send the Stop Bit.
	 *
	 *
	 */
    TWI_start();
     b6a:	0e 94 0a 07 	call	0xe14	; 0xe14 <TWI_start>
    if (TWI_getStatus() != TW_START){
     b6e:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     b72:	88 30       	cpi	r24, 0x08	; 8
     b74:	11 f0       	breq	.+4      	; 0xb7a <EEPROM_writeByte+0x22>
    	return ERROR;
     b76:	1c 82       	std	Y+4, r1	; 0x04
     b78:	28 c0       	rjmp	.+80     	; 0xbca <EEPROM_writeByte+0x72>
    }
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	80 70       	andi	r24, 0x00	; 0
     b80:	97 70       	andi	r25, 0x07	; 7
     b82:	88 0f       	add	r24, r24
     b84:	89 2f       	mov	r24, r25
     b86:	88 1f       	adc	r24, r24
     b88:	99 0b       	sbc	r25, r25
     b8a:	91 95       	neg	r25
     b8c:	80 6a       	ori	r24, 0xA0	; 160
     b8e:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK){
     b92:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     b96:	88 31       	cpi	r24, 0x18	; 24
     b98:	11 f0       	breq	.+4      	; 0xb9e <EEPROM_writeByte+0x46>
        return ERROR;
     b9a:	1c 82       	std	Y+4, r1	; 0x04
     b9c:	16 c0       	rjmp	.+44     	; 0xbca <EEPROM_writeByte+0x72>
    }
    TWI_write((uint8)(u16addr));
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK){
     ba4:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     ba8:	88 32       	cpi	r24, 0x28	; 40
     baa:	11 f0       	breq	.+4      	; 0xbb0 <EEPROM_writeByte+0x58>
        return ERROR;
     bac:	1c 82       	std	Y+4, r1	; 0x04
     bae:	0d c0       	rjmp	.+26     	; 0xbca <EEPROM_writeByte+0x72>
    }

    TWI_write(u8data);
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK){
     bb6:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     bba:	88 32       	cpi	r24, 0x28	; 40
     bbc:	11 f0       	breq	.+4      	; 0xbc2 <EEPROM_writeByte+0x6a>
        return ERROR;
     bbe:	1c 82       	std	Y+4, r1	; 0x04
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <EEPROM_writeByte+0x72>
    }
    TWI_stop();
     bc2:	0e 94 1a 07 	call	0xe34	; 0xe34 <TWI_stop>

    return SUCCESS;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	8c 83       	std	Y+4, r24	; 0x04
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <EEPROM_readByte>:
 * Description   : This Function is responsible for reading bytes from EEPROM.
 * Arguments     : unsigned short variable , pointer to character that carries an address.
 * Return        : char.
 **************************************************************************************************************/
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <EEPROM_readByte+0x6>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <EEPROM_readByte+0x8>
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	7c 83       	std	Y+4, r23	; 0x04
     bee:	6b 83       	std	Y+3, r22	; 0x03
	 * 7- Send the Stop Bit.
	 *
	 *
     */

    TWI_start();
     bf0:	0e 94 0a 07 	call	0xe14	; 0xe14 <TWI_start>
    if (TWI_getStatus() != TW_START){
     bf4:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     bf8:	88 30       	cpi	r24, 0x08	; 8
     bfa:	11 f0       	breq	.+4      	; 0xc00 <EEPROM_readByte+0x26>
        return ERROR;
     bfc:	1d 82       	std	Y+5, r1	; 0x05
     bfe:	44 c0       	rjmp	.+136    	; 0xc88 <EEPROM_readByte+0xae>
    }

    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	80 70       	andi	r24, 0x00	; 0
     c06:	97 70       	andi	r25, 0x07	; 7
     c08:	88 0f       	add	r24, r24
     c0a:	89 2f       	mov	r24, r25
     c0c:	88 1f       	adc	r24, r24
     c0e:	99 0b       	sbc	r25, r25
     c10:	91 95       	neg	r25
     c12:	80 6a       	ori	r24, 0xA0	; 160
     c14:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c18:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     c1c:	88 31       	cpi	r24, 0x18	; 24
     c1e:	11 f0       	breq	.+4      	; 0xc24 <EEPROM_readByte+0x4a>
        return ERROR;
     c20:	1d 82       	std	Y+5, r1	; 0x05
     c22:	32 c0       	rjmp	.+100    	; 0xc88 <EEPROM_readByte+0xae>

    TWI_write((uint8)(u16addr));
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     c2a:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     c2e:	88 32       	cpi	r24, 0x28	; 40
     c30:	11 f0       	breq	.+4      	; 0xc36 <EEPROM_readByte+0x5c>
        return ERROR;
     c32:	1d 82       	std	Y+5, r1	; 0x05
     c34:	29 c0       	rjmp	.+82     	; 0xc88 <EEPROM_readByte+0xae>

    TWI_start();
     c36:	0e 94 0a 07 	call	0xe14	; 0xe14 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     c3a:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     c3e:	80 31       	cpi	r24, 0x10	; 16
     c40:	11 f0       	breq	.+4      	; 0xc46 <EEPROM_readByte+0x6c>
        return ERROR;
     c42:	1d 82       	std	Y+5, r1	; 0x05
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <EEPROM_readByte+0xae>


    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	80 70       	andi	r24, 0x00	; 0
     c4c:	97 70       	andi	r25, 0x07	; 7
     c4e:	88 0f       	add	r24, r24
     c50:	89 2f       	mov	r24, r25
     c52:	88 1f       	adc	r24, r24
     c54:	99 0b       	sbc	r25, r25
     c56:	91 95       	neg	r25
     c58:	81 6a       	ori	r24, 0xA1	; 161
     c5a:	0e 94 25 07 	call	0xe4a	; 0xe4a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     c5e:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     c62:	80 34       	cpi	r24, 0x40	; 64
     c64:	11 f0       	breq	.+4      	; 0xc6a <EEPROM_readByte+0x90>
        return ERROR;
     c66:	1d 82       	std	Y+5, r1	; 0x05
     c68:	0f c0       	rjmp	.+30     	; 0xc88 <EEPROM_readByte+0xae>


    *u8data = TWI_readWithNACK();
     c6a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <TWI_readWithNACK>
     c6e:	eb 81       	ldd	r30, Y+3	; 0x03
     c70:	fc 81       	ldd	r31, Y+4	; 0x04
     c72:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     c74:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_getStatus>
     c78:	88 35       	cpi	r24, 0x58	; 88
     c7a:	11 f0       	breq	.+4      	; 0xc80 <EEPROM_readByte+0xa6>
        return ERROR;
     c7c:	1d 82       	std	Y+5, r1	; 0x05
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <EEPROM_readByte+0xae>

    TWI_stop();
     c80:	0e 94 1a 07 	call	0xe34	; 0xe34 <TWI_stop>
    return SUCCESS;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8d 83       	std	Y+5, r24	; 0x05
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
}
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	cf 91       	pop	r28
     c96:	df 91       	pop	r29
     c98:	08 95       	ret

00000c9a <EEPROM_readPassword>:
 * Description   : This Function is responsible for reading bytes from EEPROM.
 * Arguments     : Array to carry data read from EEPROM ,char k.
 * Return        : None.
 **************************************************************************************************************/
void EEPROM_readPassword(uint8 buffer[],uint8 k)
{
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	63 97       	sbiw	r28, 0x13	; 19
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	9a 8b       	std	Y+18, r25	; 0x12
     cb0:	89 8b       	std	Y+17, r24	; 0x11
     cb2:	6b 8b       	std	Y+19, r22	; 0x13
	uint8 read;
	for(uint8 i = 0; i < k ;i++)
     cb4:	1f 86       	std	Y+15, r1	; 0x0f
     cb6:	8a c0       	rjmp	.+276    	; 0xdcc <EEPROM_readPassword+0x132>
	{
		EEPROM_readByte(FIRST_LOC_EEPROM + i, &read);
     cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	8f 5e       	subi	r24, 0xEF	; 239
     cc0:	9c 4f       	sbci	r25, 0xFC	; 252
     cc2:	9e 01       	movw	r18, r28
     cc4:	20 5f       	subi	r18, 0xF0	; 240
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
     cc8:	b9 01       	movw	r22, r18
     cca:	0e 94 ed 05 	call	0xbda	; 0xbda <EEPROM_readByte>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a8 e4       	ldi	r26, 0x48	; 72
     cd4:	b2 e4       	ldi	r27, 0x42	; 66
     cd6:	8b 87       	std	Y+11, r24	; 0x0b
     cd8:	9c 87       	std	Y+12, r25	; 0x0c
     cda:	ad 87       	std	Y+13, r26	; 0x0d
     cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cde:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a e7       	ldi	r20, 0x7A	; 122
     cec:	53 e4       	ldi	r21, 0x43	; 67
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	8f 83       	std	Y+7, r24	; 0x07
     cf8:	98 87       	std	Y+8, r25	; 0x08
     cfa:	a9 87       	std	Y+9, r26	; 0x09
     cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfe:	6f 81       	ldd	r22, Y+7	; 0x07
     d00:	78 85       	ldd	r23, Y+8	; 0x08
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d12:	88 23       	and	r24, r24
     d14:	2c f4       	brge	.+10     	; 0xd20 <EEPROM_readPassword+0x86>
		__ticks = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	3f c0       	rjmp	.+126    	; 0xd9e <EEPROM_readPassword+0x104>
	else if (__tmp > 65535)
     d20:	6f 81       	ldd	r22, Y+7	; 0x07
     d22:	78 85       	ldd	r23, Y+8	; 0x08
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	4c f5       	brge	.+82     	; 0xd8a <EEPROM_readPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e2       	ldi	r20, 0x20	; 32
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <EEPROM_readPassword+0xe6>
     d62:	89 e1       	ldi	r24, 0x19	; 25
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <EEPROM_readPassword+0xd4>
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	69 f7       	brne	.-38     	; 0xd62 <EEPROM_readPassword+0xc8>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <EEPROM_readPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8a:	6f 81       	ldd	r22, Y+7	; 0x07
     d8c:	78 85       	ldd	r23, Y+8	; 0x08
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <EEPROM_readPassword+0x110>
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		buffer[i] = read;
     db2:	8f 85       	ldd	r24, Y+15	; 0x0f
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	89 89       	ldd	r24, Y+17	; 0x11
     dba:	9a 89       	ldd	r25, Y+18	; 0x12
     dbc:	fc 01       	movw	r30, r24
     dbe:	e2 0f       	add	r30, r18
     dc0:	f3 1f       	adc	r31, r19
     dc2:	88 89       	ldd	r24, Y+16	; 0x10
     dc4:	80 83       	st	Z, r24
 * Return        : None.
 **************************************************************************************************************/
void EEPROM_readPassword(uint8 buffer[],uint8 k)
{
	uint8 read;
	for(uint8 i = 0; i < k ;i++)
     dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	8f 87       	std	Y+15, r24	; 0x0f
     dcc:	9f 85       	ldd	r25, Y+15	; 0x0f
     dce:	8b 89       	ldd	r24, Y+19	; 0x13
     dd0:	98 17       	cp	r25, r24
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <EEPROM_readPassword+0x13c>
     dd4:	71 cf       	rjmp	.-286    	; 0xcb8 <EEPROM_readPassword+0x1e>
	{
		EEPROM_readByte(FIRST_LOC_EEPROM + i, &read);
		_delay_ms(50);
		buffer[i] = read;
	}
}
     dd6:	63 96       	adiw	r28, 0x13	; 19
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	08 95       	ret

00000de8 <TWI_init>:
 * Function Name : TWI_init().
 * Description   : This Function is responsible for initialising the I2C.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void TWI_init(){
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
	 *    Bits for (1:7) -> SLAVE_ADDRESS
	 * TWCR :
	 *    TWI ENABLE BIT ->1.
	 */

	TWBR = TWBR_VALUE;
     df0:	e0 e2       	ldi	r30, 0x20	; 32
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	80 83       	st	Z, r24
	TWSR = TWPS_PRESCALER;
     df8:	e1 e2       	ldi	r30, 0x21	; 33
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	10 82       	st	Z, r1
	TWAR= ( 1<<SLAVE_ADDRESS );
     dfe:	e2 e2       	ldi	r30, 0x22	; 34
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	80 83       	st	Z, r24
	TWCR= 1<< TWEN;
     e06:	e6 e5       	ldi	r30, 0x56	; 86
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	80 83       	st	Z, r24
}
     e0e:	cf 91       	pop	r28
     e10:	df 91       	pop	r29
     e12:	08 95       	ret

00000e14 <TWI_start>:
 * Function Name : TWI_start().
 * Description   : This Function is responsible for sending the start bit of the I2C.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void TWI_start(){
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	 * TWCR :
	 * TWI INTERERUPT FLAG -> 1 (Clear the flag by setting it to one).
	 * TWI STOP CONDITION BIT -> 1.
	 * TWI ENABLE BIT ->1.
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e1c:	e6 e5       	ldi	r30, 0x56	; 86
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	84 e9       	ldi	r24, 0x94	; 148
     e22:	80 83       	st	Z, r24
	while((TWCR &(1<<TWINT))==0);
     e24:	e6 e5       	ldi	r30, 0x56	; 86
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	dc f7       	brge	.-10     	; 0xe24 <TWI_start+0x10>
}
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <TWI_stop>:
 * Function Name : TWI_stop.
 * Description   : This Function is responsible for sending the stop bit of the I2C.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void TWI_stop(){
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	 * TWCR :
	 * TWI INTERERUPT FLAG -> 1 (Clear the flag by setting it to one).
	 * TWI STOP CONDITION BIT -> 1.
	 * TWI ENABLE BIT.
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     e3c:	e6 e5       	ldi	r30, 0x56	; 86
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	84 e9       	ldi	r24, 0x94	; 148
     e42:	80 83       	st	Z, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <TWI_write>:
 * Function Name : TWI_write.
 * Description   : This Function is responsible for writing data the I2C.
 * Arguments     : char data.
 * Return        : None.
 **************************************************************************************************************/
void TWI_write(char data){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	89 83       	std	Y+1, r24	; 0x01
     * TWDR : -> Data to be written.
	 * TWCR :
	 * TWI INTERERUPT FLAG -> 1 (Clear the flag by setting it to one).
	 * TWI ENABLE BIT.
	 */
    TWDR = data;
     e56:	e3 e2       	ldi	r30, 0x23	; 35
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 83       	st	Z, r24
    TWCR = (1 << TWINT) | (1 << TWEN);
     e5e:	e6 e5       	ldi	r30, 0x56	; 86
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	84 e8       	ldi	r24, 0x84	; 132
     e64:	80 83       	st	Z, r24
    while((TWCR &(1<<TWINT))==0);
     e66:	e6 e5       	ldi	r30, 0x56	; 86
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	88 23       	and	r24, r24
     e6e:	dc f7       	brge	.-10     	; 0xe66 <TWI_write+0x1c>
}
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <TWI_readWithACK>:
 * Function Name : TWI_readWithACK().
 * Description   : This Function is responsible for reading data of TWDR.
 * Arguments     : None.
 * Return        : TWDR (char).
 **************************************************************************************************************/
char TWI_readWithACK(){
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 * Wait for TWINT flag set in TWCR Register (data received successfully)
	 * Read Data
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	84 ec       	ldi	r24, 0xC4	; 196
     e86:	80 83       	st	Z, r24
    while((TWCR &(1<<TWINT))==0);
     e88:	e6 e5       	ldi	r30, 0x56	; 86
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 23       	and	r24, r24
     e90:	dc f7       	brge	.-10     	; 0xe88 <TWI_readWithACK+0x10>
    return TWDR;
     e92:	e3 e2       	ldi	r30, 0x23	; 35
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <TWI_readWithNACK>:
 * Function Name : TWI_readWithACK().
 * Description   : This Function is responsible for reading data of TWDR.
 * Arguments     : None.
 * Return        : TWDR (char).
 **************************************************************************************************************/
char TWI_readWithNACK(){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 * Wait for TWINT flag set in TWCR Register (data received successfully)
     * Read Data
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	84 e8       	ldi	r24, 0x84	; 132
     eac:	80 83       	st	Z, r24
    while((TWCR &(1<<TWINT))==0);
     eae:	e6 e5       	ldi	r30, 0x56	; 86
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 23       	and	r24, r24
     eb6:	dc f7       	brge	.-10     	; 0xeae <TWI_readWithNACK+0x10>
    return TWDR;
     eb8:	e3 e2       	ldi	r30, 0x23	; 35
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <TWI_getStatus>:
 * Function Name : TWI_getStatus().
 * Description   : This Function is responsible for reading data of TWDR.
 * Arguments     : None.
 * Return        : TWDR (char).
 **************************************************************************************************************/
char TWI_getStatus(){
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62

	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    char status;
    status = TWSR & 0xF8;
     ece:	e1 e2       	ldi	r30, 0x21	; 33
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 7f       	andi	r24, 0xF8	; 248
     ed6:	89 83       	std	Y+1, r24	; 0x01
    return status;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
}
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <MOTOR_init>:
 * Function Name : MOTOR_init.
 * Description   : This Function is responsible for setting the Motor enable and direction.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void MOTOR_init(){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT_DIRECTION |= ( 1<< MOTOR_INPUT1 );
     eea:	a1 e3       	ldi	r26, 0x31	; 49
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e1 e3       	ldi	r30, 0x31	; 49
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	8c 93       	st	X, r24
	MOTOR_PORT_DIRECTION |=	( 1<< MOTOR_INPUT2 );
     ef8:	a1 e3       	ldi	r26, 0x31	; 49
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e1 e3       	ldi	r30, 0x31	; 49
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0xBF) | ( 0<< MOTOR_INPUT1 );
     f06:	a1 e3       	ldi	r26, 0x31	; 49
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e3       	ldi	r30, 0x31	; 49
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	98 2f       	mov	r25, r24
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	89 2b       	or	r24, r25
     f1c:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0x7F)	| ( 0 << MOTOR_INPUT2  );
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	98 2f       	mov	r25, r24
     f2a:	e1 e3       	ldi	r30, 0x31	; 49
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 77       	andi	r24, 0x7F	; 127
     f32:	89 2b       	or	r24, r25
     f34:	8c 93       	st	X, r24


}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <STOP_motor>:
 * Function Name : STOP_motor.
 * Description   : This Function is responsible for stopping the Motor.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void STOP_motor(){
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
	/*
	 * To Stop the Motor first let INPUT1 -> 0
	 * INPUT2 -> 0.
	 */
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0xBF) | ( 0<< MOTOR_INPUT1 );
     f44:	a1 e3       	ldi	r26, 0x31	; 49
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e1 e3       	ldi	r30, 0x31	; 49
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	98 2f       	mov	r25, r24
     f50:	e1 e3       	ldi	r30, 0x31	; 49
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8f 7b       	andi	r24, 0xBF	; 191
     f58:	89 2b       	or	r24, r25
     f5a:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0x7F)	| ( 0 << MOTOR_INPUT2  );
     f5c:	a1 e3       	ldi	r26, 0x31	; 49
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e1 e3       	ldi	r30, 0x31	; 49
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	98 2f       	mov	r25, r24
     f68:	e1 e3       	ldi	r30, 0x31	; 49
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8f 77       	andi	r24, 0x7F	; 127
     f70:	89 2b       	or	r24, r25
     f72:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xF8) | (0);
     f74:	ae e4       	ldi	r26, 0x4E	; 78
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ee e4       	ldi	r30, 0x4E	; 78
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	98 2f       	mov	r25, r24
     f80:	ee e4       	ldi	r30, 0x4E	; 78
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	88 7f       	andi	r24, 0xF8	; 248
     f88:	89 2b       	or	r24, r25
     f8a:	8c 93       	st	X, r24
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <ROTATE_motorClockwise>:
 * Function Name : MOTOR_init.
 * Description   : This Function is responsible for rotating the Motor Clockwise.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void ROTATE_motorClockwise(){
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	/*
    * To Rotate the Motor Clockwise first let INPUT1 -> 0
    * INPUT2 -> 1.
	*/
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0xBF) | ( 0<< MOTOR_INPUT1 );
     f9a:	a1 e3       	ldi	r26, 0x31	; 49
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e1 e3       	ldi	r30, 0x31	; 49
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	98 2f       	mov	r25, r24
     fa6:	e1 e3       	ldi	r30, 0x31	; 49
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	8f 7b       	andi	r24, 0xBF	; 191
     fae:	89 2b       	or	r24, r25
     fb0:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0x7F)	| ( 1 << MOTOR_INPUT2  );
     fb2:	a1 e3       	ldi	r26, 0x31	; 49
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e3       	ldi	r30, 0x31	; 49
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	98 2f       	mov	r25, r24
     fbe:	e1 e3       	ldi	r30, 0x31	; 49
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 68       	ori	r24, 0x80	; 128
     fc6:	89 2b       	or	r24, r25
     fc8:	8c 93       	st	X, r24
	TCNT0=0;
     fca:	e2 e5       	ldi	r30, 0x52	; 82
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	10 82       	st	Z, r1
	OCR1A=2000;
     fd0:	ea e4       	ldi	r30, 0x4A	; 74
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 ed       	ldi	r24, 0xD0	; 208
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	91 83       	std	Z+1, r25	; 0x01
     fda:	80 83       	st	Z, r24
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <ROTATE_motorAntiClockwise>:
 * Function Name : MOTOR_init.
 * Description   : This Function is responsible for rotating the Motor Anti-Clockwise.
 * Arguments     : None.
 * Return        : None.
 **************************************************************************************************************/
void ROTATE_motorAntiClockwise(){
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
	/*
	* To Rotate the Motor Anti-Clockwise first let INPUT1 -> 1
	* INPUT2 -> 0.
    */
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0xBF) | ( 1<< MOTOR_INPUT1 );
     fea:	a1 e3       	ldi	r26, 0x31	; 49
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e1 e3       	ldi	r30, 0x31	; 49
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	98 2f       	mov	r25, r24
     ff6:	e1 e3       	ldi	r30, 0x31	; 49
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	80 64       	ori	r24, 0x40	; 64
     ffe:	89 2b       	or	r24, r25
    1000:	8c 93       	st	X, r24
	MOTOR_DIRECTION |= (MOTOR_DIRECTION & 0x7F)	| ( 0 << MOTOR_INPUT2  );
    1002:	a1 e3       	ldi	r26, 0x31	; 49
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e1 e3       	ldi	r30, 0x31	; 49
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	98 2f       	mov	r25, r24
    100e:	e1 e3       	ldi	r30, 0x31	; 49
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8f 77       	andi	r24, 0x7F	; 127
    1016:	89 2b       	or	r24, r25
    1018:	8c 93       	st	X, r24
	TCNT0=0;
    101a:	e2 e5       	ldi	r30, 0x52	; 82
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	10 82       	st	Z, r1
	OCR1A=2000;
    1020:	ea e4       	ldi	r30, 0x4A	; 74
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 ed       	ldi	r24, 0xD0	; 208
    1026:	97 e0       	ldi	r25, 0x07	; 7
    1028:	91 83       	std	Z+1, r25	; 0x01
    102a:	80 83       	st	Z, r24

}
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <PW_checkPassword>:
 * Arguments      : 2 character array.
 * Return         : char
 **************************************************************************************************************/

uint8 PW_checkPassword(uint8 *password1,char *password2)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	28 97       	sbiw	r28, 0x08	; 8
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	9d 83       	std	Y+5, r25	; 0x05
    1048:	8c 83       	std	Y+4, r24	; 0x04
    104a:	7f 83       	std	Y+7, r23	; 0x07
    104c:	6e 83       	std	Y+6, r22	; 0x06
	char compare = 0;
    104e:	1b 82       	std	Y+3, r1	; 0x03
	for(int i = 0 ; i < 4 ; i++)
    1050:	1a 82       	std	Y+2, r1	; 0x02
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	1a c0       	rjmp	.+52     	; 0x108a <PW_checkPassword+0x58>
	{
		if(password1[i] == password2[i])
    1056:	29 81       	ldd	r18, Y+1	; 0x01
    1058:	3a 81       	ldd	r19, Y+2	; 0x02
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	fc 01       	movw	r30, r24
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	40 81       	ld	r20, Z
    1066:	29 81       	ldd	r18, Y+1	; 0x01
    1068:	3a 81       	ldd	r19, Y+2	; 0x02
    106a:	8e 81       	ldd	r24, Y+6	; 0x06
    106c:	9f 81       	ldd	r25, Y+7	; 0x07
    106e:	fc 01       	movw	r30, r24
    1070:	e2 0f       	add	r30, r18
    1072:	f3 1f       	adc	r31, r19
    1074:	80 81       	ld	r24, Z
    1076:	48 17       	cp	r20, r24
    1078:	19 f4       	brne	.+6      	; 0x1080 <PW_checkPassword+0x4e>
		{
			compare ++;
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	8f 5f       	subi	r24, 0xFF	; 255
    107e:	8b 83       	std	Y+3, r24	; 0x03
 **************************************************************************************************************/

uint8 PW_checkPassword(uint8 *password1,char *password2)
{
	char compare = 0;
	for(int i = 0 ; i < 4 ; i++)
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	91 05       	cpc	r25, r1
    1092:	0c f3       	brlt	.-62     	; 0x1056 <PW_checkPassword+0x24>
		{
			compare ++;
		}
	}

	if(compare == 4)
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	19 f4       	brne	.+6      	; 0x10a0 <PW_checkPassword+0x6e>
		return TRUE;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	88 87       	std	Y+8, r24	; 0x08
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <PW_checkPassword+0x70>
	else
		return FALSE;
    10a0:	18 86       	std	Y+8, r1	; 0x08
    10a2:	88 85       	ldd	r24, Y+8	; 0x08
}
    10a4:	28 96       	adiw	r28, 0x08	; 8
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <main>:




int main(){
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	c6 54       	subi	r28, 0x46	; 70
    10c0:	d0 40       	sbci	r29, 0x00	; 0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61

    SREG |=1<<7;
    10cc:	af e5       	ldi	r26, 0x5F	; 95
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ef e5       	ldi	r30, 0x5F	; 95
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	80 68       	ori	r24, 0x80	; 128
    10d8:	8c 93       	st	X, r24
    TWI_init();
    10da:	0e 94 f4 06 	call	0xde8	; 0xde8 <TWI_init>
    EEPROM_init();
    10de:	0e 94 a3 05 	call	0xb46	; 0xb46 <EEPROM_init>
	UCSRBC_init mp2={Eight_bit ,Asynchronous ,Enable_EvenParity ,stop2_bit ,Rising_XCK_EDGE};
    10e2:	ce 01       	movw	r24, r28
    10e4:	8d 96       	adiw	r24, 0x2d	; 45
    10e6:	99 af       	std	Y+57, r25	; 0x39
    10e8:	88 af       	std	Y+56, r24	; 0x38
    10ea:	ee e6       	ldi	r30, 0x6E	; 110
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	fb af       	std	Y+59, r31	; 0x3b
    10f0:	ea af       	std	Y+58, r30	; 0x3a
    10f2:	f5 e0       	ldi	r31, 0x05	; 5
    10f4:	fc af       	std	Y+60, r31	; 0x3c
    10f6:	ea ad       	ldd	r30, Y+58	; 0x3a
    10f8:	fb ad       	ldd	r31, Y+59	; 0x3b
    10fa:	00 80       	ld	r0, Z
    10fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    10fe:	9b ad       	ldd	r25, Y+59	; 0x3b
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	9b af       	std	Y+59, r25	; 0x3b
    1104:	8a af       	std	Y+58, r24	; 0x3a
    1106:	e8 ad       	ldd	r30, Y+56	; 0x38
    1108:	f9 ad       	ldd	r31, Y+57	; 0x39
    110a:	00 82       	st	Z, r0
    110c:	88 ad       	ldd	r24, Y+56	; 0x38
    110e:	99 ad       	ldd	r25, Y+57	; 0x39
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	99 af       	std	Y+57, r25	; 0x39
    1114:	88 af       	std	Y+56, r24	; 0x38
    1116:	9c ad       	ldd	r25, Y+60	; 0x3c
    1118:	91 50       	subi	r25, 0x01	; 1
    111a:	9c af       	std	Y+60, r25	; 0x3c
    111c:	ec ad       	ldd	r30, Y+60	; 0x3c
    111e:	ee 23       	and	r30, r30
    1120:	51 f7       	brne	.-44     	; 0x10f6 <main+0x40>
    UART_init(&mp2);
    1122:	ce 01       	movw	r24, r28
    1124:	8d 96       	adiw	r24, 0x2d	; 45
    1126:	0e 94 9a 0b 	call	0x1734	; 0x1734 <UART_init>
	Timer1_setup timer1={FASTPWM_mode15,Clear_FastPWMT1,No_Prescaler};
    112a:	ce 01       	movw	r24, r28
    112c:	c2 96       	adiw	r24, 0x32	; 50
    112e:	9e af       	std	Y+62, r25	; 0x3e
    1130:	8d af       	std	Y+61, r24	; 0x3d
    1132:	eb e6       	ldi	r30, 0x6B	; 107
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	21 96       	adiw	r28, 0x01	; 1
    1138:	ff af       	std	Y+63, r31	; 0x3f
    113a:	ee af       	std	Y+62, r30	; 0x3e
    113c:	21 97       	sbiw	r28, 0x01	; 1
    113e:	f3 e0       	ldi	r31, 0x03	; 3
    1140:	22 96       	adiw	r28, 0x02	; 2
    1142:	ff af       	std	Y+63, r31	; 0x3f
    1144:	22 97       	sbiw	r28, 0x02	; 2
    1146:	21 96       	adiw	r28, 0x01	; 1
    1148:	ee ad       	ldd	r30, Y+62	; 0x3e
    114a:	ff ad       	ldd	r31, Y+63	; 0x3f
    114c:	21 97       	sbiw	r28, 0x01	; 1
    114e:	00 80       	ld	r0, Z
    1150:	21 96       	adiw	r28, 0x01	; 1
    1152:	8e ad       	ldd	r24, Y+62	; 0x3e
    1154:	9f ad       	ldd	r25, Y+63	; 0x3f
    1156:	21 97       	sbiw	r28, 0x01	; 1
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	21 96       	adiw	r28, 0x01	; 1
    115c:	9f af       	std	Y+63, r25	; 0x3f
    115e:	8e af       	std	Y+62, r24	; 0x3e
    1160:	21 97       	sbiw	r28, 0x01	; 1
    1162:	ed ad       	ldd	r30, Y+61	; 0x3d
    1164:	fe ad       	ldd	r31, Y+62	; 0x3e
    1166:	00 82       	st	Z, r0
    1168:	8d ad       	ldd	r24, Y+61	; 0x3d
    116a:	9e ad       	ldd	r25, Y+62	; 0x3e
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	9e af       	std	Y+62, r25	; 0x3e
    1170:	8d af       	std	Y+61, r24	; 0x3d
    1172:	22 96       	adiw	r28, 0x02	; 2
    1174:	9f ad       	ldd	r25, Y+63	; 0x3f
    1176:	22 97       	sbiw	r28, 0x02	; 2
    1178:	91 50       	subi	r25, 0x01	; 1
    117a:	22 96       	adiw	r28, 0x02	; 2
    117c:	9f af       	std	Y+63, r25	; 0x3f
    117e:	22 97       	sbiw	r28, 0x02	; 2
    1180:	22 96       	adiw	r28, 0x02	; 2
    1182:	ef ad       	ldd	r30, Y+63	; 0x3f
    1184:	22 97       	sbiw	r28, 0x02	; 2
    1186:	ee 23       	and	r30, r30
    1188:	f1 f6       	brne	.-68     	; 0x1146 <main+0x90>
	Timer0_setup timer0={Normal02,Normal_NonPWM,Prescaler_256};
    118a:	ce 01       	movw	r24, r28
    118c:	c5 96       	adiw	r24, 0x35	; 53
    118e:	24 96       	adiw	r28, 0x04	; 4
    1190:	9f af       	std	Y+63, r25	; 0x3f
    1192:	8e af       	std	Y+62, r24	; 0x3e
    1194:	24 97       	sbiw	r28, 0x04	; 4
    1196:	e8 e6       	ldi	r30, 0x68	; 104
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	26 96       	adiw	r28, 0x06	; 6
    119c:	ff af       	std	Y+63, r31	; 0x3f
    119e:	ee af       	std	Y+62, r30	; 0x3e
    11a0:	26 97       	sbiw	r28, 0x06	; 6
    11a2:	f3 e0       	ldi	r31, 0x03	; 3
    11a4:	27 96       	adiw	r28, 0x07	; 7
    11a6:	ff af       	std	Y+63, r31	; 0x3f
    11a8:	27 97       	sbiw	r28, 0x07	; 7
    11aa:	26 96       	adiw	r28, 0x06	; 6
    11ac:	ee ad       	ldd	r30, Y+62	; 0x3e
    11ae:	ff ad       	ldd	r31, Y+63	; 0x3f
    11b0:	26 97       	sbiw	r28, 0x06	; 6
    11b2:	00 80       	ld	r0, Z
    11b4:	26 96       	adiw	r28, 0x06	; 6
    11b6:	8e ad       	ldd	r24, Y+62	; 0x3e
    11b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    11ba:	26 97       	sbiw	r28, 0x06	; 6
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	26 96       	adiw	r28, 0x06	; 6
    11c0:	9f af       	std	Y+63, r25	; 0x3f
    11c2:	8e af       	std	Y+62, r24	; 0x3e
    11c4:	26 97       	sbiw	r28, 0x06	; 6
    11c6:	24 96       	adiw	r28, 0x04	; 4
    11c8:	ee ad       	ldd	r30, Y+62	; 0x3e
    11ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    11cc:	24 97       	sbiw	r28, 0x04	; 4
    11ce:	00 82       	st	Z, r0
    11d0:	24 96       	adiw	r28, 0x04	; 4
    11d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    11d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11d6:	24 97       	sbiw	r28, 0x04	; 4
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	24 96       	adiw	r28, 0x04	; 4
    11dc:	9f af       	std	Y+63, r25	; 0x3f
    11de:	8e af       	std	Y+62, r24	; 0x3e
    11e0:	24 97       	sbiw	r28, 0x04	; 4
    11e2:	27 96       	adiw	r28, 0x07	; 7
    11e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    11e6:	27 97       	sbiw	r28, 0x07	; 7
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	27 96       	adiw	r28, 0x07	; 7
    11ec:	9f af       	std	Y+63, r25	; 0x3f
    11ee:	27 97       	sbiw	r28, 0x07	; 7
    11f0:	27 96       	adiw	r28, 0x07	; 7
    11f2:	ef ad       	ldd	r30, Y+63	; 0x3f
    11f4:	27 97       	sbiw	r28, 0x07	; 7
    11f6:	ee 23       	and	r30, r30
    11f8:	c1 f6       	brne	.-80     	; 0x11aa <main+0xf4>
	SET_timer0( &timer0);
    11fa:	ce 01       	movw	r24, r28
    11fc:	c5 96       	adiw	r24, 0x35	; 53
    11fe:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <SET_timer0>
	SET_timer1( &timer1);
    1202:	ce 01       	movw	r24, r28
    1204:	c2 96       	adiw	r24, 0x32	; 50
    1206:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <SET_timer1>
	MOTOR_init();
    120a:	0e 94 71 07 	call	0xee2	; 0xee2 <MOTOR_init>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a8 e4       	ldi	r26, 0x48	; 72
    1214:	b2 e4       	ldi	r27, 0x42	; 66
    1216:	8f a3       	std	Y+39, r24	; 0x27
    1218:	98 a7       	std	Y+40, r25	; 0x28
    121a:	a9 a7       	std	Y+41, r26	; 0x29
    121c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	6f a1       	ldd	r22, Y+39	; 0x27
    1220:	78 a5       	ldd	r23, Y+40	; 0x28
    1222:	89 a5       	ldd	r24, Y+41	; 0x29
    1224:	9a a5       	ldd	r25, Y+42	; 0x2a
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a e7       	ldi	r20, 0x7A	; 122
    122c:	53 e4       	ldi	r21, 0x43	; 67
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8b a3       	std	Y+35, r24	; 0x23
    1238:	9c a3       	std	Y+36, r25	; 0x24
    123a:	ad a3       	std	Y+37, r26	; 0x25
    123c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    123e:	6b a1       	ldd	r22, Y+35	; 0x23
    1240:	7c a1       	ldd	r23, Y+36	; 0x24
    1242:	8d a1       	ldd	r24, Y+37	; 0x25
    1244:	9e a1       	ldd	r25, Y+38	; 0x26
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <main+0x1aa>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9a a3       	std	Y+34, r25	; 0x22
    125c:	89 a3       	std	Y+33, r24	; 0x21
    125e:	3f c0       	rjmp	.+126    	; 0x12de <main+0x228>
	else if (__tmp > 65535)
    1260:	6b a1       	ldd	r22, Y+35	; 0x23
    1262:	7c a1       	ldd	r23, Y+36	; 0x24
    1264:	8d a1       	ldd	r24, Y+37	; 0x25
    1266:	9e a1       	ldd	r25, Y+38	; 0x26
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <main+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	6f a1       	ldd	r22, Y+39	; 0x27
    127a:	78 a5       	ldd	r23, Y+40	; 0x28
    127c:	89 a5       	ldd	r24, Y+41	; 0x29
    127e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9a a3       	std	Y+34, r25	; 0x22
    129e:	89 a3       	std	Y+33, r24	; 0x21
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <main+0x20a>
    12a2:	89 e1       	ldi	r24, 0x19	; 25
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	98 a3       	std	Y+32, r25	; 0x20
    12a8:	8f 8f       	std	Y+31, r24	; 0x1f
    12aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ac:	98 a1       	ldd	r25, Y+32	; 0x20
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <main+0x1f8>
    12b2:	98 a3       	std	Y+32, r25	; 0x20
    12b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	89 a1       	ldd	r24, Y+33	; 0x21
    12b8:	9a a1       	ldd	r25, Y+34	; 0x22
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9a a3       	std	Y+34, r25	; 0x22
    12be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	89 a1       	ldd	r24, Y+33	; 0x21
    12c2:	9a a1       	ldd	r25, Y+34	; 0x22
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <main+0x1ec>
    12c8:	14 c0       	rjmp	.+40     	; 0x12f2 <main+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6b a1       	ldd	r22, Y+35	; 0x23
    12cc:	7c a1       	ldd	r23, Y+36	; 0x24
    12ce:	8d a1       	ldd	r24, Y+37	; 0x25
    12d0:	9e a1       	ldd	r25, Y+38	; 0x26
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9a a3       	std	Y+34, r25	; 0x22
    12dc:	89 a3       	std	Y+33, r24	; 0x21
    12de:	89 a1       	ldd	r24, Y+33	; 0x21
    12e0:	9a a1       	ldd	r25, Y+34	; 0x22
    12e2:	9e 8f       	std	Y+30, r25	; 0x1e
    12e4:	8d 8f       	std	Y+29, r24	; 0x1d
    12e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <main+0x234>
    12ee:	9e 8f       	std	Y+30, r25	; 0x1e
    12f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);
    DDRD |= (1<<PD3);
    12f2:	a1 e3       	ldi	r26, 0x31	; 49
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e1 e3       	ldi	r30, 0x31	; 49
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	88 60       	ori	r24, 0x08	; 8
    12fe:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD3);
    1300:	a2 e3       	ldi	r26, 0x32	; 50
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e2 e3       	ldi	r30, 0x32	; 50
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	87 7f       	andi	r24, 0xF7	; 247
    130c:	8c 93       	st	X, r24
    while(1)
	  {
			if(screen == 0)
    130e:	80 91 75 00 	lds	r24, 0x0075
    1312:	88 23       	and	r24, r24
    1314:	71 f5       	brne	.+92     	; 0x1372 <main+0x2bc>
			{
				state = UART_receiveByte();
    1316:	0e 94 5f 0c 	call	0x18be	; 0x18be <UART_receiveByte>
    131a:	80 93 74 00 	sts	0x0074, r24
				if (state == SAVE_PASSWORD)
    131e:	80 91 74 00 	lds	r24, 0x0074
    1322:	8b 30       	cpi	r24, 0x0B	; 11
    1324:	51 f4       	brne	.+20     	; 0x133a <main+0x284>
				{
					UART_receiveString(newPassword);
    1326:	8b e8       	ldi	r24, 0x8B	; 139
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_receiveString>
					screen = 1;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	80 93 75 00 	sts	0x0075, r24
					state = 0;
    1334:	10 92 74 00 	sts	0x0074, r1
    1338:	ea cf       	rjmp	.-44     	; 0x130e <main+0x258>
				}

				else if (state == OPEN_DOOR)
    133a:	80 91 74 00 	lds	r24, 0x0074
    133e:	8d 30       	cpi	r24, 0x0D	; 13
    1340:	51 f4       	brne	.+20     	; 0x1356 <main+0x2a0>
				{
					UART_receiveString(openPassword);
    1342:	8b e7       	ldi	r24, 0x7B	; 123
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_receiveString>
					screen = 2;
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	80 93 75 00 	sts	0x0075, r24
					state = 0;
    1350:	10 92 74 00 	sts	0x0074, r1
    1354:	dc cf       	rjmp	.-72     	; 0x130e <main+0x258>
				}
				else if (state == CHANGE_PASSWORD)
    1356:	80 91 74 00 	lds	r24, 0x0074
    135a:	8e 30       	cpi	r24, 0x0E	; 14
    135c:	c1 f6       	brne	.-80     	; 0x130e <main+0x258>
				{
					UART_receiveString(openPassword);
    135e:	8b e7       	ldi	r24, 0x7B	; 123
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_receiveString>
					screen = 3;
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	80 93 75 00 	sts	0x0075, r24
					state = 0;
    136c:	10 92 74 00 	sts	0x0074, r1
    1370:	ce cf       	rjmp	.-100    	; 0x130e <main+0x258>
				}

			}

			else if(screen == 1)
    1372:	80 91 75 00 	lds	r24, 0x0075
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	09 f0       	breq	.+2      	; 0x137c <main+0x2c6>
    137a:	98 c0       	rjmp	.+304    	; 0x14ac <main+0x3f6>
			{
				sint8 i = 0 ;
    137c:	1c a6       	std	Y+44, r1	; 0x2c
    137e:	88 c0       	rjmp	.+272    	; 0x1490 <main+0x3da>
				while (newPassword[i] != '\0')
				{
					 EEPROM_writeByte(FIRST_LOC_EEPROM +i , newPassword[i]);
    1380:	8c a5       	ldd	r24, Y+44	; 0x2c
    1382:	99 27       	eor	r25, r25
    1384:	87 fd       	sbrc	r24, 7
    1386:	90 95       	com	r25
    1388:	8f 5e       	subi	r24, 0xEF	; 239
    138a:	9c 4f       	sbci	r25, 0xFC	; 252
    138c:	ac 01       	movw	r20, r24
    138e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1390:	99 27       	eor	r25, r25
    1392:	87 fd       	sbrc	r24, 7
    1394:	90 95       	com	r25
    1396:	fc 01       	movw	r30, r24
    1398:	e5 57       	subi	r30, 0x75	; 117
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	20 81       	ld	r18, Z
    139e:	ca 01       	movw	r24, r20
    13a0:	62 2f       	mov	r22, r18
    13a2:	0e 94 ac 05 	call	0xb58	; 0xb58 <EEPROM_writeByte>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a8 e4       	ldi	r26, 0x48	; 72
    13ac:	b2 e4       	ldi	r27, 0x42	; 66
    13ae:	89 8f       	std	Y+25, r24	; 0x19
    13b0:	9a 8f       	std	Y+26, r25	; 0x1a
    13b2:	ab 8f       	std	Y+27, r26	; 0x1b
    13b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	69 8d       	ldd	r22, Y+25	; 0x19
    13b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a e7       	ldi	r20, 0x7A	; 122
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8d 8b       	std	Y+21, r24	; 0x15
    13d0:	9e 8b       	std	Y+22, r25	; 0x16
    13d2:	af 8b       	std	Y+23, r26	; 0x17
    13d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d6:	6d 89       	ldd	r22, Y+21	; 0x15
    13d8:	7e 89       	ldd	r23, Y+22	; 0x16
    13da:	8f 89       	ldd	r24, Y+23	; 0x17
    13dc:	98 8d       	ldd	r25, Y+24	; 0x18
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <main+0x342>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9c 8b       	std	Y+20, r25	; 0x14
    13f4:	8b 8b       	std	Y+19, r24	; 0x13
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <main+0x3c0>
	else if (__tmp > 65535)
    13f8:	6d 89       	ldd	r22, Y+21	; 0x15
    13fa:	7e 89       	ldd	r23, Y+22	; 0x16
    13fc:	8f 89       	ldd	r24, Y+23	; 0x17
    13fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <main+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	69 8d       	ldd	r22, Y+25	; 0x19
    1412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9c 8b       	std	Y+20, r25	; 0x14
    1436:	8b 8b       	std	Y+19, r24	; 0x13
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <main+0x3a2>
    143a:	89 e1       	ldi	r24, 0x19	; 25
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9a 8b       	std	Y+18, r25	; 0x12
    1440:	89 8b       	std	Y+17, r24	; 0x11
    1442:	89 89       	ldd	r24, Y+17	; 0x11
    1444:	9a 89       	ldd	r25, Y+18	; 0x12
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <main+0x390>
    144a:	9a 8b       	std	Y+18, r25	; 0x12
    144c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8b 89       	ldd	r24, Y+19	; 0x13
    1450:	9c 89       	ldd	r25, Y+20	; 0x14
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9c 8b       	std	Y+20, r25	; 0x14
    1456:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8b 89       	ldd	r24, Y+19	; 0x13
    145a:	9c 89       	ldd	r25, Y+20	; 0x14
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <main+0x384>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <main+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6d 89       	ldd	r22, Y+21	; 0x15
    1464:	7e 89       	ldd	r23, Y+22	; 0x16
    1466:	8f 89       	ldd	r24, Y+23	; 0x17
    1468:	98 8d       	ldd	r25, Y+24	; 0x18
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c 8b       	std	Y+20, r25	; 0x14
    1474:	8b 8b       	std	Y+19, r24	; 0x13
    1476:	8b 89       	ldd	r24, Y+19	; 0x13
    1478:	9c 89       	ldd	r25, Y+20	; 0x14
    147a:	98 8b       	std	Y+16, r25	; 0x10
    147c:	8f 87       	std	Y+15, r24	; 0x0f
    147e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1480:	98 89       	ldd	r25, Y+16	; 0x10
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <main+0x3cc>
    1486:	98 8b       	std	Y+16, r25	; 0x10
    1488:	8f 87       	std	Y+15, r24	; 0x0f
					 _delay_ms(50);
					 i++;
    148a:	8c a5       	ldd	r24, Y+44	; 0x2c
    148c:	8f 5f       	subi	r24, 0xFF	; 255
    148e:	8c a7       	std	Y+44, r24	; 0x2c
			}

			else if(screen == 1)
			{
				sint8 i = 0 ;
				while (newPassword[i] != '\0')
    1490:	8c a5       	ldd	r24, Y+44	; 0x2c
    1492:	99 27       	eor	r25, r25
    1494:	87 fd       	sbrc	r24, 7
    1496:	90 95       	com	r25
    1498:	fc 01       	movw	r30, r24
    149a:	e5 57       	subi	r30, 0x75	; 117
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 81       	ld	r24, Z
    14a0:	88 23       	and	r24, r24
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <main+0x3f0>
    14a4:	6d cf       	rjmp	.-294    	; 0x1380 <main+0x2ca>
				{
					 EEPROM_writeByte(FIRST_LOC_EEPROM +i , newPassword[i]);
					 _delay_ms(50);
					 i++;
				}
				screen = 0;
    14a6:	10 92 75 00 	sts	0x0075, r1
    14aa:	31 cf       	rjmp	.-414    	; 0x130e <main+0x258>
			}
			else if(screen == 2)
    14ac:	80 91 75 00 	lds	r24, 0x0075
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <main+0x400>
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <main+0x4b2>
			{
				EEPROM_readPassword(buffer,N);
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	65 e0       	ldi	r22, 0x05	; 5
    14bc:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EEPROM_readPassword>
				checkPassword = PW_checkPassword(buffer , openPassword);
    14c0:	80 e8       	ldi	r24, 0x80	; 128
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	2b e7       	ldi	r18, 0x7B	; 123
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	b9 01       	movw	r22, r18
    14ca:	0e 94 19 08 	call	0x1032	; 0x1032 <PW_checkPassword>
    14ce:	80 93 8a 00 	sts	0x008A, r24
				if(checkPassword == TRUE)
    14d2:	80 91 8a 00 	lds	r24, 0x008A
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	f1 f4       	brne	.+60     	; 0x1516 <main+0x460>
				{
					UART_sendByte(CORRECT_PW);
    14da:	8f e0       	ldi	r24, 0x0F	; 15
    14dc:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_sendByte>
					ROTATE_motorClockwise();
    14e0:	0e 94 c9 07 	call	0xf92	; 0xf92 <ROTATE_motorClockwise>
					ACTIVATE_timer0(&timer0);
    14e4:	ce 01       	movw	r24, r28
    14e6:	c5 96       	adiw	r24, 0x35	; 53
    14e8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ACTIVATE_timer0>
					while(seconds != 10);
    14ec:	80 91 77 00 	lds	r24, 0x0077
    14f0:	8a 30       	cpi	r24, 0x0A	; 10
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <main+0x436>
					ROTATE_motorAntiClockwise();
    14f4:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <ROTATE_motorAntiClockwise>
					ACTIVATE_timer0(&timer0);
    14f8:	ce 01       	movw	r24, r28
    14fa:	c5 96       	adiw	r24, 0x35	; 53
    14fc:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ACTIVATE_timer0>
					while(seconds != 10);
    1500:	80 91 77 00 	lds	r24, 0x0077
    1504:	8a 30       	cpi	r24, 0x0A	; 10
    1506:	e1 f7       	brne	.-8      	; 0x1500 <main+0x44a>
					STOP_motor();
    1508:	0e 94 9e 07 	call	0xf3c	; 0xf3c <STOP_motor>
					wrongCount = 0;
    150c:	10 92 76 00 	sts	0x0076, r1
					screen = 0;
    1510:	10 92 75 00 	sts	0x0075, r1
    1514:	fc ce       	rjmp	.-520    	; 0x130e <main+0x258>

				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
    1516:	8c e0       	ldi	r24, 0x0C	; 12
    1518:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_sendByte>
					wrongCount++;
    151c:	80 91 76 00 	lds	r24, 0x0076
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	80 93 76 00 	sts	0x0076, r24
					if(wrongCount == 3)
    1526:	80 91 76 00 	lds	r24, 0x0076
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	d1 f4       	brne	.+52     	; 0x1562 <main+0x4ac>
					{
						PORTD |= (1<<PD7);
    152e:	a2 e3       	ldi	r26, 0x32	; 50
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e2 e3       	ldi	r30, 0x32	; 50
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	80 68       	ori	r24, 0x80	; 128
    153a:	8c 93       	st	X, r24
						ACTIVATE_timer0(&timer0);
    153c:	ce 01       	movw	r24, r28
    153e:	c5 96       	adiw	r24, 0x35	; 53
    1540:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ACTIVATE_timer0>
						while(seconds != 10);
    1544:	80 91 77 00 	lds	r24, 0x0077
    1548:	8a 30       	cpi	r24, 0x0A	; 10
    154a:	e1 f7       	brne	.-8      	; 0x1544 <main+0x48e>
						PORTD &= ~(1<<PD7);
    154c:	a2 e3       	ldi	r26, 0x32	; 50
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e2 e3       	ldi	r30, 0x32	; 50
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 77       	andi	r24, 0x7F	; 127
    1558:	8c 93       	st	X, r24
						wrongCount = 0;
    155a:	10 92 76 00 	sts	0x0076, r1
						screen = 0;
    155e:	10 92 75 00 	sts	0x0075, r1
					}
					screen = 0;
    1562:	10 92 75 00 	sts	0x0075, r1
    1566:	d3 ce       	rjmp	.-602    	; 0x130e <main+0x258>
				}

			}
			else if (screen == 3)
    1568:	80 91 75 00 	lds	r24, 0x0075
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	09 f0       	breq	.+2      	; 0x1572 <main+0x4bc>
    1570:	ce ce       	rjmp	.-612    	; 0x130e <main+0x258>
			{
				EEPROM_readPassword(buffer,N);
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	0e 94 4d 06 	call	0xc9a	; 0xc9a <EEPROM_readPassword>
				checkPassword = PW_checkPassword(buffer , openPassword);
    157c:	80 e8       	ldi	r24, 0x80	; 128
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	2b e7       	ldi	r18, 0x7B	; 123
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	b9 01       	movw	r22, r18
    1586:	0e 94 19 08 	call	0x1032	; 0x1032 <PW_checkPassword>
    158a:	80 93 8a 00 	sts	0x008A, r24
				if(checkPassword == TRUE)
    158e:	80 91 8a 00 	lds	r24, 0x008A
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	09 f0       	breq	.+2      	; 0x1598 <main+0x4e2>
    1596:	a5 c0       	rjmp	.+330    	; 0x16e2 <main+0x62c>
				{
					UART_sendByte(CORRECT_PW);
    1598:	8f e0       	ldi	r24, 0x0F	; 15
    159a:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_sendByte>
					while(UART_receiveByte() != NEW_PASSWORD );
    159e:	0e 94 5f 0c 	call	0x18be	; 0x18be <UART_receiveByte>
    15a2:	80 31       	cpi	r24, 0x10	; 16
    15a4:	e1 f7       	brne	.-8      	; 0x159e <main+0x4e8>
					UART_receiveString(changePassword);
    15a6:	85 e8       	ldi	r24, 0x85	; 133
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 99 0c 	call	0x1932	; 0x1932 <UART_receiveString>
					sint8 i = 0 ;
    15ae:	1b a6       	std	Y+43, r1	; 0x2b
    15b0:	88 c0       	rjmp	.+272    	; 0x16c2 <main+0x60c>
					while (changePassword[i] != '\0')
					{
						 EEPROM_writeByte(FIRST_LOC_EEPROM +i , changePassword[i]);
    15b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b4:	99 27       	eor	r25, r25
    15b6:	87 fd       	sbrc	r24, 7
    15b8:	90 95       	com	r25
    15ba:	8f 5e       	subi	r24, 0xEF	; 239
    15bc:	9c 4f       	sbci	r25, 0xFC	; 252
    15be:	ac 01       	movw	r20, r24
    15c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15c2:	99 27       	eor	r25, r25
    15c4:	87 fd       	sbrc	r24, 7
    15c6:	90 95       	com	r25
    15c8:	fc 01       	movw	r30, r24
    15ca:	eb 57       	subi	r30, 0x7B	; 123
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	20 81       	ld	r18, Z
    15d0:	ca 01       	movw	r24, r20
    15d2:	62 2f       	mov	r22, r18
    15d4:	0e 94 ac 05 	call	0xb58	; 0xb58 <EEPROM_writeByte>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a8 e4       	ldi	r26, 0x48	; 72
    15de:	b2 e4       	ldi	r27, 0x42	; 66
    15e0:	8b 87       	std	Y+11, r24	; 0x0b
    15e2:	9c 87       	std	Y+12, r25	; 0x0c
    15e4:	ad 87       	std	Y+13, r26	; 0x0d
    15e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	4a e7       	ldi	r20, 0x7A	; 122
    15f6:	53 e4       	ldi	r21, 0x43	; 67
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	8f 83       	std	Y+7, r24	; 0x07
    1602:	98 87       	std	Y+8, r25	; 0x08
    1604:	a9 87       	std	Y+9, r26	; 0x09
    1606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1608:	6f 81       	ldd	r22, Y+7	; 0x07
    160a:	78 85       	ldd	r23, Y+8	; 0x08
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	5f e3       	ldi	r21, 0x3F	; 63
    1618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161c:	88 23       	and	r24, r24
    161e:	2c f4       	brge	.+10     	; 0x162a <main+0x574>
		__ticks = 1;
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	3f c0       	rjmp	.+126    	; 0x16a8 <main+0x5f2>
	else if (__tmp > 65535)
    162a:	6f 81       	ldd	r22, Y+7	; 0x07
    162c:	78 85       	ldd	r23, Y+8	; 0x08
    162e:	89 85       	ldd	r24, Y+9	; 0x09
    1630:	9a 85       	ldd	r25, Y+10	; 0x0a
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	3f ef       	ldi	r19, 0xFF	; 255
    1636:	4f e7       	ldi	r20, 0x7F	; 127
    1638:	57 e4       	ldi	r21, 0x47	; 71
    163a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    163e:	18 16       	cp	r1, r24
    1640:	4c f5       	brge	.+82     	; 0x1694 <main+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1642:	6b 85       	ldd	r22, Y+11	; 0x0b
    1644:	7c 85       	ldd	r23, Y+12	; 0x0c
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	51 e4       	ldi	r21, 0x41	; 65
    1652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	9e 83       	std	Y+6, r25	; 0x06
    1668:	8d 83       	std	Y+5, r24	; 0x05
    166a:	0f c0       	rjmp	.+30     	; 0x168a <main+0x5d4>
    166c:	89 e1       	ldi	r24, 0x19	; 25
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 83       	std	Y+4, r25	; 0x04
    1672:	8b 83       	std	Y+3, r24	; 0x03
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <main+0x5c2>
    167c:	9c 83       	std	Y+4, r25	; 0x04
    167e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	69 f7       	brne	.-38     	; 0x166c <main+0x5b6>
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <main+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1694:	6f 81       	ldd	r22, Y+7	; 0x07
    1696:	78 85       	ldd	r23, Y+8	; 0x08
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	f1 f7       	brne	.-4      	; 0x16b4 <main+0x5fe>
    16b8:	9a 83       	std	Y+2, r25	; 0x02
    16ba:	89 83       	std	Y+1, r24	; 0x01
						 _delay_ms(50);
						 i++;
    16bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	8b a7       	std	Y+43, r24	; 0x2b
				{
					UART_sendByte(CORRECT_PW);
					while(UART_receiveByte() != NEW_PASSWORD );
					UART_receiveString(changePassword);
					sint8 i = 0 ;
					while (changePassword[i] != '\0')
    16c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c4:	99 27       	eor	r25, r25
    16c6:	87 fd       	sbrc	r24, 7
    16c8:	90 95       	com	r25
    16ca:	fc 01       	movw	r30, r24
    16cc:	eb 57       	subi	r30, 0x7B	; 123
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	09 f0       	breq	.+2      	; 0x16d8 <main+0x622>
    16d6:	6d cf       	rjmp	.-294    	; 0x15b2 <main+0x4fc>
					{
						 EEPROM_writeByte(FIRST_LOC_EEPROM +i , changePassword[i]);
						 _delay_ms(50);
						 i++;
					}
					wrongCount = 0;
    16d8:	10 92 76 00 	sts	0x0076, r1
					screen = 0;
    16dc:	10 92 75 00 	sts	0x0075, r1
    16e0:	16 ce       	rjmp	.-980    	; 0x130e <main+0x258>
				}
				else
				{
					UART_sendByte(WRONG_PASSWORD);
    16e2:	8c e0       	ldi	r24, 0x0C	; 12
    16e4:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_sendByte>
					wrongCount++;
    16e8:	80 91 76 00 	lds	r24, 0x0076
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 93 76 00 	sts	0x0076, r24
					if(wrongCount == 3)
    16f2:	80 91 76 00 	lds	r24, 0x0076
    16f6:	83 30       	cpi	r24, 0x03	; 3
    16f8:	d1 f4       	brne	.+52     	; 0x172e <main+0x678>
					{
						PORTD |= (1<<PD3);
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 60       	ori	r24, 0x08	; 8
    1706:	8c 93       	st	X, r24
						ACTIVATE_timer0(&timer0);
    1708:	ce 01       	movw	r24, r28
    170a:	c5 96       	adiw	r24, 0x35	; 53
    170c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <ACTIVATE_timer0>
						while(seconds != 10);
    1710:	80 91 77 00 	lds	r24, 0x0077
    1714:	8a 30       	cpi	r24, 0x0A	; 10
    1716:	e1 f7       	brne	.-8      	; 0x1710 <main+0x65a>
						PORTD &= ~(1<<PD3);
    1718:	a2 e3       	ldi	r26, 0x32	; 50
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	87 7f       	andi	r24, 0xF7	; 247
    1724:	8c 93       	st	X, r24
						wrongCount = 0;
    1726:	10 92 76 00 	sts	0x0076, r1
						screen = 0;
    172a:	10 92 75 00 	sts	0x0075, r1
					}
				screen = 0;
    172e:	10 92 75 00 	sts	0x0075, r1
    1732:	ed cd       	rjmp	.-1062   	; 0x130e <main+0x258>

00001734 <UART_init>:
 * Function Name : UART_init
 * Description   : This Function is responsible for setting the USART Registers (UCSRA- UCSRB- UCSRC)
 * Arguments     : A Pointer to Structure
 * Return        : None
 **************************************************************************************************************/
void UART_init(const UCSRBC_init *DataPtr){
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	00 d0       	rcall	.+0      	; 0x173a <UART_init+0x6>
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
	 *    2- Parity Mode (UPM1:0)
	 *    3- Stop Bit (USBS)
	 *    4- Clock Polarity (UCPOL)
	 */
    #if(ASYNCHRONOUS_DOUBLE_SPEED_MODE_ACTIVATION ==1)
	   UCSRA = 1<<U2X;
    1742:	eb e2       	ldi	r30, 0x2B	; 43
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	80 83       	st	Z, r24
    #endif
	UCSRB  = ( 1<<TXEN ) | ( 1<<RXEN );
    174a:	ea e2       	ldi	r30, 0x2A	; 42
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	88 e1       	ldi	r24, 0x18	; 24
    1750:	80 83       	st	Z, r24
	UCSRB |= (UCSRB & 0xFB) | ((DataPtr-> Data_mode));
    1752:	aa e2       	ldi	r26, 0x2A	; 42
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e2       	ldi	r30, 0x2A	; 42
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	ea e2       	ldi	r30, 0x2A	; 42
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	98 2f       	mov	r25, r24
    1766:	9b 7f       	andi	r25, 0xFB	; 251
    1768:	e9 81       	ldd	r30, Y+1	; 0x01
    176a:	fa 81       	ldd	r31, Y+2	; 0x02
    176c:	80 81       	ld	r24, Z
    176e:	89 2b       	or	r24, r25
    1770:	82 2b       	or	r24, r18
    1772:	8c 93       	st	X, r24
	UCSRC |= (1<<URSEL);
    1774:	a0 e4       	ldi	r26, 0x40	; 64
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e0 e4       	ldi	r30, 0x40	; 64
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 68       	ori	r24, 0x80	; 128
    1780:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF9) | ((DataPtr-> Data_mode) <<1);
    1782:	a0 e4       	ldi	r26, 0x40	; 64
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e0 e4       	ldi	r30, 0x40	; 64
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	38 2f       	mov	r19, r24
    178e:	e0 e4       	ldi	r30, 0x40	; 64
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	28 2f       	mov	r18, r24
    1796:	29 7f       	andi	r18, 0xF9	; 249
    1798:	e9 81       	ldd	r30, Y+1	; 0x01
    179a:	fa 81       	ldd	r31, Y+2	; 0x02
    179c:	80 81       	ld	r24, Z
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	82 2b       	or	r24, r18
    17a8:	83 2b       	or	r24, r19
    17aa:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xBF) | ((DataPtr->Usart_mode) <<6);
    17ac:	a0 e4       	ldi	r26, 0x40	; 64
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e0 e4       	ldi	r30, 0x40	; 64
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	38 2f       	mov	r19, r24
    17b8:	e0 e4       	ldi	r30, 0x40	; 64
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	28 2f       	mov	r18, r24
    17c0:	2f 7b       	andi	r18, 0xBF	; 191
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	81 81       	ldd	r24, Z+1	; 0x01
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	00 24       	eor	r0, r0
    17ce:	96 95       	lsr	r25
    17d0:	87 95       	ror	r24
    17d2:	07 94       	ror	r0
    17d4:	96 95       	lsr	r25
    17d6:	87 95       	ror	r24
    17d8:	07 94       	ror	r0
    17da:	98 2f       	mov	r25, r24
    17dc:	80 2d       	mov	r24, r0
    17de:	82 2b       	or	r24, r18
    17e0:	83 2b       	or	r24, r19
    17e2:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xCF) | ((DataPtr->parity_mode) <<4);
    17e4:	a0 e4       	ldi	r26, 0x40	; 64
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e0 e4       	ldi	r30, 0x40	; 64
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	38 2f       	mov	r19, r24
    17f0:	e0 e4       	ldi	r30, 0x40	; 64
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	28 2f       	mov	r18, r24
    17f8:	2f 7c       	andi	r18, 0xCF	; 207
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	82 95       	swap	r24
    1806:	92 95       	swap	r25
    1808:	90 7f       	andi	r25, 0xF0	; 240
    180a:	98 27       	eor	r25, r24
    180c:	80 7f       	andi	r24, 0xF0	; 240
    180e:	98 27       	eor	r25, r24
    1810:	82 2b       	or	r24, r18
    1812:	83 2b       	or	r24, r19
    1814:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xF7) | ((DataPtr->stopbit) <<3);
    1816:	a0 e4       	ldi	r26, 0x40	; 64
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	e0 e4       	ldi	r30, 0x40	; 64
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	38 2f       	mov	r19, r24
    1822:	e0 e4       	ldi	r30, 0x40	; 64
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	28 2f       	mov	r18, r24
    182a:	27 7f       	andi	r18, 0xF7	; 247
    182c:	e9 81       	ldd	r30, Y+1	; 0x01
    182e:	fa 81       	ldd	r31, Y+2	; 0x02
    1830:	83 81       	ldd	r24, Z+3	; 0x03
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	82 2b       	or	r24, r18
    1844:	83 2b       	or	r24, r19
    1846:	8c 93       	st	X, r24
	UCSRC |= (UCSRC & 0xFE) | (DataPtr->clock_Polarity);
    1848:	a0 e4       	ldi	r26, 0x40	; 64
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e0 e4       	ldi	r30, 0x40	; 64
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	28 2f       	mov	r18, r24
    1854:	e0 e4       	ldi	r30, 0x40	; 64
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	98 2f       	mov	r25, r24
    185c:	9e 7f       	andi	r25, 0xFE	; 254
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	89 2b       	or	r24, r25
    1866:	82 2b       	or	r24, r18
    1868:	8c 93       	st	X, r24
	UBRRH  = UBRR_value >>8;
    186a:	e0 e4       	ldi	r30, 0x40	; 64
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	10 82       	st	Z, r1
	UBRRL  = UBRR_value;
    1870:	e9 e2       	ldi	r30, 0x29	; 41
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	8c e0       	ldi	r24, 0x0C	; 12
    1876:	80 83       	st	Z, r24





}
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <UART_sendByte>:
 * Function Name : UART_sendByte
 * Description   : This Function is responsible for sending a byte through the UART Transmitter
 * Arguments     : Data
 * Return        : None
 *************************************************************************************************************/
void UART_sendByte( char data){
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	0f 92       	push	r0
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * 1- Set the data into the USART DATA REGISTER UDR-> Data
	 * 2- Wait until the Transmit complete flag is 1 meaning that data is fully transmitted.
	 * 3- Finally Clear the Transmitter flag by setting it to  1  TXC -> 1
	 */
	UDR=data;
    188e:	ec e2       	ldi	r30, 0x2C	; 44
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	80 83       	st	Z, r24
	while(((UCSRA) & (1<<TXC))==0);
    1896:	eb e2       	ldi	r30, 0x2B	; 43
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	80 74       	andi	r24, 0x40	; 64
    18a2:	90 70       	andi	r25, 0x00	; 0
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	b9 f3       	breq	.-18     	; 0x1896 <UART_sendByte+0x14>
    UCSRA |= (1<<TXC);
    18a8:	ab e2       	ldi	r26, 0x2B	; 43
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e2       	ldi	r30, 0x2B	; 43
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	80 64       	ori	r24, 0x40	; 64
    18b4:	8c 93       	st	X, r24

}
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <UART_receiveByte>:
 * Function Name : UART_sendByte
 * Description   : This Function is responsible for receiving a byte through the UART Receiver.
 * Arguments     : None
 * Return        : UDR value (1 Byte -> char)
 **************************************************************************************************************/
char UART_receiveByte(){
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * 1- Wait until the Receive complete flag is 1 meaning that data is fully received.
	 * 2- Read the value of the UDR (Return the value of the USART DATA REGISTER).
	 */
	while(((UCSRA) & (1<<RXC))==0);
    18c6:	eb e2       	ldi	r30, 0x2B	; 43
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	88 23       	and	r24, r24
    18ce:	dc f7       	brge	.-10     	; 0x18c6 <UART_receiveByte+0x8>
	return UDR;
    18d0:	ec e2       	ldi	r30, 0x2C	; 44
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z

}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <UART_sendString>:
 * Arguments     : Pointer to Character
 *                 The Function is passed an address which is the address of the String array
 *                 so it is carried by a pointer to character.
 * Return        : None
 *************************************************************************************************************/
void UART_sendString( char* dataa){
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <UART_sendString+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <UART_sendString+0x8>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
	 * 1- Initialise the Counter to zero
	 * 2- Keep looping in the string array until you reach '\0' character which indicates the end of the string.
	 * 3- Call the UART_sendByte() Function and pass each character from the string.
	 * 4- Increment the Counter.
	 */
	int i=0;
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	19 82       	std	Y+1, r1	; 0x01
    18f0:	0f c0       	rjmp	.+30     	; 0x1910 <UART_sendString+0x34>
	while(dataa[i] !='\0'){
		UART_sendByte(dataa[i]);
    18f2:	29 81       	ldd	r18, Y+1	; 0x01
    18f4:	3a 81       	ldd	r19, Y+2	; 0x02
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	fc 01       	movw	r30, r24
    18fc:	e2 0f       	add	r30, r18
    18fe:	f3 1f       	adc	r31, r19
    1900:	80 81       	ld	r24, Z
    1902:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_sendByte>
		i++;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	 * 2- Keep looping in the string array until you reach '\0' character which indicates the end of the string.
	 * 3- Call the UART_sendByte() Function and pass each character from the string.
	 * 4- Increment the Counter.
	 */
	int i=0;
	while(dataa[i] !='\0'){
    1910:	29 81       	ldd	r18, Y+1	; 0x01
    1912:	3a 81       	ldd	r19, Y+2	; 0x02
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	fc 01       	movw	r30, r24
    191a:	e2 0f       	add	r30, r18
    191c:	f3 1f       	adc	r31, r19
    191e:	80 81       	ld	r24, Z
    1920:	88 23       	and	r24, r24
    1922:	39 f7       	brne	.-50     	; 0x18f2 <UART_sendString+0x16>
		UART_sendByte(dataa[i]);
		i++;
	}

}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <UART_receiveString>:
 * Function Name : UART_receiveString
 * Description   : This Function is responsible for receiving a String through the UART Receiver.
 * Arguments     : None
 * Return        : None
 **************************************************************************************************************/
void UART_receiveString(char *dataa){
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <UART_receiveString+0xa>
    193c:	00 d0       	rcall	.+0      	; 0x193e <UART_receiveString+0xc>
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
	*      4.1 Increment the counter.
	*      4.2 Call the UART_receiveByte() function and put the byte in string array.
	* 5- After exiting the Loop replace the '#' character with '\0' character.
	*/

	int i=0;
    1946:	1a 82       	std	Y+2, r1	; 0x02
    1948:	19 82       	std	Y+1, r1	; 0x01
	dataa[i]=UART_receiveByte();
    194a:	29 81       	ldd	r18, Y+1	; 0x01
    194c:	3a 81       	ldd	r19, Y+2	; 0x02
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	8c 01       	movw	r16, r24
    1954:	02 0f       	add	r16, r18
    1956:	13 1f       	adc	r17, r19
    1958:	0e 94 5f 0c 	call	0x18be	; 0x18be <UART_receiveByte>
    195c:	f8 01       	movw	r30, r16
    195e:	80 83       	st	Z, r24
    1960:	10 c0       	rjmp	.+32     	; 0x1982 <UART_receiveString+0x50>
	while(dataa[i] !='#'){
		i++;
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	9a 83       	std	Y+2, r25	; 0x02
    196a:	89 83       	std	Y+1, r24	; 0x01
		dataa[i]=UART_receiveByte();
    196c:	29 81       	ldd	r18, Y+1	; 0x01
    196e:	3a 81       	ldd	r19, Y+2	; 0x02
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	8c 01       	movw	r16, r24
    1976:	02 0f       	add	r16, r18
    1978:	13 1f       	adc	r17, r19
    197a:	0e 94 5f 0c 	call	0x18be	; 0x18be <UART_receiveByte>
    197e:	f8 01       	movw	r30, r16
    1980:	80 83       	st	Z, r24
	* 5- After exiting the Loop replace the '#' character with '\0' character.
	*/

	int i=0;
	dataa[i]=UART_receiveByte();
	while(dataa[i] !='#'){
    1982:	29 81       	ldd	r18, Y+1	; 0x01
    1984:	3a 81       	ldd	r19, Y+2	; 0x02
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	fc 01       	movw	r30, r24
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	80 81       	ld	r24, Z
    1992:	83 32       	cpi	r24, 0x23	; 35
    1994:	31 f7       	brne	.-52     	; 0x1962 <UART_receiveString+0x30>
		i++;
		dataa[i]=UART_receiveByte();
	}
	dataa[i]='\0';
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	2b 81       	ldd	r18, Y+3	; 0x03
    199c:	3c 81       	ldd	r19, Y+4	; 0x04
    199e:	f9 01       	movw	r30, r18
    19a0:	e8 0f       	add	r30, r24
    19a2:	f9 1f       	adc	r31, r25
    19a4:	10 82       	st	Z, r1
}
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <ISR>:
int count=0;


/******************************************* Interrupt Service Routines ***************************************/

ISR(TIMER0_OVF_vect){
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <ISR+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <ISR+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
count++;
    19c8:	80 91 79 00 	lds	r24, 0x0079
    19cc:	90 91 7a 00 	lds	r25, 0x007A
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	90 93 7a 00 	sts	0x007A, r25
    19d6:	80 93 79 00 	sts	0x0079, r24
   if(count ==144){
    19da:	80 91 79 00 	lds	r24, 0x0079
    19de:	90 91 7a 00 	lds	r25, 0x007A
    19e2:	80 39       	cpi	r24, 0x90	; 144
    19e4:	91 05       	cpc	r25, r1
    19e6:	69 f4       	brne	.+26     	; 0x1a02 <ISR+0x4a>
	count=0;
    19e8:	10 92 7a 00 	sts	0x007A, r1
    19ec:	10 92 79 00 	sts	0x0079, r1
	seconds++;
    19f0:	80 91 77 00 	lds	r24, 0x0077
    19f4:	90 91 78 00 	lds	r25, 0x0078
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	90 93 78 00 	sts	0x0078, r25
    19fe:	80 93 77 00 	sts	0x0077, r24
   }
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <SET_timer0>:
 *                  that carries the information of Timer 0.
 * Return         : None
 **************************************************************************************************************/

void SET_timer0(const Timer0_setup* Timer0_Data)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <SET_timer0+0x6>
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
	  *
	  * TIMSK :
	  *   Set the Interrupt Enables according to the activated mode in the Timer 0.
	  */

	if(Timer0_Data->Timer_zeroMode != 1){
    1a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a20:	fa 81       	ldd	r31, Y+2	; 0x02
    1a22:	80 81       	ld	r24, Z
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <SET_timer0+0x26>
       TCCR0 |=1 << FOC0 ;
    1a28:	a3 e5       	ldi	r26, 0x53	; 83
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e3 e5       	ldi	r30, 0x53	; 83
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	80 68       	ori	r24, 0x80	; 128
    1a34:	8c 93       	st	X, r24

	}
	TCCR0 |= (TCCR0 & 0xB7) | (Timer0_Data->Timer_zeroMode << 3) | (Timer0_Data->Timer_zeroMode << 5);
    1a36:	a3 e5       	ldi	r26, 0x53	; 83
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	38 2f       	mov	r19, r24
    1a42:	e3 e5       	ldi	r30, 0x53	; 83
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	28 2f       	mov	r18, r24
    1a4a:	27 7b       	andi	r18, 0xB7	; 183
    1a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a50:	80 81       	ld	r24, Z
    1a52:	88 2f       	mov	r24, r24
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	28 2b       	or	r18, r24
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	82 95       	swap	r24
    1a74:	92 95       	swap	r25
    1a76:	90 7f       	andi	r25, 0xF0	; 240
    1a78:	98 27       	eor	r25, r24
    1a7a:	80 7f       	andi	r24, 0xF0	; 240
    1a7c:	98 27       	eor	r25, r24
    1a7e:	82 2b       	or	r24, r18
    1a80:	83 2b       	or	r24, r19
    1a82:	8c 93       	st	X, r24
	TCCR0 |= (TCCR0 & 0xCF) | (Timer0_Data->Timer0_mode);
    1a84:	a3 e5       	ldi	r26, 0x53	; 83
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e3 e5       	ldi	r30, 0x53	; 83
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	28 2f       	mov	r18, r24
    1a90:	e3 e5       	ldi	r30, 0x53	; 83
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	98 2f       	mov	r25, r24
    1a98:	9f 7c       	andi	r25, 0xCF	; 207
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	81 81       	ldd	r24, Z+1	; 0x01
    1aa0:	89 2b       	or	r24, r25
    1aa2:	82 2b       	or	r24, r18
    1aa4:	8c 93       	st	X, r24
	//TCCR0 |= (TCCR0 & 0xF8) | (Timer0_Data->Clock0);
	if(Timer0_Data->Timer_zeroMode == 0){
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 23       	and	r24, r24
    1aae:	41 f4       	brne	.+16     	; 0x1ac0 <SET_timer0+0xb0>
		TIMSK |= (1<<TOIE0);
    1ab0:	a9 e5       	ldi	r26, 0x59	; 89
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e9 e5       	ldi	r30, 0x59	; 89
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	8c 93       	st	X, r24
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <SET_timer0+0xc4>
	}
	else{
		TIMSK |= (1<<OCIE0);
    1ac0:	a9 e5       	ldi	r26, 0x59	; 89
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e9 e5       	ldi	r30, 0x59	; 89
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	82 60       	ori	r24, 0x02	; 2
    1acc:	8c 93       	st	X, r24
		OCR0 =OUTPUT_COMPARE_MATCH_REGISTER0 ;
    1ace:	ec e5       	ldi	r30, 0x5C	; 92
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	10 82       	st	Z, r1
	}

	TCNT0=TIMER_COUNTER_INITIAL_VALUE;
    1ad4:	e2 e5       	ldi	r30, 0x52	; 82
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	10 82       	st	Z, r1
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <ACTIVATE_timer0>:
 * Description    : This Function is responsible for giving clock to Timer 0.
 * Arguments      : Constant Pointer to Structure to carry the address of the Structure
 *                  that carries the information of Timer 0.
 * Return         : None.
 **************************************************************************************************************/
void ACTIVATE_timer0(const Timer0_setup* Timer0_Data){
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <ACTIVATE_timer0+0x6>
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |= (TCCR0 & 0xF8) | (Timer0_Data->Clock0);
    1af2:	a3 e5       	ldi	r26, 0x53	; 83
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e3 e5       	ldi	r30, 0x53	; 83
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	28 2f       	mov	r18, r24
    1afe:	e3 e5       	ldi	r30, 0x53	; 83
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	98 2f       	mov	r25, r24
    1b06:	98 7f       	andi	r25, 0xF8	; 248
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	89 2b       	or	r24, r25
    1b10:	82 2b       	or	r24, r18
    1b12:	8c 93       	st	X, r24
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <DEACTIVATE_timer0>:
 * Function Name  : DEACTIVATE_timer0
 * Description    : This Function is responsible for stop clock to Timer 0.
 * Arguments      : None.
 * Return         : None.
 **************************************************************************************************************/
void DEACTIVATE_timer0(){
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (TCCR0 & 0xF8) | (0);
    1b26:	a3 e5       	ldi	r26, 0x53	; 83
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e3 e5       	ldi	r30, 0x53	; 83
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	98 2f       	mov	r25, r24
    1b32:	e3 e5       	ldi	r30, 0x53	; 83
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	88 7f       	andi	r24, 0xF8	; 248
    1b3a:	89 2b       	or	r24, r25
    1b3c:	8c 93       	st	X, r24
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <SET_timer1>:
 * Description   : This Function is responsible for setting the registers of timer 1
 * Arguments     : Constant Pointer to Structure to carry the address of the Structure
 *                 that carries the information of Timer 1.
 * Return        : None
 **************************************************************************************************************/
void SET_timer1(const Timer1_setup* Timer1_Data){
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <SET_timer1+0x6>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
  * TIMSK :
  *   Set the Interrupt Enables according to the activated mode in the Timer 1.
  */


 if((Timer1_Data->Timer_oneMode != 1)||(Timer1_Data->Timer_oneMode != 2)||(Timer1_Data->Timer_oneMode != 3)){
    1b52:	e9 81       	ldd	r30, Y+1	; 0x01
    1b54:	fa 81       	ldd	r31, Y+2	; 0x02
    1b56:	80 81       	ld	r24, Z
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	51 f4       	brne	.+20     	; 0x1b70 <SET_timer1+0x2c>
    1b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b60:	80 81       	ld	r24, Z
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	29 f4       	brne	.+10     	; 0x1b70 <SET_timer1+0x2c>
    1b66:	e9 81       	ldd	r30, Y+1	; 0x01
    1b68:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6a:	80 81       	ld	r24, Z
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	39 f0       	breq	.+14     	; 0x1b7e <SET_timer1+0x3a>
        #if( (TIMER1_CHANNEL_A  == 1 )&& (TIMER1_CHANNEL_B == 0 ))
		TCCR1A |=1 << FOC1A ;
    1b70:	af e4       	ldi	r26, 0x4F	; 79
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ef e4       	ldi	r30, 0x4F	; 79
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 60       	ori	r24, 0x08	; 8
    1b7c:	8c 93       	st	X, r24
	    TCCR1A |=(1 << FOC1A) | (1 << FOC1B );
        #endif
	}

  #if( (TIMER1_CHANNEL_A  == 1 )&& (TIMER1_CHANNEL_B == 0 ))
	TCCR1A |= (TCCR1A & 0x3F)|(Timer1_Data->Timer1_mode <<6) ;
    1b7e:	af e4       	ldi	r26, 0x4F	; 79
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ef e4       	ldi	r30, 0x4F	; 79
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	38 2f       	mov	r19, r24
    1b8a:	ef e4       	ldi	r30, 0x4F	; 79
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	28 2f       	mov	r18, r24
    1b92:	2f 73       	andi	r18, 0x3F	; 63
    1b94:	e9 81       	ldd	r30, Y+1	; 0x01
    1b96:	fa 81       	ldd	r31, Y+2	; 0x02
    1b98:	81 81       	ldd	r24, Z+1	; 0x01
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	00 24       	eor	r0, r0
    1ba0:	96 95       	lsr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	07 94       	ror	r0
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	07 94       	ror	r0
    1bac:	98 2f       	mov	r25, r24
    1bae:	80 2d       	mov	r24, r0
    1bb0:	82 2b       	or	r24, r18
    1bb2:	83 2b       	or	r24, r19
    1bb4:	8c 93       	st	X, r24
	TCCR1A |= (TCCR1A & 0xCF)|(Timer1_Data->Timer1_mode <<4) ;
  #elif((TIMER1_CHANNEL_A  == 1 )&&(TIMER1_CHANNEL_B == 1 ))
	TCCR1A |= (TCCR1A & 0x0F)|(Timer1_Data->Timer1_mode <<4)|(Timer1_Data->Timer1_mode <<6);
  #endif

	TCCR1A |= (TCCR1A & 0xFC) | (Timer1_Data->Timer_oneMode);
    1bb6:	af e4       	ldi	r26, 0x4F	; 79
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ef e4       	ldi	r30, 0x4F	; 79
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	ef e4       	ldi	r30, 0x4F	; 79
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	98 2f       	mov	r25, r24
    1bca:	9c 7f       	andi	r25, 0xFC	; 252
    1bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bce:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd0:	80 81       	ld	r24, Z
    1bd2:	89 2b       	or	r24, r25
    1bd4:	82 2b       	or	r24, r18
    1bd6:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xE7) | ((Timer1_Data->Timer_oneMode)<<3);
    1bd8:	ae e4       	ldi	r26, 0x4E	; 78
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ee e4       	ldi	r30, 0x4E	; 78
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	38 2f       	mov	r19, r24
    1be4:	ee e4       	ldi	r30, 0x4E	; 78
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	28 2f       	mov	r18, r24
    1bec:	27 7e       	andi	r18, 0xE7	; 231
    1bee:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf2:	80 81       	ld	r24, Z
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	82 2b       	or	r24, r18
    1c06:	83 2b       	or	r24, r19
    1c08:	8c 93       	st	X, r24
	TCCR1B |= (TCCR1B & 0xF8) | (Timer1_Data->Clock1);
    1c0a:	ae e4       	ldi	r26, 0x4E	; 78
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ee e4       	ldi	r30, 0x4E	; 78
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	ee e4       	ldi	r30, 0x4E	; 78
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	98 7f       	andi	r25, 0xF8	; 248
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	89 2b       	or	r24, r25
    1c28:	82 2b       	or	r24, r18
    1c2a:	8c 93       	st	X, r24

  if(Timer1_Data->Timer_oneMode ==0){
    1c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c30:	80 81       	ld	r24, Z
    1c32:	88 23       	and	r24, r24
    1c34:	41 f4       	brne	.+16     	; 0x1c46 <SET_timer1+0x102>
			TIMSK |= 1<<TOIE1;
    1c36:	a9 e5       	ldi	r26, 0x59	; 89
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e9 e5       	ldi	r30, 0x59	; 89
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	84 60       	ori	r24, 0x04	; 4
    1c42:	8c 93       	st	X, r24
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <SET_timer1+0x12a>
  }

  else {
  #if(( TIMER1_CHANNEL_A  == 1 )&& (TIMER1_CHANNEL_B == 0 ))
	TIMSK |= 1<<OCIE1A;
    1c46:	a9 e5       	ldi	r26, 0x59	; 89
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 e5       	ldi	r30, 0x59	; 89
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	80 61       	ori	r24, 0x10	; 16
    1c52:	8c 93       	st	X, r24
	DDRD |=1<<PD5;
    1c54:	a1 e3       	ldi	r26, 0x31	; 49
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e1 e3       	ldi	r30, 0x31	; 49
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 62       	ori	r24, 0x20	; 32
    1c60:	8c 93       	st	X, r24
	OCR1A=OUTPUT_COMPARE_MATCH_REGISTERA;
    1c62:	ea e4       	ldi	r30, 0x4A	; 74
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 ed       	ldi	r24, 0xD0	; 208
    1c68:	97 e0       	ldi	r25, 0x07	; 7
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	80 83       	st	Z, r24
	OCR1B = OUTPUT_COMPARE_MATCH_REGISTERB;

  #endif
  }

    TCNT1=TIMER_COUNTER_INITIAL_VALUE;
    1c6e:	ec e4       	ldi	r30, 0x4C	; 76
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	11 82       	std	Z+1, r1	; 0x01
    1c74:	10 82       	st	Z, r1

 }
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <ACTIVATE_timer1>:
 * Description    : This Function is responsible for giving clock to Timer 1.
 * Arguments      : Constant Pointer to Structure to carry the address of the Structure
 *                  that carries the information of Timer 1.
 * Return         : None.
 **************************************************************************************************************/
void ACTIVATE_timer1(const Timer1_setup* Timer1_Data){
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <ACTIVATE_timer1+0x6>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= (TCCR1B & 0xF8) | (Timer1_Data->Clock1);
    1c8e:	ae e4       	ldi	r26, 0x4E	; 78
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	ee e4       	ldi	r30, 0x4E	; 78
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	28 2f       	mov	r18, r24
    1c9a:	ee e4       	ldi	r30, 0x4E	; 78
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	98 7f       	andi	r25, 0xF8	; 248
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	89 2b       	or	r24, r25
    1cac:	82 2b       	or	r24, r18
    1cae:	8c 93       	st	X, r24
}
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <DEACTIVATE_timer1>:
 * Function Name  : DEACTIVATE_timer1
 * Description    : This Function is responsible for stop clock to Timer 1.
 * Arguments      : None.
 * Return         : None.
 **************************************************************************************************************/
void DEACTIVATE_timer1(){
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (TCCR1B & 0xF8) | (0);
    1cc2:	ae e4       	ldi	r26, 0x4E	; 78
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ee e4       	ldi	r30, 0x4E	; 78
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	98 2f       	mov	r25, r24
    1cce:	ee e4       	ldi	r30, 0x4E	; 78
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 7f       	andi	r24, 0xF8	; 248
    1cd6:	89 2b       	or	r24, r25
    1cd8:	8c 93       	st	X, r24
}
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <__prologue_saves__>:
    1ce0:	2f 92       	push	r2
    1ce2:	3f 92       	push	r3
    1ce4:	4f 92       	push	r4
    1ce6:	5f 92       	push	r5
    1ce8:	6f 92       	push	r6
    1cea:	7f 92       	push	r7
    1cec:	8f 92       	push	r8
    1cee:	9f 92       	push	r9
    1cf0:	af 92       	push	r10
    1cf2:	bf 92       	push	r11
    1cf4:	cf 92       	push	r12
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	ca 1b       	sub	r28, r26
    1d0a:	db 0b       	sbc	r29, r27
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	09 94       	ijmp

00001d18 <__epilogue_restores__>:
    1d18:	2a 88       	ldd	r2, Y+18	; 0x12
    1d1a:	39 88       	ldd	r3, Y+17	; 0x11
    1d1c:	48 88       	ldd	r4, Y+16	; 0x10
    1d1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d20:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d22:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d24:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d26:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d28:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d2a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d2c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d2e:	df 80       	ldd	r13, Y+7	; 0x07
    1d30:	ee 80       	ldd	r14, Y+6	; 0x06
    1d32:	fd 80       	ldd	r15, Y+5	; 0x05
    1d34:	0c 81       	ldd	r16, Y+4	; 0x04
    1d36:	1b 81       	ldd	r17, Y+3	; 0x03
    1d38:	aa 81       	ldd	r26, Y+2	; 0x02
    1d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d3c:	ce 0f       	add	r28, r30
    1d3e:	d1 1d       	adc	r29, r1
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	ed 01       	movw	r28, r26
    1d4c:	08 95       	ret

00001d4e <_exit>:
    1d4e:	f8 94       	cli

00001d50 <__stop_program>:
    1d50:	ff cf       	rjmp	.-2      	; 0x1d50 <__stop_program>
